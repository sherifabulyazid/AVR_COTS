
Smart_Home_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000571c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  0000571c  000057b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080023c  0080023c  0000598c  2**0
                  ALLOC
  3 .stab         000041c4  00000000  00000000  0000598c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f2  00000000  00000000  00009b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ae42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000b002  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000b216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000104eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010f05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__vector_9>
      28:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__vector_10>
      2c:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 1c 	call	0x393e	; 0x393e <main>
      8a:	0c 94 8c 2b 	jmp	0x5718	; 0x5718 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e1       	ldi	r26, 0x13	; 19
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 2b 	jmp	0x56e2	; 0x56e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e1       	ldi	r24, 0x13	; 19
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 2b 	jmp	0x56e2	; 0x56e2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e1       	ldi	r22, 0x13	; 19
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7a 2b 	jmp	0x56f4	; 0x56f4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 65 2b 	jmp	0x56ca	; 0x56ca <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 81 2b 	jmp	0x5702	; 0x5702 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e5 5e       	subi	r30, 0xE5	; 229
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_init>:
uint8 ADC_uint8_BusyState = ADC_NOTBUSY;
/*global variable to set the ADC Asynch source*/
static uint8 ADC_uint8_ADCISRSource = STD_LOW;

void ADC_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/*choosind the reference voltage*/
#if VOLTAGR_REF == AREF
	CLR_BIT(ADMUX, REFS1);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 77       	andi	r24, 0x7F	; 127
     efe:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS0);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 7b       	andi	r24, 0xBF	; 191
     f0c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
#endif

#if  ADC_RESOLUTION_MODE==ADC_RESOLUTION_8_BITS
	/*setting the bits for Left adjust*/
	SET_BIT(ADMUX, ADCLAR);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
#endif
	
#if ADC_CONVERSION_MODE	== ADC_SINGLE_CONVERSION_MODE

	/*set ADC as single conversion*/
	CLR_BIT(ADCSRA, ADATE);
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 7d       	andi	r24, 0xDF	; 223
     f28:	8c 93       	st	X, r24
	#endif
#endif

#if ADC_INTERRUPT_MODE == ADC_INTERRUPT_OFF
	/*disable interrupt*/
	CLR_BIT(ADCSRA, ADIE);
     f2a:	a6 e2       	ldi	r26, 0x26	; 38
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e6 e2       	ldi	r30, 0x26	; 38
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	87 7f       	andi	r24, 0xF7	; 247
     f36:	8c 93       	st	X, r24
#elif ADC_INTERRUPT_MODE == ADC_INTERRUPT_ON
	SET_BIT(ADCSRA, ADIE);
#endif

	/*choosing the prescalar*/
	CLR_BIT(ADCSRA,ADPS2);
     f38:	a6 e2       	ldi	r26, 0x26	; 38
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e6 e2       	ldi	r30, 0x26	; 38
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8b 7f       	andi	r24, 0xFB	; 251
     f44:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1);
     f46:	a6 e2       	ldi	r26, 0x26	; 38
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e2       	ldi	r30, 0x26	; 38
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS0);
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
	ADCSRA |=ADC_PRESCALAR;
     f62:	a6 e2       	ldi	r26, 0x26	; 38
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e2       	ldi	r30, 0x26	; 38
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	87 60       	ori	r24, 0x07	; 7
     f6e:	8c 93       	st	X, r24

	/*enable ADC*/
	SET_BIT(ADCSRA, ADEN);
     f70:	a6 e2       	ldi	r26, 0x26	; 38
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e6 e2       	ldi	r30, 0x26	; 38
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	80 68       	ori	r24, 0x80	; 128
     f7c:	8c 93       	st	X, r24
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <ADC_StartConversion>:

uint8 ADC_StartConversion(uint8 copy_channel)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	89 83       	std	Y+1, r24	; 0x01
	/*choosing the ADC channel*/
	ADMUX &= 0b11100000;
     f90:	a7 e2       	ldi	r26, 0x27	; 39
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e7 e2       	ldi	r30, 0x27	; 39
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 7e       	andi	r24, 0xE0	; 224
     f9c:	8c 93       	st	X, r24
	ADMUX |= copy_channel;
     f9e:	a7 e2       	ldi	r26, 0x27	; 39
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e7 e2       	ldi	r30, 0x27	; 39
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	90 81       	ld	r25, Z
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	89 2b       	or	r24, r25
     fac:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADSC);
     fae:	a6 e2       	ldi	r26, 0x26	; 38
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e6 e2       	ldi	r30, 0x26	; 38
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	8c 93       	st	X, r24
	
	while(!GET_BIT(ADCSRA,ADIF));
     fbc:	e6 e2       	ldi	r30, 0x26	; 38
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	82 95       	swap	r24
     fc4:	8f 70       	andi	r24, 0x0F	; 15
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	90 70       	andi	r25, 0x00	; 0
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	a9 f3       	breq	.-22     	; 0xfbc <ADC_StartConversion+0x38>
	
	/*clearing the flag*/
	SET_BIT(ADCSRA,ADIF);
     fd2:	a6 e2       	ldi	r26, 0x26	; 38
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e6 e2       	ldi	r30, 0x26	; 38
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 61       	ori	r24, 0x10	; 16
     fde:	8c 93       	st	X, r24
	return ADCH;
     fe0:	e5 e2       	ldi	r30, 0x25	; 37
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
}
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <ADC_uint8_StartConversionSynch>:
uint8 ADC_uint8_StartConversionSynch(uint8 copy_uint8_channel, uint8* copy_puint8_reading)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	28 97       	sbiw	r28, 0x08	; 8
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	8e 83       	std	Y+6, r24	; 0x06
    1004:	78 87       	std	Y+8, r23	; 0x08
    1006:	6f 83       	std	Y+7, r22	; 0x07
	uint8 localError=TRUE;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	8d 83       	std	Y+5, r24	; 0x05
	uint32 localTimeOutCounter=0;
    100c:	19 82       	std	Y+1, r1	; 0x01
    100e:	1a 82       	std	Y+2, r1	; 0x02
    1010:	1b 82       	std	Y+3, r1	; 0x03
    1012:	1c 82       	std	Y+4, r1	; 0x04
	if (ADC_uint8_BusyState == ADC_NOTBUSY)
    1014:	80 91 1b 02 	lds	r24, 0x021B
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	09 f0       	breq	.+2      	; 0x101e <ADC_uint8_StartConversionSynch+0x30>
    101c:	68 c0       	rjmp	.+208    	; 0x10ee <ADC_uint8_StartConversionSynch+0x100>
	{
		ADC_uint8_BusyState=ADC_BUSY;
    101e:	10 92 1b 02 	sts	0x021B, r1
		/*choosing the ADC channel*/
		ADMUX &= ADMUX_CLEAR;
    1022:	a7 e2       	ldi	r26, 0x27	; 39
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e2       	ldi	r30, 0x27	; 39
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 7e       	andi	r24, 0xE0	; 224
    102e:	8c 93       	st	X, r24
		ADMUX |= copy_uint8_channel;
    1030:	a7 e2       	ldi	r26, 0x27	; 39
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e2       	ldi	r30, 0x27	; 39
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	90 81       	ld	r25, Z
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
    103c:	89 2b       	or	r24, r25
    103e:	8c 93       	st	X, r24
		/*start conversion*/
		SET_BIT(ADCSRA,ADSC);
    1040:	a6 e2       	ldi	r26, 0x26	; 38
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e2       	ldi	r30, 0x26	; 38
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	8c 93       	st	X, r24
    104e:	0b c0       	rjmp	.+22     	; 0x1066 <ADC_uint8_StartConversionSynch+0x78>
		/*Polling (busy waiting) until the conversion complete flag is set or counter reach timeout value*/
		while(GET_BIT(ADCSRA,ADIF)==FALSE &&localTimeOutCounter!= ADC_uint32_TIMEOUT)
		{
			localTimeOutCounter++;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	ab 81       	ldd	r26, Y+3	; 0x03
    1056:	bc 81       	ldd	r27, Y+4	; 0x04
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	a1 1d       	adc	r26, r1
    105c:	b1 1d       	adc	r27, r1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	ab 83       	std	Y+3, r26	; 0x03
    1064:	bc 83       	std	Y+4, r27	; 0x04
		ADMUX &= ADMUX_CLEAR;
		ADMUX |= copy_uint8_channel;
		/*start conversion*/
		SET_BIT(ADCSRA,ADSC);
		/*Polling (busy waiting) until the conversion complete flag is set or counter reach timeout value*/
		while(GET_BIT(ADCSRA,ADIF)==FALSE &&localTimeOutCounter!= ADC_uint32_TIMEOUT)
    1066:	e6 e2       	ldi	r30, 0x26	; 38
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	82 95       	swap	r24
    106e:	8f 70       	andi	r24, 0x0F	; 15
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f4       	brne	.+24     	; 0x1094 <ADC_uint8_StartConversionSynch+0xa6>
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	ab 81       	ldd	r26, Y+3	; 0x03
    1082:	bc 81       	ldd	r27, Y+4	; 0x04
    1084:	80 35       	cpi	r24, 0x50	; 80
    1086:	23 ec       	ldi	r18, 0xC3	; 195
    1088:	92 07       	cpc	r25, r18
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	a2 07       	cpc	r26, r18
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	b2 07       	cpc	r27, r18
    1092:	f1 f6       	brne	.-68     	; 0x1050 <ADC_uint8_StartConversionSynch+0x62>
		{
			localTimeOutCounter++;
		}
		if(GET_BIT(ADCSRA,ADIF)==TRUE)
    1094:	e6 e2       	ldi	r30, 0x26	; 38
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	82 95       	swap	r24
    109c:	8f 70       	andi	r24, 0x0F	; 15
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	88 23       	and	r24, r24
    10a8:	89 f0       	breq	.+34     	; 0x10cc <ADC_uint8_StartConversionSynch+0xde>
		{
			/*clearing the flag*/
			SET_BIT(ADCSRA,ADIF);
    10aa:	a6 e2       	ldi	r26, 0x26	; 38
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e6 e2       	ldi	r30, 0x26	; 38
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 61       	ori	r24, 0x10	; 16
    10b6:	8c 93       	st	X, r24
			/*assigning digital value */
			*copy_puint8_reading = ADCH;
    10b8:	e5 e2       	ldi	r30, 0x25	; 37
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	ef 81       	ldd	r30, Y+7	; 0x07
    10c0:	f8 85       	ldd	r31, Y+8	; 0x08
    10c2:	80 83       	st	Z, r24
			ADC_uint8_BusyState = ADC_NOTBUSY;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	80 93 1b 02 	sts	0x021B, r24
    10ca:	12 c0       	rjmp	.+36     	; 0x10f0 <ADC_uint8_StartConversionSynch+0x102>
		}
		else if(localTimeOutCounter== ADC_uint32_TIMEOUT)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	ab 81       	ldd	r26, Y+3	; 0x03
    10d2:	bc 81       	ldd	r27, Y+4	; 0x04
    10d4:	80 35       	cpi	r24, 0x50	; 80
    10d6:	23 ec       	ldi	r18, 0xC3	; 195
    10d8:	92 07       	cpc	r25, r18
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	a2 07       	cpc	r26, r18
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	b2 07       	cpc	r27, r18
    10e2:	31 f4       	brne	.+12     	; 0x10f0 <ADC_uint8_StartConversionSynch+0x102>
		{
			localError=FALSE;
    10e4:	1d 82       	std	Y+5, r1	; 0x05
			ADC_uint8_BusyState = ADC_NOTBUSY;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 1b 02 	sts	0x021B, r24
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <ADC_uint8_StartConversionSynch+0x102>


	}
	else
	{
		localError=FALSE;
    10ee:	1d 82       	std	Y+5, r1	; 0x05
	}
	return localError;
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05

}
    10f2:	28 96       	adiw	r28, 0x08	; 8
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <ADC_uint8_StartConversionAsynch>:
uint8 ADC_uint8_StartConversionAsynch(uint8 copy_uint8_channel, uint8* copy_puint8_reading, void (*copy_pv_NotificationFunction)(void))
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <ADC_uint8_StartConversionAsynch+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <ADC_uint8_StartConversionAsynch+0x8>
    110c:	00 d0       	rcall	.+0      	; 0x110e <ADC_uint8_StartConversionAsynch+0xa>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	7c 83       	std	Y+4, r23	; 0x04
    1116:	6b 83       	std	Y+3, r22	; 0x03
    1118:	5e 83       	std	Y+6, r21	; 0x06
    111a:	4d 83       	std	Y+5, r20	; 0x05

	uint8 localError=TRUE;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01
	if (ADC_uint8_BusyState == ADC_BUSY)
    1120:	80 91 1b 02 	lds	r24, 0x021B
    1124:	88 23       	and	r24, r24
    1126:	11 f4       	brne	.+4      	; 0x112c <ADC_uint8_StartConversionAsynch+0x28>
	{
		localError = FALSE;
    1128:	19 82       	std	Y+1, r1	; 0x01
    112a:	38 c0       	rjmp	.+112    	; 0x119c <ADC_uint8_StartConversionAsynch+0x98>
	}
	else
	{
		if ((copy_puint8_reading == NULL) || (copy_pv_NotificationFunction == NULL))
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	21 f0       	breq	.+8      	; 0x113c <ADC_uint8_StartConversionAsynch+0x38>
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	11 f4       	brne	.+4      	; 0x1140 <ADC_uint8_StartConversionAsynch+0x3c>
			{
				localError=FALSE;
    113c:	19 82       	std	Y+1, r1	; 0x01
    113e:	2e c0       	rjmp	.+92     	; 0x119c <ADC_uint8_StartConversionAsynch+0x98>
			}
			else
			{
				ADC_uint8_BusyState=ADC_BUSY;
    1140:	10 92 1b 02 	sts	0x021B, r1
				/*make ISR source single channel Asynchronous*/
				ADC_uint8_ADCISRSource = SINGLE_CHANNEL_ASYNCH;
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	80 93 40 02 	sts	0x0240, r24
				/*initialize the reading variable*/
				ADC_puint8_Reading=copy_puint8_reading;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	90 93 3d 02 	sts	0x023D, r25
    1152:	80 93 3c 02 	sts	0x023C, r24
				/*initialize the call back function*/
				ADC_pv_CallBackNotification=copy_pv_NotificationFunction;
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	90 93 3f 02 	sts	0x023F, r25
    115e:	80 93 3e 02 	sts	0x023E, r24
				/*choosing the ADC channel*/
				ADMUX &= ADMUX_CLEAR;
    1162:	a7 e2       	ldi	r26, 0x27	; 39
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e2       	ldi	r30, 0x27	; 39
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 7e       	andi	r24, 0xE0	; 224
    116e:	8c 93       	st	X, r24
				ADMUX |= copy_uint8_channel;
    1170:	a7 e2       	ldi	r26, 0x27	; 39
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e7 e2       	ldi	r30, 0x27	; 39
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	90 81       	ld	r25, Z
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	89 2b       	or	r24, r25
    117e:	8c 93       	st	X, r24
				/*ADC interrupt Enable*/
				SET_BIT(ADCSRA,ADIE);
    1180:	a6 e2       	ldi	r26, 0x26	; 38
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 e2       	ldi	r30, 0x26	; 38
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 60       	ori	r24, 0x08	; 8
    118c:	8c 93       	st	X, r24
				/*start conversion*/
				SET_BIT(ADCSRA,ADSC);
    118e:	a6 e2       	ldi	r26, 0x26	; 38
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e6 e2       	ldi	r30, 0x26	; 38
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8c 93       	st	X, r24
			}
	}
	return localError;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
}
    119e:	26 96       	adiw	r28, 0x06	; 6
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16(void)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
 if(ADC_uint8_ADCISRSource==SINGLE_CHANNEL_ASYNCH)
    11da:	80 91 40 02 	lds	r24, 0x0240
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	b9 f4       	brne	.+46     	; 0x1210 <__vector_16+0x60>
 {
	 	/*Read the ADC result*/
		*ADC_puint8_Reading=ADCH;
    11e2:	a0 91 3c 02 	lds	r26, 0x023C
    11e6:	b0 91 3d 02 	lds	r27, 0x023D
    11ea:	e5 e2       	ldi	r30, 0x25	; 37
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8c 93       	st	X, r24
		/*call the call back function in the main application*/
		ADC_pv_CallBackNotification();
    11f2:	e0 91 3e 02 	lds	r30, 0x023E
    11f6:	f0 91 3f 02 	lds	r31, 0x023F
    11fa:	09 95       	icall
		/*disable ADC interrupt*/
		CLR_BIT(ADCSRA,ADIE);
    11fc:	a6 e2       	ldi	r26, 0x26	; 38
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e6 e2       	ldi	r30, 0x26	; 38
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	87 7f       	andi	r24, 0xF7	; 247
    1208:	8c 93       	st	X, r24
		/*set the ADC to NOTBUSY to start new conversion if requested*/
		ADC_uint8_BusyState = ADC_NOTBUSY;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 1b 02 	sts	0x021B, r24
 }
 else if(ADC_uint8_ADCISRSource==CHAIN_ASYNCH)
 {

 }
}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <DIO_setPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Register.h"

uint8 DIO_setPinDirection(uint8  Copy_Port ,  uint8 Copy_Pin ,  uint8 Copy_Direction)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	28 97       	sbiw	r28, 0x08	; 8
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	8a 83       	std	Y+2, r24	; 0x02
    124c:	6b 83       	std	Y+3, r22	; 0x03
    124e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    1250:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 30       	cpi	r24, 0x08	; 8
    1256:	08 f0       	brcs	.+2      	; 0x125a <DIO_setPinDirection+0x24>
    1258:	f3 c0       	rjmp	.+486    	; 0x1440 <DIO_setPinDirection+0x20a>
	{
		if(Copy_Direction == OUTPUT)
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	09 f0       	breq	.+2      	; 0x1262 <DIO_setPinDirection+0x2c>
    1260:	72 c0       	rjmp	.+228    	; 0x1346 <DIO_setPinDirection+0x110>
		{
			switch(Copy_Port)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	38 87       	std	Y+8, r19	; 0x08
    126a:	2f 83       	std	Y+7, r18	; 0x07
    126c:	8f 81       	ldd	r24, Y+7	; 0x07
    126e:	98 85       	ldd	r25, Y+8	; 0x08
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	49 f1       	breq	.+82     	; 0x12c8 <DIO_setPinDirection+0x92>
    1276:	2f 81       	ldd	r18, Y+7	; 0x07
    1278:	38 85       	ldd	r19, Y+8	; 0x08
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <DIO_setPinDirection+0x54>
    1280:	8f 81       	ldd	r24, Y+7	; 0x07
    1282:	98 85       	ldd	r25, Y+8	; 0x08
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <DIO_setPinDirection+0x6a>
    1288:	5b c0       	rjmp	.+182    	; 0x1340 <DIO_setPinDirection+0x10a>
    128a:	2f 81       	ldd	r18, Y+7	; 0x07
    128c:	38 85       	ldd	r19, Y+8	; 0x08
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	71 f1       	breq	.+92     	; 0x12f0 <DIO_setPinDirection+0xba>
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	e9 f1       	breq	.+122    	; 0x1318 <DIO_setPinDirection+0xe2>
    129e:	50 c0       	rjmp	.+160    	; 0x1340 <DIO_setPinDirection+0x10a>
			{
				case DIO_PORTA:
					SETBIT(DDRA,Copy_Pin);
    12a0:	aa e3       	ldi	r26, 0x3A	; 58
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e3       	ldi	r30, 0x3A	; 58
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_setPinDirection+0x88>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_setPinDirection+0x84>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	bc c0       	rjmp	.+376    	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					SETBIT(DDRB,Copy_Pin);
    12c8:	a7 e3       	ldi	r26, 0x37	; 55
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e7 e3       	ldi	r30, 0x37	; 55
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_setPinDirection+0xb0>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_setPinDirection+0xac>
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	a8 c0       	rjmp	.+336    	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					SETBIT(DDRC,Copy_Pin);
    12f0:	a4 e3       	ldi	r26, 0x34	; 52
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e4 e3       	ldi	r30, 0x34	; 52
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_setPinDirection+0xd8>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_setPinDirection+0xd4>
    1312:	84 2b       	or	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	94 c0       	rjmp	.+296    	; 0x1440 <DIO_setPinDirection+0x20a>
						break;
				case DIO_PORTD:
					SETBIT(DDRD,Copy_Pin);
    1318:	a1 e3       	ldi	r26, 0x31	; 49
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e1 e3       	ldi	r30, 0x31	; 49
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_setPinDirection+0x100>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_setPinDirection+0xfc>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	80 c0       	rjmp	.+256    	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	7d c0       	rjmp	.+250    	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
			}
		}
		else if (Copy_Direction == INPUT)
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	88 23       	and	r24, r24
    134a:	09 f0       	breq	.+2      	; 0x134e <DIO_setPinDirection+0x118>
    134c:	77 c0       	rjmp	.+238    	; 0x143c <DIO_setPinDirection+0x206>
		{
			switch(Copy_Port)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3e 83       	std	Y+6, r19	; 0x06
    1356:	2d 83       	std	Y+5, r18	; 0x05
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	91 05       	cpc	r25, r1
    1360:	59 f1       	breq	.+86     	; 0x13b8 <DIO_setPinDirection+0x182>
    1362:	2d 81       	ldd	r18, Y+5	; 0x05
    1364:	3e 81       	ldd	r19, Y+6	; 0x06
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	2c f4       	brge	.+10     	; 0x1376 <DIO_setPinDirection+0x140>
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	69 f0       	breq	.+26     	; 0x138e <DIO_setPinDirection+0x158>
    1374:	60 c0       	rjmp	.+192    	; 0x1436 <DIO_setPinDirection+0x200>
    1376:	2d 81       	ldd	r18, Y+5	; 0x05
    1378:	3e 81       	ldd	r19, Y+6	; 0x06
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	89 f1       	breq	.+98     	; 0x13e2 <DIO_setPinDirection+0x1ac>
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO_setPinDirection+0x156>
    138a:	40 c0       	rjmp	.+128    	; 0x140c <DIO_setPinDirection+0x1d6>
    138c:	54 c0       	rjmp	.+168    	; 0x1436 <DIO_setPinDirection+0x200>
			{
				case DIO_PORTA:
					CLEARBIT(DDRA,Copy_Pin);
    138e:	aa e3       	ldi	r26, 0x3A	; 58
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ea e3       	ldi	r30, 0x3A	; 58
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_setPinDirection+0x176>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_setPinDirection+0x172>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	44 c0       	rjmp	.+136    	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					CLEARBIT(DDRB,Copy_Pin);
    13b8:	a7 e3       	ldi	r26, 0x37	; 55
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e3       	ldi	r30, 0x37	; 55
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_setPinDirection+0x1a0>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_setPinDirection+0x19c>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	2f c0       	rjmp	.+94     	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					CLEARBIT(DDRC,Copy_Pin);
    13e2:	a4 e3       	ldi	r26, 0x34	; 52
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e4 e3       	ldi	r30, 0x34	; 52
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_setPinDirection+0x1ca>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_setPinDirection+0x1c6>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	1a c0       	rjmp	.+52     	; 0x1440 <DIO_setPinDirection+0x20a>
						break;
				case DIO_PORTD:
					CLEARBIT(DDRD,Copy_Pin);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_setPinDirection+0x1f4>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_setPinDirection+0x1f0>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <DIO_setPinDirection+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_setPinDirection+0x20a>
			}
		}

		else
		{
			local_ErrorStatus=1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return local_ErrorStatus;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	28 96       	adiw	r28, 0x08	; 8
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_setPinVAlue>:

uint8 DIO_setPinVAlue(uint8  Copy_Port ,  uint8 Copy_Pin ,  uint8 Copy_Status)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	28 97       	sbiw	r28, 0x08	; 8
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	6b 83       	std	Y+3, r22	; 0x03
    146c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    146e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 30       	cpi	r24, 0x08	; 8
    1474:	08 f0       	brcs	.+2      	; 0x1478 <DIO_setPinVAlue+0x24>
    1476:	f3 c0       	rjmp	.+486    	; 0x165e <DIO_setPinVAlue+0x20a>
	{
		if(Copy_Status == OUTPUT_HIGH)
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	09 f0       	breq	.+2      	; 0x1480 <DIO_setPinVAlue+0x2c>
    147e:	72 c0       	rjmp	.+228    	; 0x1564 <DIO_setPinVAlue+0x110>
		{
			switch(Copy_Port)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	38 87       	std	Y+8, r19	; 0x08
    1488:	2f 83       	std	Y+7, r18	; 0x07
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	49 f1       	breq	.+82     	; 0x14e6 <DIO_setPinVAlue+0x92>
    1494:	2f 81       	ldd	r18, Y+7	; 0x07
    1496:	38 85       	ldd	r19, Y+8	; 0x08
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <DIO_setPinVAlue+0x54>
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	61 f0       	breq	.+24     	; 0x14be <DIO_setPinVAlue+0x6a>
    14a6:	5b c0       	rjmp	.+182    	; 0x155e <DIO_setPinVAlue+0x10a>
    14a8:	2f 81       	ldd	r18, Y+7	; 0x07
    14aa:	38 85       	ldd	r19, Y+8	; 0x08
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	71 f1       	breq	.+92     	; 0x150e <DIO_setPinVAlue+0xba>
    14b2:	8f 81       	ldd	r24, Y+7	; 0x07
    14b4:	98 85       	ldd	r25, Y+8	; 0x08
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	e9 f1       	breq	.+122    	; 0x1536 <DIO_setPinVAlue+0xe2>
    14bc:	50 c0       	rjmp	.+160    	; 0x155e <DIO_setPinVAlue+0x10a>
			{
				case DIO_PORTA:
					SETBIT(PORTA,Copy_Pin);
    14be:	ab e3       	ldi	r26, 0x3B	; 59
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_setPinVAlue+0x88>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_setPinVAlue+0x84>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	bc c0       	rjmp	.+376    	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
				case DIO_PORTB:
					SETBIT(PORTB,Copy_Pin);
    14e6:	a8 e3       	ldi	r26, 0x38	; 56
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e8 e3       	ldi	r30, 0x38	; 56
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_setPinVAlue+0xb0>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_setPinVAlue+0xac>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	a8 c0       	rjmp	.+336    	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
				case DIO_PORTC:
					SETBIT(PORTC,Copy_Pin);
    150e:	a5 e3       	ldi	r26, 0x35	; 53
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e3       	ldi	r30, 0x35	; 53
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_setPinVAlue+0xd8>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_setPinVAlue+0xd4>
    1530:	84 2b       	or	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	94 c0       	rjmp	.+296    	; 0x165e <DIO_setPinVAlue+0x20a>
						break;
				case DIO_PORTD:
					SETBIT(PORTD,Copy_Pin);
    1536:	a2 e3       	ldi	r26, 0x32	; 50
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_setPinVAlue+0x100>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_setPinVAlue+0xfc>
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	80 c0       	rjmp	.+256    	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	7d c0       	rjmp	.+250    	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
			}
		}
		else if (Copy_Status == OUTPUT_LOW)
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	88 23       	and	r24, r24
    1568:	09 f0       	breq	.+2      	; 0x156c <DIO_setPinVAlue+0x118>
    156a:	77 c0       	rjmp	.+238    	; 0x165a <DIO_setPinVAlue+0x206>
		{
			switch(Copy_Port)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3e 83       	std	Y+6, r19	; 0x06
    1574:	2d 83       	std	Y+5, r18	; 0x05
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	59 f1       	breq	.+86     	; 0x15d6 <DIO_setPinVAlue+0x182>
    1580:	2d 81       	ldd	r18, Y+5	; 0x05
    1582:	3e 81       	ldd	r19, Y+6	; 0x06
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <DIO_setPinVAlue+0x140>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	69 f0       	breq	.+26     	; 0x15ac <DIO_setPinVAlue+0x158>
    1592:	60 c0       	rjmp	.+192    	; 0x1654 <DIO_setPinVAlue+0x200>
    1594:	2d 81       	ldd	r18, Y+5	; 0x05
    1596:	3e 81       	ldd	r19, Y+6	; 0x06
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	89 f1       	breq	.+98     	; 0x1600 <DIO_setPinVAlue+0x1ac>
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_setPinVAlue+0x156>
    15a8:	40 c0       	rjmp	.+128    	; 0x162a <DIO_setPinVAlue+0x1d6>
    15aa:	54 c0       	rjmp	.+168    	; 0x1654 <DIO_setPinVAlue+0x200>
			{
				case DIO_PORTA:
					CLEARBIT(PORTA,Copy_Pin);
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_setPinVAlue+0x176>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_setPinVAlue+0x172>
    15ce:	80 95       	com	r24
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	44 c0       	rjmp	.+136    	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
				case DIO_PORTB:
					CLEARBIT(PORTB,Copy_Pin);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_setPinVAlue+0x1a0>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_setPinVAlue+0x19c>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	2f c0       	rjmp	.+94     	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
				case DIO_PORTC:
					CLEARBIT(PORTC,Copy_Pin);
    1600:	a5 e3       	ldi	r26, 0x35	; 53
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_setPinVAlue+0x1ca>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_setPinVAlue+0x1c6>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	1a c0       	rjmp	.+52     	; 0x165e <DIO_setPinVAlue+0x20a>
						break;
				case DIO_PORTD:
					CLEARBIT(PORTD,Copy_Pin);
    162a:	a2 e3       	ldi	r26, 0x32	; 50
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e2 e3       	ldi	r30, 0x32	; 50
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_setPinVAlue+0x1f4>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_setPinVAlue+0x1f0>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	05 c0       	rjmp	.+10     	; 0x165e <DIO_setPinVAlue+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_setPinVAlue+0x20a>
			}
		}

		else
		{
			local_ErrorStatus=1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return local_ErrorStatus;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	28 96       	adiw	r28, 0x08	; 8
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <DIO_SetPortDirection>:

uint8 DIO_SetPortDirection (uint8 Copy_Port, uint8 Copy_Direction )
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_SetPortDirection+0x6>
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_SetPortDirection+0x8>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	8a 83       	std	Y+2, r24	; 0x02
    1682:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    1684:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_Port)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3d 83       	std	Y+5, r19	; 0x05
    168e:	2c 83       	std	Y+4, r18	; 0x04
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	d1 f0       	breq	.+52     	; 0x16ce <DIO_SetPortDirection+0x5c>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	2c f4       	brge	.+10     	; 0x16ae <DIO_SetPortDirection+0x3c>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	61 f0       	breq	.+24     	; 0x16c4 <DIO_SetPortDirection+0x52>
    16ac:	1f c0       	rjmp	.+62     	; 0x16ec <DIO_SetPortDirection+0x7a>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	81 f0       	breq	.+32     	; 0x16d8 <DIO_SetPortDirection+0x66>
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <DIO_SetPortDirection+0x70>
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <DIO_SetPortDirection+0x7a>
					{
						case DIO_PORTA:
							DDRA= Copy_Direction;
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	80 83       	st	Z, r24
    16cc:	11 c0       	rjmp	.+34     	; 0x16f0 <DIO_SetPortDirection+0x7e>
							break;
						case DIO_PORTB:
							DDRB=Copy_Direction;
    16ce:	e7 e3       	ldi	r30, 0x37	; 55
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	80 83       	st	Z, r24
    16d6:	0c c0       	rjmp	.+24     	; 0x16f0 <DIO_SetPortDirection+0x7e>
							break;
						case DIO_PORTC:
							DDRC=Copy_Direction;
    16d8:	e4 e3       	ldi	r30, 0x34	; 52
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	80 83       	st	Z, r24
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <DIO_SetPortDirection+0x7e>
								break;
						case DIO_PORTD:
							DDRD=Copy_Direction;
    16e2:	e1 e3       	ldi	r30, 0x31	; 49
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	80 83       	st	Z, r24
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_SetPortDirection+0x7e>
							break;
						default:
							local_ErrorStatus=1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	89 83       	std	Y+1, r24	; 0x01
							break;
					}

		return local_ErrorStatus;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <DIO_SetPortValue>:


uint8 DIO_SetPortValue  (uint8 Copy_Port ,   uint8 Copy_Value )

{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <DIO_SetPortValue+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <DIO_SetPortValue+0x8>
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	8a 83       	std	Y+2, r24	; 0x02
    1712:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    1714:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_Port)
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	3d 83       	std	Y+5, r19	; 0x05
    171e:	2c 83       	std	Y+4, r18	; 0x04
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	91 05       	cpc	r25, r1
    1728:	d1 f0       	breq	.+52     	; 0x175e <DIO_SetPortValue+0x5c>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	2c f4       	brge	.+10     	; 0x173e <DIO_SetPortValue+0x3c>
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	61 f0       	breq	.+24     	; 0x1754 <DIO_SetPortValue+0x52>
    173c:	1f c0       	rjmp	.+62     	; 0x177c <DIO_SetPortValue+0x7a>
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	81 f0       	breq	.+32     	; 0x1768 <DIO_SetPortValue+0x66>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	91 05       	cpc	r25, r1
    1750:	81 f0       	breq	.+32     	; 0x1772 <DIO_SetPortValue+0x70>
    1752:	14 c0       	rjmp	.+40     	; 0x177c <DIO_SetPortValue+0x7a>
					{
						case DIO_PORTA:
							PORTA=Copy_Value;
    1754:	eb e3       	ldi	r30, 0x3B	; 59
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	80 83       	st	Z, r24
    175c:	11 c0       	rjmp	.+34     	; 0x1780 <DIO_SetPortValue+0x7e>
							break;
						case DIO_PORTB:
							PORTB=Copy_Value;
    175e:	e8 e3       	ldi	r30, 0x38	; 56
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	80 83       	st	Z, r24
    1766:	0c c0       	rjmp	.+24     	; 0x1780 <DIO_SetPortValue+0x7e>
							break;
						case DIO_PORTC:
							PORTC=Copy_Value;
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	80 83       	st	Z, r24
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <DIO_SetPortValue+0x7e>
								break;
						case DIO_PORTD:
							PORTD=Copy_Value;
    1772:	e2 e3       	ldi	r30, 0x32	; 50
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	80 83       	st	Z, r24
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_SetPortValue+0x7e>
							break;
						default:
							local_ErrorStatus=1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
							break;
					}


	return local_ErrorStatus;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <DIO_GetPinValue>:

uint8 DIO_GetPinValue (uint8 Copy_uint8_Port , uint8 Copy_uint8_Pin , uint8* Copy_uint8_Value)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	27 97       	sbiw	r28, 0x07	; 7
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	8a 83       	std	Y+2, r24	; 0x02
    17a8:	6b 83       	std	Y+3, r22	; 0x03
    17aa:	5d 83       	std	Y+5, r21	; 0x05
    17ac:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    17ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_uint8_Value!=NULL &&Copy_uint8_Pin <=7 )
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	09 f4       	brne	.+2      	; 0x17ba <DIO_GetPinValue+0x28>
    17b8:	78 c0       	rjmp	.+240    	; 0x18aa <DIO_GetPinValue+0x118>
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 30       	cpi	r24, 0x08	; 8
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <DIO_GetPinValue+0x30>
    17c0:	74 c0       	rjmp	.+232    	; 0x18aa <DIO_GetPinValue+0x118>
	{

		switch(Copy_uint8_Port)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3f 83       	std	Y+7, r19	; 0x07
    17ca:	2e 83       	std	Y+6, r18	; 0x06
    17cc:	4e 81       	ldd	r20, Y+6	; 0x06
    17ce:	5f 81       	ldd	r21, Y+7	; 0x07
    17d0:	41 30       	cpi	r20, 0x01	; 1
    17d2:	51 05       	cpc	r21, r1
    17d4:	59 f1       	breq	.+86     	; 0x182c <DIO_GetPinValue+0x9a>
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	34 f4       	brge	.+12     	; 0x17ec <DIO_GetPinValue+0x5a>
    17e0:	2e 81       	ldd	r18, Y+6	; 0x06
    17e2:	3f 81       	ldd	r19, Y+7	; 0x07
    17e4:	21 15       	cp	r18, r1
    17e6:	31 05       	cpc	r19, r1
    17e8:	69 f0       	breq	.+26     	; 0x1804 <DIO_GetPinValue+0x72>
    17ea:	5c c0       	rjmp	.+184    	; 0x18a4 <DIO_GetPinValue+0x112>
    17ec:	4e 81       	ldd	r20, Y+6	; 0x06
    17ee:	5f 81       	ldd	r21, Y+7	; 0x07
    17f0:	42 30       	cpi	r20, 0x02	; 2
    17f2:	51 05       	cpc	r21, r1
    17f4:	79 f1       	breq	.+94     	; 0x1854 <DIO_GetPinValue+0xc2>
    17f6:	8e 81       	ldd	r24, Y+6	; 0x06
    17f8:	9f 81       	ldd	r25, Y+7	; 0x07
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <DIO_GetPinValue+0x70>
    1800:	3d c0       	rjmp	.+122    	; 0x187c <DIO_GetPinValue+0xea>
    1802:	50 c0       	rjmp	.+160    	; 0x18a4 <DIO_GetPinValue+0x112>
		{
			case DIO_PORTA:
				*Copy_uint8_Value = GETBIT(PINA , Copy_uint8_Pin);
    1804:	e9 e3       	ldi	r30, 0x39	; 57
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a9 01       	movw	r20, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_GetPinValue+0x8a>
    1818:	55 95       	asr	r21
    181a:	47 95       	ror	r20
    181c:	8a 95       	dec	r24
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_GetPinValue+0x86>
    1820:	ca 01       	movw	r24, r20
    1822:	81 70       	andi	r24, 0x01	; 1
    1824:	ec 81       	ldd	r30, Y+4	; 0x04
    1826:	fd 81       	ldd	r31, Y+5	; 0x05
    1828:	80 83       	st	Z, r24
    182a:	41 c0       	rjmp	.+130    	; 0x18ae <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTB:
				*Copy_uint8_Value = GETBIT(PINB , Copy_uint8_Pin);
    182c:	e6 e3       	ldi	r30, 0x36	; 54
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_GetPinValue+0xb2>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_GetPinValue+0xae>
    1848:	ca 01       	movw	r24, r20
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	ec 81       	ldd	r30, Y+4	; 0x04
    184e:	fd 81       	ldd	r31, Y+5	; 0x05
    1850:	80 83       	st	Z, r24
    1852:	2d c0       	rjmp	.+90     	; 0x18ae <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTC:
				*Copy_uint8_Value = GETBIT(PINC , Copy_uint8_Pin);
    1854:	e3 e3       	ldi	r30, 0x33	; 51
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_GetPinValue+0xda>
    1868:	55 95       	asr	r21
    186a:	47 95       	ror	r20
    186c:	8a 95       	dec	r24
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_GetPinValue+0xd6>
    1870:	ca 01       	movw	r24, r20
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	ec 81       	ldd	r30, Y+4	; 0x04
    1876:	fd 81       	ldd	r31, Y+5	; 0x05
    1878:	80 83       	st	Z, r24
    187a:	19 c0       	rjmp	.+50     	; 0x18ae <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTD:
				*Copy_uint8_Value = GETBIT(PIND , Copy_uint8_Pin);
    187c:	e0 e3       	ldi	r30, 0x30	; 48
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a9 01       	movw	r20, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_GetPinValue+0x102>
    1890:	55 95       	asr	r21
    1892:	47 95       	ror	r20
    1894:	8a 95       	dec	r24
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_GetPinValue+0xfe>
    1898:	ca 01       	movw	r24, r20
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	ec 81       	ldd	r30, Y+4	; 0x04
    189e:	fd 81       	ldd	r31, Y+5	; 0x05
    18a0:	80 83       	st	Z, r24
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <DIO_GetPinValue+0x11c>
				break;
			default:
				local_ErrorStatus=1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_GetPinValue+0x11c>
				break;
		}
	}
	else
	{
		local_ErrorStatus=1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_ErrorStatus;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b0:	27 96       	adiw	r28, 0x07	; 7
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <DIO_setInternalPullUp>:

uint8 DIO_setInternalPullUp(uint8  Copy_Port ,  uint8 Copy_Pin)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <DIO_setInternalPullUp+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <DIO_setInternalPullUp+0x8>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    18d4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 30       	cpi	r24, 0x08	; 8
    18da:	08 f0       	brcs	.+2      	; 0x18de <DIO_setInternalPullUp+0x1c>
    18dc:	c0 c0       	rjmp	.+384    	; 0x1a5e <DIO_setInternalPullUp+0x19c>
	{
			switch(Copy_Port)
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3d 83       	std	Y+5, r19	; 0x05
    18e6:	2c 83       	std	Y+4, r18	; 0x04
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <DIO_setInternalPullUp+0x32>
    18f2:	3e c0       	rjmp	.+124    	; 0x1970 <DIO_setInternalPullUp+0xae>
    18f4:	2c 81       	ldd	r18, Y+4	; 0x04
    18f6:	3d 81       	ldd	r19, Y+5	; 0x05
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	2c f4       	brge	.+10     	; 0x1908 <DIO_setInternalPullUp+0x46>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	71 f0       	breq	.+28     	; 0x1922 <DIO_setInternalPullUp+0x60>
    1906:	a9 c0       	rjmp	.+338    	; 0x1a5a <DIO_setInternalPullUp+0x198>
    1908:	2c 81       	ldd	r18, Y+4	; 0x04
    190a:	3d 81       	ldd	r19, Y+5	; 0x05
    190c:	22 30       	cpi	r18, 0x02	; 2
    190e:	31 05       	cpc	r19, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <DIO_setInternalPullUp+0x52>
    1912:	55 c0       	rjmp	.+170    	; 0x19be <DIO_setInternalPullUp+0xfc>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <DIO_setInternalPullUp+0x5e>
    191e:	76 c0       	rjmp	.+236    	; 0x1a0c <DIO_setInternalPullUp+0x14a>
    1920:	9c c0       	rjmp	.+312    	; 0x1a5a <DIO_setInternalPullUp+0x198>
			{
				case DIO_PORTA:
					CLEARBIT(DDRA, Copy_Pin);
    1922:	aa e3       	ldi	r26, 0x3A	; 58
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ea e3       	ldi	r30, 0x3A	; 58
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_setInternalPullUp+0x7c>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	2a 95       	dec	r18
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_setInternalPullUp+0x78>
    1942:	80 95       	com	r24
    1944:	84 23       	and	r24, r20
    1946:	8c 93       	st	X, r24
					SETBIT(PORTA, Copy_Pin);
    1948:	ab e3       	ldi	r26, 0x3B	; 59
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	eb e3       	ldi	r30, 0x3B	; 59
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_setInternalPullUp+0xa4>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_setInternalPullUp+0xa0>
    196a:	84 2b       	or	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	77 c0       	rjmp	.+238    	; 0x1a5e <DIO_setInternalPullUp+0x19c>
					break;
				case DIO_PORTB:
					CLEARBIT(DDRB,Copy_Pin);
    1970:	a7 e3       	ldi	r26, 0x37	; 55
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e7 e3       	ldi	r30, 0x37	; 55
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_setInternalPullUp+0xca>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	2a 95       	dec	r18
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_setInternalPullUp+0xc6>
    1990:	80 95       	com	r24
    1992:	84 23       	and	r24, r20
    1994:	8c 93       	st	X, r24
					SETBIT(PORTB, Copy_Pin);
    1996:	a8 e3       	ldi	r26, 0x38	; 56
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e8 e3       	ldi	r30, 0x38	; 56
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_setInternalPullUp+0xf2>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_setInternalPullUp+0xee>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	50 c0       	rjmp	.+160    	; 0x1a5e <DIO_setInternalPullUp+0x19c>
					break;
				case DIO_PORTC:
					CLEARBIT(DDRC,Copy_Pin);
    19be:	a4 e3       	ldi	r26, 0x34	; 52
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e4 e3       	ldi	r30, 0x34	; 52
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_setInternalPullUp+0x118>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	2a 95       	dec	r18
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_setInternalPullUp+0x114>
    19de:	80 95       	com	r24
    19e0:	84 23       	and	r24, r20
    19e2:	8c 93       	st	X, r24
					SETBIT(PORTC, Copy_Pin);
    19e4:	a5 e3       	ldi	r26, 0x35	; 53
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_setInternalPullUp+0x140>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_setInternalPullUp+0x13c>
    1a06:	84 2b       	or	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	29 c0       	rjmp	.+82     	; 0x1a5e <DIO_setInternalPullUp+0x19c>
						break;
				case DIO_PORTD:
					CLEARBIT(DDRD,Copy_Pin);
    1a0c:	a1 e3       	ldi	r26, 0x31	; 49
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e1 e3       	ldi	r30, 0x31	; 49
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_setInternalPullUp+0x166>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	2a 95       	dec	r18
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_setInternalPullUp+0x162>
    1a2c:	80 95       	com	r24
    1a2e:	84 23       	and	r24, r20
    1a30:	8c 93       	st	X, r24
					SETBIT(PORTD, Copy_Pin);
    1a32:	a2 e3       	ldi	r26, 0x32	; 50
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e2 e3       	ldi	r30, 0x32	; 50
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_setInternalPullUp+0x18e>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_setInternalPullUp+0x18a>
    1a54:	84 2b       	or	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_setInternalPullUp+0x19c>
					break;
				default:
					local_ErrorStatus=1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
	}

	return local_ErrorStatus;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <get_button_pressed>:
#include "LCD_Interface.h"
#include "Keypad_config.h"
#include "Keypad_Interface.h"

uint8 get_button_pressed(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	6a 97       	sbiw	r28, 0x1a	; 26
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
	uint8 row=0,column=0;
    1a84:	1b 82       	std	Y+3, r1	; 0x03
    1a86:	1a 82       	std	Y+2, r1	; 0x02
	uint8 buttonStatus=0xff;
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	8c 83       	std	Y+4, r24	; 0x04
	uint8 buttonPressed = 0xff;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	uint8 buttonArray[ROW_NUM][COL_NUM]={{'7','8','9','/'},
										 {'4','5','6','*'},
										 {'1','2','3','-'},
										 {'C','0','=','+'}};
    1a90:	ce 01       	movw	r24, r28
    1a92:	05 96       	adiw	r24, 0x05	; 5
    1a94:	9f 8b       	std	Y+23, r25	; 0x17
    1a96:	8e 8b       	std	Y+22, r24	; 0x16
    1a98:	ec e2       	ldi	r30, 0x2C	; 44
    1a9a:	f2 e0       	ldi	r31, 0x02	; 2
    1a9c:	f9 8f       	std	Y+25, r31	; 0x19
    1a9e:	e8 8f       	std	Y+24, r30	; 0x18
    1aa0:	f0 e1       	ldi	r31, 0x10	; 16
    1aa2:	fa 8f       	std	Y+26, r31	; 0x1a
    1aa4:	e8 8d       	ldd	r30, Y+24	; 0x18
    1aa6:	f9 8d       	ldd	r31, Y+25	; 0x19
    1aa8:	00 80       	ld	r0, Z
    1aaa:	88 8d       	ldd	r24, Y+24	; 0x18
    1aac:	99 8d       	ldd	r25, Y+25	; 0x19
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	99 8f       	std	Y+25, r25	; 0x19
    1ab2:	88 8f       	std	Y+24, r24	; 0x18
    1ab4:	ee 89       	ldd	r30, Y+22	; 0x16
    1ab6:	ff 89       	ldd	r31, Y+23	; 0x17
    1ab8:	00 82       	st	Z, r0
    1aba:	8e 89       	ldd	r24, Y+22	; 0x16
    1abc:	9f 89       	ldd	r25, Y+23	; 0x17
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	9f 8b       	std	Y+23, r25	; 0x17
    1ac2:	8e 8b       	std	Y+22, r24	; 0x16
    1ac4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ac6:	91 50       	subi	r25, 0x01	; 1
    1ac8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aca:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1acc:	ee 23       	and	r30, r30
    1ace:	51 f7       	brne	.-44     	; 0x1aa4 <get_button_pressed+0x34>

	for(column=4;column<8;column++)
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	4b c0       	rjmp	.+150    	; 0x1b6c <get_button_pressed+0xfc>
	{
		DIO_setPinVAlue(KEYPAD_PORT,column,OUTPUT_LOW);
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	6a 81       	ldd	r22, Y+2	; 0x02
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
		for(row=0;row<4;row++)
    1ae0:	1b 82       	std	Y+3, r1	; 0x03
    1ae2:	39 c0       	rjmp	.+114    	; 0x1b56 <get_button_pressed+0xe6>
		{
			DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
    1ae4:	9e 01       	movw	r18, r28
    1ae6:	2c 5f       	subi	r18, 0xFC	; 252
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	6b 81       	ldd	r22, Y+3	; 0x03
    1aee:	a9 01       	movw	r20, r18
    1af0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <DIO_GetPinValue>
			if(buttonStatus==LOW)
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	88 23       	and	r24, r24
    1af8:	59 f5       	brne	.+86     	; 0x1b50 <get_button_pressed+0xe0>
    1afa:	08 c0       	rjmp	.+16     	; 0x1b0c <get_button_pressed+0x9c>
			{
				while(buttonStatus==LOW)
				{
					DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
    1afc:	9e 01       	movw	r18, r28
    1afe:	2c 5f       	subi	r18, 0xFC	; 252
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	6b 81       	ldd	r22, Y+3	; 0x03
    1b06:	a9 01       	movw	r20, r18
    1b08:	0e 94 c9 0b 	call	0x1792	; 0x1792 <DIO_GetPinValue>
		for(row=0;row<4;row++)
		{
			DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
			if(buttonStatus==LOW)
			{
				while(buttonStatus==LOW)
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	88 23       	and	r24, r24
    1b10:	a9 f3       	breq	.-22     	; 0x1afc <get_button_pressed+0x8c>
				{
					DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
				}
				DIO_setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	6a 81       	ldd	r22, Y+2	; 0x02
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
				buttonPressed= buttonArray[row][column-4];
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	ac 01       	movw	r20, r24
    1b2a:	44 50       	subi	r20, 0x04	; 4
    1b2c:	50 40       	sbci	r21, 0x00	; 0
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	22 0f       	add	r18, r18
    1b34:	33 1f       	adc	r19, r19
    1b36:	ce 01       	movw	r24, r28
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	84 0f       	add	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	fc 01       	movw	r30, r24
    1b44:	34 96       	adiw	r30, 0x04	; 4
    1b46:	80 81       	ld	r24, Z
    1b48:	89 83       	std	Y+1, r24	; 0x01
				return buttonPressed;
    1b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b4c:	fd 8b       	std	Y+21, r31	; 0x15
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <get_button_pressed+0x108>
										 {'C','0','=','+'}};

	for(column=4;column<8;column++)
	{
		DIO_setPinVAlue(KEYPAD_PORT,column,OUTPUT_LOW);
		for(row=0;row<4;row++)
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	20 f2       	brcs	.-120    	; 0x1ae4 <get_button_pressed+0x74>
				DIO_setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
				buttonPressed= buttonArray[row][column-4];
				return buttonPressed;
			}
		}
		DIO_setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
	uint8 buttonArray[ROW_NUM][COL_NUM]={{'7','8','9','/'},
										 {'4','5','6','*'},
										 {'1','2','3','-'},
										 {'C','0','=','+'}};

	for(column=4;column<8;column++)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	08 f4       	brcc	.+2      	; 0x1b74 <get_button_pressed+0x104>
    1b72:	b1 cf       	rjmp	.-158    	; 0x1ad6 <get_button_pressed+0x66>
			}
		}
		DIO_setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
	}

	return buttonPressed;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	8d 8b       	std	Y+21, r24	; 0x15
    1b78:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1b7a:	6a 96       	adiw	r28, 0x1a	; 26
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <LCD_init>:
#define MODE MODE_8BITS // <-- Enter choice : ( MODE_4BITS or MODE_8BITS)

#if(MODE==MODE_8BITS)

void LCD_init(void)
{
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	c6 54       	subi	r28, 0x46	; 70
    1b9a:	d0 40       	sbci	r29, 0x00	; 0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ed 5b       	subi	r30, 0xBD	; 189
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 ea       	ldi	r26, 0xA0	; 160
    1bb2:	b1 e4       	ldi	r27, 0x41	; 65
    1bb4:	80 83       	st	Z, r24
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	a2 83       	std	Z+2, r26	; 0x02
    1bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	8e 01       	movw	r16, r28
    1bbe:	01 5c       	subi	r16, 0xC1	; 193
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ed 5b       	subi	r30, 0xBD	; 189
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a e7       	ldi	r20, 0x7A	; 122
    1bd6:	55 e4       	ldi	r21, 0x45	; 69
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	f8 01       	movw	r30, r16
    1be2:	80 83       	st	Z, r24
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	a2 83       	std	Z+2, r26	; 0x02
    1be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bea:	fe 01       	movw	r30, r28
    1bec:	ff 96       	adiw	r30, 0x3f	; 63
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5f e3       	ldi	r21, 0x3F	; 63
    1bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <LCD_init+0x84>
		__ticks = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9e af       	std	Y+62, r25	; 0x3e
    1c0c:	8d af       	std	Y+61, r24	; 0x3d
    1c0e:	46 c0       	rjmp	.+140    	; 0x1c9c <LCD_init+0x110>
	else if (__tmp > 65535)
    1c10:	fe 01       	movw	r30, r28
    1c12:	ff 96       	adiw	r30, 0x3f	; 63
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	64 f5       	brge	.+88     	; 0x1c84 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ed 5b       	subi	r30, 0xBD	; 189
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9e af       	std	Y+62, r25	; 0x3e
    1c58:	8d af       	std	Y+61, r24	; 0x3d
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <LCD_init+0xee>
    1c5c:	80 e9       	ldi	r24, 0x90	; 144
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	9c af       	std	Y+60, r25	; 0x3c
    1c62:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c64:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c66:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_init+0xdc>
    1c6c:	9c af       	std	Y+60, r25	; 0x3c
    1c6e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9e af       	std	Y+62, r25	; 0x3e
    1c78:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <LCD_init+0xd0>
    1c82:	16 c0       	rjmp	.+44     	; 0x1cb0 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	fe 01       	movw	r30, r28
    1c86:	ff 96       	adiw	r30, 0x3f	; 63
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9e af       	std	Y+62, r25	; 0x3e
    1c9a:	8d af       	std	Y+61, r24	; 0x3d
    1c9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca0:	9a af       	std	Y+58, r25	; 0x3a
    1ca2:	89 af       	std	Y+57, r24	; 0x39
    1ca4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_init+0x11c>
    1cac:	9a af       	std	Y+58, r25	; 0x3a
    1cae:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_cmd(0x38); //Function set
    1cb0:	88 e3       	ldi	r24, 0x38	; 56
    1cb2:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	8d ab       	std	Y+53, r24	; 0x35
    1cc0:	9e ab       	std	Y+54, r25	; 0x36
    1cc2:	af ab       	std	Y+55, r26	; 0x37
    1cc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cca:	8f a9       	ldd	r24, Y+55	; 0x37
    1ccc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	55 e4       	ldi	r21, 0x45	; 69
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	89 ab       	std	Y+49, r24	; 0x31
    1ce0:	9a ab       	std	Y+50, r25	; 0x32
    1ce2:	ab ab       	std	Y+51, r26	; 0x33
    1ce4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ce6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cea:	8b a9       	ldd	r24, Y+51	; 0x33
    1cec:	9c a9       	ldd	r25, Y+52	; 0x34
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_init+0x17c>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	98 ab       	std	Y+48, r25	; 0x30
    1d04:	8f a7       	std	Y+47, r24	; 0x2f
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_init+0x1fa>
	else if (__tmp > 65535)
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	6d a9       	ldd	r22, Y+53	; 0x35
    1d22:	7e a9       	ldd	r23, Y+54	; 0x36
    1d24:	8f a9       	ldd	r24, Y+55	; 0x37
    1d26:	98 ad       	ldd	r25, Y+56	; 0x38
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	98 ab       	std	Y+48, r25	; 0x30
    1d46:	8f a7       	std	Y+47, r24	; 0x2f
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_init+0x1dc>
    1d4a:	80 e9       	ldi	r24, 0x90	; 144
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	9e a7       	std	Y+46, r25	; 0x2e
    1d50:	8d a7       	std	Y+45, r24	; 0x2d
    1d52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_init+0x1ca>
    1d5a:	9e a7       	std	Y+46, r25	; 0x2e
    1d5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	98 ab       	std	Y+48, r25	; 0x30
    1d66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_init+0x1be>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	98 ab       	std	Y+48, r25	; 0x30
    1d84:	8f a7       	std	Y+47, r24	; 0x2f
    1d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d88:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8a:	9c a7       	std	Y+44, r25	; 0x2c
    1d8c:	8b a7       	std	Y+43, r24	; 0x2b
    1d8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_init+0x206>
    1d96:	9c a7       	std	Y+44, r25	; 0x2c
    1d98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_cmd(0x0c);//Display on/off control
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8f a3       	std	Y+39, r24	; 0x27
    1daa:	98 a7       	std	Y+40, r25	; 0x28
    1dac:	a9 a7       	std	Y+41, r26	; 0x29
    1dae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6f a1       	ldd	r22, Y+39	; 0x27
    1db2:	78 a5       	ldd	r23, Y+40	; 0x28
    1db4:	89 a5       	ldd	r24, Y+41	; 0x29
    1db6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	55 e4       	ldi	r21, 0x45	; 69
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8b a3       	std	Y+35, r24	; 0x23
    1dca:	9c a3       	std	Y+36, r25	; 0x24
    1dcc:	ad a3       	std	Y+37, r26	; 0x25
    1dce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_init+0x266>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9a a3       	std	Y+34, r25	; 0x22
    1dee:	89 a3       	std	Y+33, r24	; 0x21
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_init+0x2e4>
	else if (__tmp > 65535)
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_init+0x2c6>
    1e34:	80 e9       	ldi	r24, 0x90	; 144
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	98 a3       	std	Y+32, r25	; 0x20
    1e3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_init+0x2b4>
    1e44:	98 a3       	std	Y+32, r25	; 0x20
    1e46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a a3       	std	Y+34, r25	; 0x22
    1e50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 a1       	ldd	r24, Y+33	; 0x21
    1e54:	9a a1       	ldd	r25, Y+34	; 0x22
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_init+0x2a8>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e60:	8d a1       	ldd	r24, Y+37	; 0x25
    1e62:	9e a1       	ldd	r25, Y+38	; 0x26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a a3       	std	Y+34, r25	; 0x22
    1e6e:	89 a3       	std	Y+33, r24	; 0x21
    1e70:	89 a1       	ldd	r24, Y+33	; 0x21
    1e72:	9a a1       	ldd	r25, Y+34	; 0x22
    1e74:	9e 8f       	std	Y+30, r25	; 0x1e
    1e76:	8d 8f       	std	Y+29, r24	; 0x1d
    1e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_init+0x2f0>
    1e80:	9e 8f       	std	Y+30, r25	; 0x1e
    1e82:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_cmd(0x01);// Display clear
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>
    1e8a:	8a e0       	ldi	r24, 0x0A	; 10
    1e8c:	97 ed       	ldi	r25, 0xD7	; 215
    1e8e:	a3 ec       	ldi	r26, 0xC3	; 195
    1e90:	bf e3       	ldi	r27, 0x3F	; 63
    1e92:	89 8f       	std	Y+25, r24	; 0x19
    1e94:	9a 8f       	std	Y+26, r25	; 0x1a
    1e96:	ab 8f       	std	Y+27, r26	; 0x1b
    1e98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a e7       	ldi	r20, 0x7A	; 122
    1ea8:	55 e4       	ldi	r21, 0x45	; 69
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	8d 8b       	std	Y+21, r24	; 0x15
    1eb4:	9e 8b       	std	Y+22, r25	; 0x16
    1eb6:	af 8b       	std	Y+23, r26	; 0x17
    1eb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eba:	6d 89       	ldd	r22, Y+21	; 0x15
    1ebc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <LCD_init+0x350>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	8b 8b       	std	Y+19, r24	; 0x13
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <LCD_init+0x3ce>
	else if (__tmp > 65535)
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	4c f5       	brge	.+82     	; 0x1f46 <LCD_init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	0f c0       	rjmp	.+30     	; 0x1f3c <LCD_init+0x3b0>
    1f1e:	80 e9       	ldi	r24, 0x90	; 144
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	9a 8b       	std	Y+18, r25	; 0x12
    1f24:	89 8b       	std	Y+17, r24	; 0x11
    1f26:	89 89       	ldd	r24, Y+17	; 0x11
    1f28:	9a 89       	ldd	r25, Y+18	; 0x12
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_init+0x39e>
    1f2e:	9a 8b       	std	Y+18, r25	; 0x12
    1f30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	69 f7       	brne	.-38     	; 0x1f1e <LCD_init+0x392>
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <LCD_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9c 8b       	std	Y+20, r25	; 0x14
    1f58:	8b 8b       	std	Y+19, r24	; 0x13
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	98 8b       	std	Y+16, r25	; 0x10
    1f60:	8f 87       	std	Y+15, r24	; 0x0f
    1f62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f64:	98 89       	ldd	r25, Y+16	; 0x10
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_init+0x3da>
    1f6a:	98 8b       	std	Y+16, r25	; 0x10
    1f6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1.53);
	LCD_cmd(0x06); //Entry mode set   06
    1f6e:	86 e0       	ldi	r24, 0x06	; 6
    1f70:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e8       	ldi	r26, 0x80	; 128
    1f7a:	bf e3       	ldi	r27, 0x3F	; 63
    1f7c:	8b 87       	std	Y+11, r24	; 0x0b
    1f7e:	9c 87       	std	Y+12, r25	; 0x0c
    1f80:	ad 87       	std	Y+13, r26	; 0x0d
    1f82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a e7       	ldi	r20, 0x7A	; 122
    1f92:	55 e4       	ldi	r21, 0x45	; 69
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8f 83       	std	Y+7, r24	; 0x07
    1f9e:	98 87       	std	Y+8, r25	; 0x08
    1fa0:	a9 87       	std	Y+9, r26	; 0x09
    1fa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa6:	78 85       	ldd	r23, Y+8	; 0x08
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <LCD_init+0x43a>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <LCD_init+0x4b8>
	else if (__tmp > 65535)
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <LCD_init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <LCD_init+0x49a>
    2008:	80 e9       	ldi	r24, 0x90	; 144
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_init+0x488>
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <LCD_init+0x47c>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <LCD_init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_init+0x4c4>
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2058:	ca 5b       	subi	r28, 0xBA	; 186
    205a:	df 4f       	sbci	r29, 0xFF	; 255
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	08 95       	ret

00002070 <LCD_cmd>:


void LCD_cmd(uint8 cmd)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	2f 97       	sbiw	r28, 0x0f	; 15
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DATA =cmd; //Data lines are set to send command - PORTB=LCD_DATA
    2086:	e8 e3       	ldi	r30, 0x38	; 56
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	80 83       	st	Z, r24
	DIO_setPinVAlue(LCD_CONTROL,RS,OUTPUT_LOW); //RS =0 to send instruction code
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	67 e0       	ldi	r22, 0x07	; 7
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
	DIO_setPinVAlue(LCD_CONTROL,RW,OUTPUT_LOW); //RW =0 to write
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	66 e0       	ldi	r22, 0x06	; 6
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
	// to write data, EN needs negative edge
	DIO_setPinVAlue(LCD_CONTROL,EN,OUTPUT_HIGH);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	65 e0       	ldi	r22, 0x05	; 5
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e4       	ldi	r27, 0x40	; 64
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	55 e4       	ldi	r21, 0x45	; 69
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_cmd+0x8e>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_cmd+0x10c>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_cmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_cmd+0xee>
    2140:	80 e9       	ldi	r24, 0x90	; 144
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_cmd+0xdc>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_cmd+0xd0>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_cmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_cmd+0x118>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	65 e0       	ldi	r22, 0x05	; 5
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
}
    219a:	2f 96       	adiw	r28, 0x0f	; 15
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <LCD_Write_data>:

void LCD_Write_data(uint8 data)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	2f 97       	sbiw	r28, 0x0f	; 15
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DATA =data; //data lines are set to send data - PORTB=LCD_DATA
    21c2:	e8 e3       	ldi	r30, 0x38	; 56
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	80 83       	st	Z, r24
	DIO_setPinVAlue(LCD_CONTROL,RS,OUTPUT_HIGH); //RS =1 to display data
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	67 e0       	ldi	r22, 0x07	; 7
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
	DIO_setPinVAlue(LCD_CONTROL,RW,OUTPUT_LOW); //RW =0 to write
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	66 e0       	ldi	r22, 0x06	; 6
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
	// to write data, EN needs negative edge
	DIO_setPinVAlue(LCD_CONTROL,EN,OUTPUT_HIGH);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	65 e0       	ldi	r22, 0x05	; 5
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e4       	ldi	r27, 0x40	; 64
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a e7       	ldi	r20, 0x7A	; 122
    2206:	55 e4       	ldi	r21, 0x45	; 69
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <LCD_Write_data+0x8e>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <LCD_Write_data+0x10c>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <LCD_Write_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <LCD_Write_data+0xee>
    227c:	80 e9       	ldi	r24, 0x90	; 144
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_Write_data+0xdc>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <LCD_Write_data+0xd0>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <LCD_Write_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_Write_data+0x118>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	65 e0       	ldi	r22, 0x05	; 5
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
}
    22d6:	2f 96       	adiw	r28, 0x0f	; 15
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_GoToXY>:
	DIO_setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
}
#endif

void LCD_GoToXY(uint8 copy_xPosition, uint8 copy_yPosition)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <LCD_GoToXY+0x6>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_xPosition==FirstLine)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	88 23       	and	r24, r24
    22fa:	29 f4       	brne	.+10     	; 0x2306 <LCD_GoToXY+0x1e>
	{
		LCD_cmd(0x80 + copy_yPosition);
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	80 58       	subi	r24, 0x80	; 128
    2300:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <LCD_GoToXY+0x2c>
	}
	else if(copy_xPosition==SecondLine)
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	21 f4       	brne	.+8      	; 0x2314 <LCD_GoToXY+0x2c>
	{
		LCD_cmd(0xc0 + copy_yPosition);
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	80 54       	subi	r24, 0x40	; 64
    2310:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>

	}
	else{}
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <LCD_SendString>:
void LCD_SendString(const char *copy_string)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <LCD_SendString+0x6>
    2324:	0f 92       	push	r0
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	9b 83       	std	Y+3, r25	; 0x03
    232c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_iterator=0;
    232e:	19 82       	std	Y+1, r1	; 0x01
    2330:	27 c0       	rjmp	.+78     	; 0x2380 <LCD_SendString+0x62>
		while(copy_string[local_iterator]!='\0')
		{
			if(local_iterator<16)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	80 31       	cpi	r24, 0x10	; 16
    2336:	78 f4       	brcc	.+30     	; 0x2356 <LCD_SendString+0x38>
			{
				LCD_Write_data(copy_string[local_iterator]);
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	fc 01       	movw	r30, r24
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	80 81       	ld	r24, Z
    234a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
				local_iterator++;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	15 c0       	rjmp	.+42     	; 0x2380 <LCD_SendString+0x62>
			}
			else{
				LCD_GoToXY(SecondLine,local_iterator-16);
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	98 2f       	mov	r25, r24
    235a:	90 51       	subi	r25, 0x10	; 16
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	69 2f       	mov	r22, r25
    2360:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
				LCD_Write_data(copy_string[local_iterator]);
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	80 81       	ld	r24, Z
    2376:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
				local_iterator++;
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	89 83       	std	Y+1, r24	; 0x01
	else{}
}
void LCD_SendString(const char *copy_string)
{
	uint8 local_iterator=0;
		while(copy_string[local_iterator]!='\0')
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	fc 01       	movw	r30, r24
    238c:	e2 0f       	add	r30, r18
    238e:	f3 1f       	adc	r31, r19
    2390:	80 81       	ld	r24, Z
    2392:	88 23       	and	r24, r24
    2394:	71 f6       	brne	.-100    	; 0x2332 <LCD_SendString+0x14>
				LCD_GoToXY(SecondLine,local_iterator-16);
				LCD_Write_data(copy_string[local_iterator]);
				local_iterator++;
			}
		}
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	LCD_cmd(0x01);// Display clear
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	0e 94 38 10 	call	0x2070	; 0x2070 <LCD_cmd>

}
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <LCD_uint8_WriteNumber>:
void LCD_uint8_WriteNumber(uint8 copy_number)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	ab 97       	sbiw	r28, 0x2b	; 43
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	8b a7       	std	Y+43, r24	; 0x2b
	if(copy_number<10)
    23cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ce:	8a 30       	cpi	r24, 0x0A	; 10
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <LCD_uint8_WriteNumber+0x1e>
    23d2:	77 c0       	rjmp	.+238    	; 0x24c2 <LCD_uint8_WriteNumber+0x10c>
	{
		LCD_Write_data(copy_number+'0');
    23d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d6:	80 5d       	subi	r24, 0xD0	; 208
    23d8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	aa e7       	ldi	r26, 0x7A	; 122
    23e2:	b4 e4       	ldi	r27, 0x44	; 68
    23e4:	8f a3       	std	Y+39, r24	; 0x27
    23e6:	98 a7       	std	Y+40, r25	; 0x28
    23e8:	a9 a7       	std	Y+41, r26	; 0x29
    23ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6f a1       	ldd	r22, Y+39	; 0x27
    23ee:	78 a5       	ldd	r23, Y+40	; 0x28
    23f0:	89 a5       	ldd	r24, Y+41	; 0x29
    23f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a e7       	ldi	r20, 0x7A	; 122
    23fa:	55 e4       	ldi	r21, 0x45	; 69
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8b a3       	std	Y+35, r24	; 0x23
    2406:	9c a3       	std	Y+36, r25	; 0x24
    2408:	ad a3       	std	Y+37, r26	; 0x25
    240a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    240c:	6b a1       	ldd	r22, Y+35	; 0x23
    240e:	7c a1       	ldd	r23, Y+36	; 0x24
    2410:	8d a1       	ldd	r24, Y+37	; 0x25
    2412:	9e a1       	ldd	r25, Y+38	; 0x26
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <LCD_uint8_WriteNumber+0x78>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9a a3       	std	Y+34, r25	; 0x22
    242a:	89 a3       	std	Y+33, r24	; 0x21
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <LCD_uint8_WriteNumber+0xf6>
	else if (__tmp > 65535)
    242e:	6b a1       	ldd	r22, Y+35	; 0x23
    2430:	7c a1       	ldd	r23, Y+36	; 0x24
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	9e a1       	ldd	r25, Y+38	; 0x26
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <LCD_uint8_WriteNumber+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6f a1       	ldd	r22, Y+39	; 0x27
    2448:	78 a5       	ldd	r23, Y+40	; 0x28
    244a:	89 a5       	ldd	r24, Y+41	; 0x29
    244c:	9a a5       	ldd	r25, Y+42	; 0x2a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9a a3       	std	Y+34, r25	; 0x22
    246c:	89 a3       	std	Y+33, r24	; 0x21
    246e:	0f c0       	rjmp	.+30     	; 0x248e <LCD_uint8_WriteNumber+0xd8>
    2470:	80 e9       	ldi	r24, 0x90	; 144
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	98 a3       	std	Y+32, r25	; 0x20
    2476:	8f 8f       	std	Y+31, r24	; 0x1f
    2478:	8f 8d       	ldd	r24, Y+31	; 0x1f
    247a:	98 a1       	ldd	r25, Y+32	; 0x20
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_uint8_WriteNumber+0xc6>
    2480:	98 a3       	std	Y+32, r25	; 0x20
    2482:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	89 a1       	ldd	r24, Y+33	; 0x21
    2486:	9a a1       	ldd	r25, Y+34	; 0x22
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9a a3       	std	Y+34, r25	; 0x22
    248c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <LCD_uint8_WriteNumber+0xba>
    2496:	2d c1       	rjmp	.+602    	; 0x26f2 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6b a1       	ldd	r22, Y+35	; 0x23
    249a:	7c a1       	ldd	r23, Y+36	; 0x24
    249c:	8d a1       	ldd	r24, Y+37	; 0x25
    249e:	9e a1       	ldd	r25, Y+38	; 0x26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9a a3       	std	Y+34, r25	; 0x22
    24aa:	89 a3       	std	Y+33, r24	; 0x21
    24ac:	89 a1       	ldd	r24, Y+33	; 0x21
    24ae:	9a a1       	ldd	r25, Y+34	; 0x22
    24b0:	9e 8f       	std	Y+30, r25	; 0x1e
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_uint8_WriteNumber+0x102>
    24bc:	9e 8f       	std	Y+30, r25	; 0x1e
    24be:	8d 8f       	std	Y+29, r24	; 0x1d
    24c0:	18 c1       	rjmp	.+560    	; 0x26f2 <LCD_uint8_WriteNumber+0x33c>
		_delay_ms(1000);
	}
	else if(copy_number<100)
    24c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c4:	84 36       	cpi	r24, 0x64	; 100
    24c6:	08 f0       	brcs	.+2      	; 0x24ca <LCD_uint8_WriteNumber+0x114>
    24c8:	84 c0       	rjmp	.+264    	; 0x25d2 <LCD_uint8_WriteNumber+0x21c>
	{
		LCD_Write_data(copy_number/10+'0');
    24ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    24cc:	9a e0       	ldi	r25, 0x0A	; 10
    24ce:	69 2f       	mov	r22, r25
    24d0:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__udivmodqi4>
    24d4:	80 5d       	subi	r24, 0xD0	; 208
    24d6:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
		LCD_Write_data(copy_number%10+'0');
    24da:	8b a5       	ldd	r24, Y+43	; 0x2b
    24dc:	9a e0       	ldi	r25, 0x0A	; 10
    24de:	69 2f       	mov	r22, r25
    24e0:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__udivmodqi4>
    24e4:	89 2f       	mov	r24, r25
    24e6:	80 5d       	subi	r24, 0xD0	; 208
    24e8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	aa e7       	ldi	r26, 0x7A	; 122
    24f2:	b4 e4       	ldi	r27, 0x44	; 68
    24f4:	89 8f       	std	Y+25, r24	; 0x19
    24f6:	9a 8f       	std	Y+26, r25	; 0x1a
    24f8:	ab 8f       	std	Y+27, r26	; 0x1b
    24fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	69 8d       	ldd	r22, Y+25	; 0x19
    24fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a e7       	ldi	r20, 0x7A	; 122
    250a:	55 e4       	ldi	r21, 0x45	; 69
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8d 8b       	std	Y+21, r24	; 0x15
    2516:	9e 8b       	std	Y+22, r25	; 0x16
    2518:	af 8b       	std	Y+23, r26	; 0x17
    251a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    251c:	6d 89       	ldd	r22, Y+21	; 0x15
    251e:	7e 89       	ldd	r23, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <LCD_uint8_WriteNumber+0x188>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <LCD_uint8_WriteNumber+0x206>
	else if (__tmp > 65535)
    253e:	6d 89       	ldd	r22, Y+21	; 0x15
    2540:	7e 89       	ldd	r23, Y+22	; 0x16
    2542:	8f 89       	ldd	r24, Y+23	; 0x17
    2544:	98 8d       	ldd	r25, Y+24	; 0x18
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <LCD_uint8_WriteNumber+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	69 8d       	ldd	r22, Y+25	; 0x19
    2558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9c 8b       	std	Y+20, r25	; 0x14
    257c:	8b 8b       	std	Y+19, r24	; 0x13
    257e:	0f c0       	rjmp	.+30     	; 0x259e <LCD_uint8_WriteNumber+0x1e8>
    2580:	80 e9       	ldi	r24, 0x90	; 144
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	9a 8b       	std	Y+18, r25	; 0x12
    2586:	89 8b       	std	Y+17, r24	; 0x11
    2588:	89 89       	ldd	r24, Y+17	; 0x11
    258a:	9a 89       	ldd	r25, Y+18	; 0x12
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_uint8_WriteNumber+0x1d6>
    2590:	9a 8b       	std	Y+18, r25	; 0x12
    2592:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	9c 8b       	std	Y+20, r25	; 0x14
    259c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	8b 89       	ldd	r24, Y+19	; 0x13
    25a0:	9c 89       	ldd	r25, Y+20	; 0x14
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <LCD_uint8_WriteNumber+0x1ca>
    25a6:	a5 c0       	rjmp	.+330    	; 0x26f2 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	6d 89       	ldd	r22, Y+21	; 0x15
    25aa:	7e 89       	ldd	r23, Y+22	; 0x16
    25ac:	8f 89       	ldd	r24, Y+23	; 0x17
    25ae:	98 8d       	ldd	r25, Y+24	; 0x18
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9c 8b       	std	Y+20, r25	; 0x14
    25ba:	8b 8b       	std	Y+19, r24	; 0x13
    25bc:	8b 89       	ldd	r24, Y+19	; 0x13
    25be:	9c 89       	ldd	r25, Y+20	; 0x14
    25c0:	98 8b       	std	Y+16, r25	; 0x10
    25c2:	8f 87       	std	Y+15, r24	; 0x0f
    25c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c6:	98 89       	ldd	r25, Y+16	; 0x10
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_uint8_WriteNumber+0x212>
    25cc:	98 8b       	std	Y+16, r25	; 0x10
    25ce:	8f 87       	std	Y+15, r24	; 0x0f
    25d0:	90 c0       	rjmp	.+288    	; 0x26f2 <LCD_uint8_WriteNumber+0x33c>
		_delay_ms(1000);
	}
	else if (copy_number<1000)
	{
		LCD_Write_data(copy_number/100+'0');
    25d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d4:	94 e6       	ldi	r25, 0x64	; 100
    25d6:	69 2f       	mov	r22, r25
    25d8:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__udivmodqi4>
    25dc:	80 5d       	subi	r24, 0xD0	; 208
    25de:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
		LCD_Write_data((copy_number%100)/10+'0');
    25e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e4:	94 e6       	ldi	r25, 0x64	; 100
    25e6:	69 2f       	mov	r22, r25
    25e8:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__udivmodqi4>
    25ec:	89 2f       	mov	r24, r25
    25ee:	9a e0       	ldi	r25, 0x0A	; 10
    25f0:	69 2f       	mov	r22, r25
    25f2:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__udivmodqi4>
    25f6:	80 5d       	subi	r24, 0xD0	; 208
    25f8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
		LCD_Write_data(copy_number%10+'0');
    25fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25fe:	9a e0       	ldi	r25, 0x0A	; 10
    2600:	69 2f       	mov	r22, r25
    2602:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__udivmodqi4>
    2606:	89 2f       	mov	r24, r25
    2608:	80 5d       	subi	r24, 0xD0	; 208
    260a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	aa e7       	ldi	r26, 0x7A	; 122
    2614:	b4 e4       	ldi	r27, 0x44	; 68
    2616:	8b 87       	std	Y+11, r24	; 0x0b
    2618:	9c 87       	std	Y+12, r25	; 0x0c
    261a:	ad 87       	std	Y+13, r26	; 0x0d
    261c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2620:	7c 85       	ldd	r23, Y+12	; 0x0c
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a e7       	ldi	r20, 0x7A	; 122
    262c:	55 e4       	ldi	r21, 0x45	; 69
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8f 83       	std	Y+7, r24	; 0x07
    2638:	98 87       	std	Y+8, r25	; 0x08
    263a:	a9 87       	std	Y+9, r26	; 0x09
    263c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	2c f4       	brge	.+10     	; 0x2660 <LCD_uint8_WriteNumber+0x2aa>
		__ticks = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	3f c0       	rjmp	.+126    	; 0x26de <LCD_uint8_WriteNumber+0x328>
	else if (__tmp > 65535)
    2660:	6f 81       	ldd	r22, Y+7	; 0x07
    2662:	78 85       	ldd	r23, Y+8	; 0x08
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	4c f5       	brge	.+82     	; 0x26ca <LCD_uint8_WriteNumber+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	6b 85       	ldd	r22, Y+11	; 0x0b
    267a:	7c 85       	ldd	r23, Y+12	; 0x0c
    267c:	8d 85       	ldd	r24, Y+13	; 0x0d
    267e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	0f c0       	rjmp	.+30     	; 0x26c0 <LCD_uint8_WriteNumber+0x30a>
    26a2:	80 e9       	ldi	r24, 0x90	; 144
    26a4:	91 e0       	ldi	r25, 0x01	; 1
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_uint8_WriteNumber+0x2f8>
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <LCD_uint8_WriteNumber+0x2ec>
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ca:	6f 81       	ldd	r22, Y+7	; 0x07
    26cc:	78 85       	ldd	r23, Y+8	; 0x08
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_uint8_WriteNumber+0x334>
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
	else{}
}
    26f2:	ab 96       	adiw	r28, 0x2b	; 43
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <Timer0_Normal>:
static float32 OV_Counts_Timer0=0;
static float32 OV_Counts_Timer1=0;


void Timer0_Normal(void)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(TCCR0,TCCR0_FOC0);
    270c:	a3 e5       	ldi	r26, 0x53	; 83
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e3 e5       	ldi	r30, 0x53	; 83
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	8f 77       	andi	r24, 0x7F	; 127
    2718:	8c 93       	st	X, r24
	/*Mode of operation : Normal*/
	CLEARBIT(TCCR0,TCCR0_WGM00);
    271a:	a3 e5       	ldi	r26, 0x53	; 83
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e5       	ldi	r30, 0x53	; 83
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7b       	andi	r24, 0xBF	; 191
    2726:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_WGM01);
    2728:	a3 e5       	ldi	r26, 0x53	; 83
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e3 e5       	ldi	r30, 0x53	; 83
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	87 7f       	andi	r24, 0xF7	; 247
    2734:	8c 93       	st	X, r24

	/* Output Mode */
	CLEARBIT(TCCR0,TCCR0_COM00);
    2736:	a3 e5       	ldi	r26, 0x53	; 83
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e3 e5       	ldi	r30, 0x53	; 83
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8f 7e       	andi	r24, 0xEF	; 239
    2742:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2744:	a3 e5       	ldi	r26, 0x53	; 83
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e3 e5       	ldi	r30, 0x53	; 83
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	8f 7d       	andi	r24, 0xDF	; 223
    2750:	8c 93       	st	X, r24
	TCCR0 |=OC0_MODE;
    2752:	a3 e5       	ldi	r26, 0x53	; 83
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e3 e5       	ldi	r30, 0x53	; 83
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 61       	ori	r24, 0x10	; 16
    275e:	8c 93       	st	X, r24

	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    2760:	a3 e5       	ldi	r26, 0x53	; 83
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e3 e5       	ldi	r30, 0x53	; 83
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8e 7f       	andi	r24, 0xFE	; 254
    276c:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    276e:	a3 e5       	ldi	r26, 0x53	; 83
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e3 e5       	ldi	r30, 0x53	; 83
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	8d 7f       	andi	r24, 0xFD	; 253
    277a:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    277c:	a3 e5       	ldi	r26, 0x53	; 83
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e3 e5       	ldi	r30, 0x53	; 83
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8b 7f       	andi	r24, 0xFB	; 251
    2788:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    278a:	a3 e5       	ldi	r26, 0x53	; 83
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e3 e5       	ldi	r30, 0x53	; 83
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	82 60       	ori	r24, 0x02	; 2
    2796:	8c 93       	st	X, r24

	/*enable interrupt for Normal mode*/
	SETBIT(TIMSK,TIMSK_TOIE0);
    2798:	a9 e5       	ldi	r26, 0x59	; 89
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e9 e5       	ldi	r30, 0x59	; 89
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	81 60       	ori	r24, 0x01	; 1
    27a4:	8c 93       	st	X, r24
	/*enable global interrupt*/
	SETBIT(SREG,GIE);
    27a6:	af e5       	ldi	r26, 0x5F	; 95
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	ef e5       	ldi	r30, 0x5F	; 95
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	80 68       	ori	r24, 0x80	; 128
    27b2:	8c 93       	st	X, r24
}
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <Timer0_Normal_CallBack>:
uint8 Timer0_Normal_CallBack(void (*Copy_Timer0_Normal_CallBackFun)(void),uint32 copy_time_ms)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	27 97       	sbiw	r28, 0x07	; 7
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	9b 83       	std	Y+3, r25	; 0x03
    27d0:	8a 83       	std	Y+2, r24	; 0x02
    27d2:	4c 83       	std	Y+4, r20	; 0x04
    27d4:	5d 83       	std	Y+5, r21	; 0x05
    27d6:	6e 83       	std	Y+6, r22	; 0x06
    27d8:	7f 83       	std	Y+7, r23	; 0x07
	uint8 localError=1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	89 83       	std	Y+1, r24	; 0x01
static float32 overflow_time=256*256.0/(16000.0); //in ms
#elif CLOCKSELECT ==CLOCK_DIV_BY_1024
static float32 overflow_time =1024.0*256.0/(16000.0); //in ms
#endif

	if(Copy_Timer0_Normal_CallBackFun==NULL)
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	9b 81       	ldd	r25, Y+3	; 0x03
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	11 f4       	brne	.+4      	; 0x27ea <Timer0_Normal_CallBack+0x30>
	{
		localError=0;
    27e6:	19 82       	std	Y+1, r1	; 0x01
    27e8:	24 c0       	rjmp	.+72     	; 0x2832 <Timer0_Normal_CallBack+0x78>
	}
	else
	{
		Timer0_Normal_CallBackFun=Copy_Timer0_Normal_CallBackFun;
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	90 93 44 02 	sts	0x0244, r25
    27f2:	80 93 43 02 	sts	0x0243, r24
		OV_Counts_Timer0=copy_time_ms/overflow_time;
    27f6:	6c 81       	ldd	r22, Y+4	; 0x04
    27f8:	7d 81       	ldd	r23, Y+5	; 0x05
    27fa:	8e 81       	ldd	r24, Y+6	; 0x06
    27fc:	9f 81       	ldd	r25, Y+7	; 0x07
    27fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	20 91 1c 02 	lds	r18, 0x021C
    280a:	30 91 1d 02 	lds	r19, 0x021D
    280e:	40 91 1e 02 	lds	r20, 0x021E
    2812:	50 91 1f 02 	lds	r21, 0x021F
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	80 93 49 02 	sts	0x0249, r24
    2826:	90 93 4a 02 	sts	0x024A, r25
    282a:	a0 93 4b 02 	sts	0x024B, r26
    282e:	b0 93 4c 02 	sts	0x024C, r27
	}
	return localError;
    2832:	89 81       	ldd	r24, Y+1	; 0x01
}
    2834:	27 96       	adiw	r28, 0x07	; 7
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2846:	1f 92       	push	r1
    2848:	0f 92       	push	r0
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	0f 92       	push	r0
    284e:	11 24       	eor	r1, r1
    2850:	2f 93       	push	r18
    2852:	3f 93       	push	r19
    2854:	4f 93       	push	r20
    2856:	5f 93       	push	r21
    2858:	6f 93       	push	r22
    285a:	7f 93       	push	r23
    285c:	8f 93       	push	r24
    285e:	9f 93       	push	r25
    2860:	af 93       	push	r26
    2862:	bf 93       	push	r27
    2864:	ef 93       	push	r30
    2866:	ff 93       	push	r31
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter=0;
	counter++;
    2870:	80 91 51 02 	lds	r24, 0x0251
    2874:	90 91 52 02 	lds	r25, 0x0252
    2878:	a0 91 53 02 	lds	r26, 0x0253
    287c:	b0 91 54 02 	lds	r27, 0x0254
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	a1 1d       	adc	r26, r1
    2884:	b1 1d       	adc	r27, r1
    2886:	80 93 51 02 	sts	0x0251, r24
    288a:	90 93 52 02 	sts	0x0252, r25
    288e:	a0 93 53 02 	sts	0x0253, r26
    2892:	b0 93 54 02 	sts	0x0254, r27
	if(counter>=OV_Counts_Timer0)
    2896:	80 91 51 02 	lds	r24, 0x0251
    289a:	90 91 52 02 	lds	r25, 0x0252
    289e:	a0 91 53 02 	lds	r26, 0x0253
    28a2:	b0 91 54 02 	lds	r27, 0x0254
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	20 91 49 02 	lds	r18, 0x0249
    28b6:	30 91 4a 02 	lds	r19, 0x024A
    28ba:	40 91 4b 02 	lds	r20, 0x024B
    28be:	50 91 4c 02 	lds	r21, 0x024C
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    28ca:	88 23       	and	r24, r24
    28cc:	9c f0       	brlt	.+38     	; 0x28f4 <__vector_11+0xae>
	{
		if(Timer0_Normal_CallBackFun != NULL)
    28ce:	80 91 43 02 	lds	r24, 0x0243
    28d2:	90 91 44 02 	lds	r25, 0x0244
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	29 f0       	breq	.+10     	; 0x28e4 <__vector_11+0x9e>
		{
			Timer0_Normal_CallBackFun();
    28da:	e0 91 43 02 	lds	r30, 0x0243
    28de:	f0 91 44 02 	lds	r31, 0x0244
    28e2:	09 95       	icall
		}
		counter=0;
    28e4:	10 92 51 02 	sts	0x0251, r1
    28e8:	10 92 52 02 	sts	0x0252, r1
    28ec:	10 92 53 02 	sts	0x0253, r1
    28f0:	10 92 54 02 	sts	0x0254, r1
	}

}
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	ff 91       	pop	r31
    28fa:	ef 91       	pop	r30
    28fc:	bf 91       	pop	r27
    28fe:	af 91       	pop	r26
    2900:	9f 91       	pop	r25
    2902:	8f 91       	pop	r24
    2904:	7f 91       	pop	r23
    2906:	6f 91       	pop	r22
    2908:	5f 91       	pop	r21
    290a:	4f 91       	pop	r20
    290c:	3f 91       	pop	r19
    290e:	2f 91       	pop	r18
    2910:	0f 90       	pop	r0
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	0f 90       	pop	r0
    2916:	1f 90       	pop	r1
    2918:	18 95       	reti

0000291a <Timer0_CTC>:

void Timer0_CTC(void)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2922:	a3 e5       	ldi	r26, 0x53	; 83
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	e3 e5       	ldi	r30, 0x53	; 83
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	8f 77       	andi	r24, 0x7F	; 127
    292e:	8c 93       	st	X, r24

	/*Mode of operation : CTC*/
	CLEARBIT(TCCR0,TCCR0_WGM00);
    2930:	a3 e5       	ldi	r26, 0x53	; 83
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e3 e5       	ldi	r30, 0x53	; 83
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	8f 7b       	andi	r24, 0xBF	; 191
    293c:	8c 93       	st	X, r24
	SETBIT(TCCR0,TCCR0_WGM01);
    293e:	a3 e5       	ldi	r26, 0x53	; 83
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e3 e5       	ldi	r30, 0x53	; 83
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	88 60       	ori	r24, 0x08	; 8
    294a:	8c 93       	st	X, r24

	/* Output Mode */
	CLEARBIT(TCCR0,TCCR0_COM00);
    294c:	a3 e5       	ldi	r26, 0x53	; 83
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e3 e5       	ldi	r30, 0x53	; 83
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	8f 7e       	andi	r24, 0xEF	; 239
    2958:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    295a:	a3 e5       	ldi	r26, 0x53	; 83
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e3 e5       	ldi	r30, 0x53	; 83
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	8f 7d       	andi	r24, 0xDF	; 223
    2966:	8c 93       	st	X, r24
	TCCR0 |=OC0_MODE;
    2968:	a3 e5       	ldi	r26, 0x53	; 83
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e3 e5       	ldi	r30, 0x53	; 83
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	80 61       	ori	r24, 0x10	; 16
    2974:	8c 93       	st	X, r24

	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    2976:	a3 e5       	ldi	r26, 0x53	; 83
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e3 e5       	ldi	r30, 0x53	; 83
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	8e 7f       	andi	r24, 0xFE	; 254
    2982:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    2984:	a3 e5       	ldi	r26, 0x53	; 83
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e3 e5       	ldi	r30, 0x53	; 83
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	8d 7f       	andi	r24, 0xFD	; 253
    2990:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    2992:	a3 e5       	ldi	r26, 0x53	; 83
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e3 e5       	ldi	r30, 0x53	; 83
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	8b 7f       	andi	r24, 0xFB	; 251
    299e:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    29a0:	a3 e5       	ldi	r26, 0x53	; 83
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e3 e5       	ldi	r30, 0x53	; 83
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	82 60       	ori	r24, 0x02	; 2
    29ac:	8c 93       	st	X, r24
	/*enable interrupt for CTC mode*/
	SETBIT(TIMSK,TIMSK_OCIE0);
    29ae:	a9 e5       	ldi	r26, 0x59	; 89
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e9 e5       	ldi	r30, 0x59	; 89
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	82 60       	ori	r24, 0x02	; 2
    29ba:	8c 93       	st	X, r24
	/*enable global interrupt*/
	SETBIT(SREG,GIE);
    29bc:	af e5       	ldi	r26, 0x5F	; 95
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	ef e5       	ldi	r30, 0x5F	; 95
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	80 68       	ori	r24, 0x80	; 128
    29c8:	8c 93       	st	X, r24
	/*set compare match value*/
	OCR0 = TIMER0_COMPARE_MATCH_VALUE;
    29ca:	ec e5       	ldi	r30, 0x5C	; 92
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	84 e6       	ldi	r24, 0x64	; 100
    29d0:	80 83       	st	Z, r24

}
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <Timer0_CTC_CallBack>:
uint8 Timer0_CTC_CallBack( void (*Copy_Timer0_CTC_CallBackFun)(void) , uint32 copy_time_ms)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	27 97       	sbiw	r28, 0x07	; 7
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	9b 83       	std	Y+3, r25	; 0x03
    29ee:	8a 83       	std	Y+2, r24	; 0x02
    29f0:	4c 83       	std	Y+4, r20	; 0x04
    29f2:	5d 83       	std	Y+5, r21	; 0x05
    29f4:	6e 83       	std	Y+6, r22	; 0x06
    29f6:	7f 83       	std	Y+7, r23	; 0x07
	uint8 localError=1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	89 83       	std	Y+1, r24	; 0x01
	float32 Overflow_time=256.0*TIMER0_COMPARE_MATCH_VALUE/(16000.0); //in ms
	#elif CLOCKSELECT ==CLOCK_DIV_BY_1024
	float32 Overflow_time =1024.0*TIMER0_COMPARE_MATCH_VALUE/(16000.0); //in ms
	#endif

	if(Copy_Timer0_CTC_CallBackFun==NULL)
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	11 f4       	brne	.+4      	; 0x2a08 <Timer0_CTC_CallBack+0x30>
	{
		localError=0;
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	24 c0       	rjmp	.+72     	; 0x2a50 <Timer0_CTC_CallBack+0x78>
	}
	else
	{
		Timer0_CTC_CallBackFun=Copy_Timer0_CTC_CallBackFun;
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0c:	90 93 42 02 	sts	0x0242, r25
    2a10:	80 93 41 02 	sts	0x0241, r24
		OV_Counts_Timer0=copy_time_ms/Overflow_time;
    2a14:	6c 81       	ldd	r22, Y+4	; 0x04
    2a16:	7d 81       	ldd	r23, Y+5	; 0x05
    2a18:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	20 91 20 02 	lds	r18, 0x0220
    2a28:	30 91 21 02 	lds	r19, 0x0221
    2a2c:	40 91 22 02 	lds	r20, 0x0222
    2a30:	50 91 23 02 	lds	r21, 0x0223
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	80 93 49 02 	sts	0x0249, r24
    2a44:	90 93 4a 02 	sts	0x024A, r25
    2a48:	a0 93 4b 02 	sts	0x024B, r26
    2a4c:	b0 93 4c 02 	sts	0x024C, r27

	}
	return localError;
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a52:	27 96       	adiw	r28, 0x07	; 7
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2a64:	1f 92       	push	r1
    2a66:	0f 92       	push	r0
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	0f 92       	push	r0
    2a6c:	11 24       	eor	r1, r1
    2a6e:	2f 93       	push	r18
    2a70:	3f 93       	push	r19
    2a72:	4f 93       	push	r20
    2a74:	5f 93       	push	r21
    2a76:	6f 93       	push	r22
    2a78:	7f 93       	push	r23
    2a7a:	8f 93       	push	r24
    2a7c:	9f 93       	push	r25
    2a7e:	af 93       	push	r26
    2a80:	bf 93       	push	r27
    2a82:	ef 93       	push	r30
    2a84:	ff 93       	push	r31
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	static uint32 Counter=0;
	Counter++;
    2a8e:	80 91 55 02 	lds	r24, 0x0255
    2a92:	90 91 56 02 	lds	r25, 0x0256
    2a96:	a0 91 57 02 	lds	r26, 0x0257
    2a9a:	b0 91 58 02 	lds	r27, 0x0258
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	a1 1d       	adc	r26, r1
    2aa2:	b1 1d       	adc	r27, r1
    2aa4:	80 93 55 02 	sts	0x0255, r24
    2aa8:	90 93 56 02 	sts	0x0256, r25
    2aac:	a0 93 57 02 	sts	0x0257, r26
    2ab0:	b0 93 58 02 	sts	0x0258, r27
	if(Counter >= OV_Counts_Timer0)
    2ab4:	80 91 55 02 	lds	r24, 0x0255
    2ab8:	90 91 56 02 	lds	r25, 0x0256
    2abc:	a0 91 57 02 	lds	r26, 0x0257
    2ac0:	b0 91 58 02 	lds	r27, 0x0258
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	20 91 49 02 	lds	r18, 0x0249
    2ad4:	30 91 4a 02 	lds	r19, 0x024A
    2ad8:	40 91 4b 02 	lds	r20, 0x024B
    2adc:	50 91 4c 02 	lds	r21, 0x024C
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2ae8:	88 23       	and	r24, r24
    2aea:	9c f0       	brlt	.+38     	; 0x2b12 <__vector_10+0xae>
	{
		if(Timer0_CTC_CallBackFun != NULL)
    2aec:	80 91 41 02 	lds	r24, 0x0241
    2af0:	90 91 42 02 	lds	r25, 0x0242
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	29 f0       	breq	.+10     	; 0x2b02 <__vector_10+0x9e>
		{
			Timer0_CTC_CallBackFun();
    2af8:	e0 91 41 02 	lds	r30, 0x0241
    2afc:	f0 91 42 02 	lds	r31, 0x0242
    2b00:	09 95       	icall
		}
		Counter=0;
    2b02:	10 92 55 02 	sts	0x0255, r1
    2b06:	10 92 56 02 	sts	0x0256, r1
    2b0a:	10 92 57 02 	sts	0x0257, r1
    2b0e:	10 92 58 02 	sts	0x0258, r1
	}

}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	ff 91       	pop	r31
    2b18:	ef 91       	pop	r30
    2b1a:	bf 91       	pop	r27
    2b1c:	af 91       	pop	r26
    2b1e:	9f 91       	pop	r25
    2b20:	8f 91       	pop	r24
    2b22:	7f 91       	pop	r23
    2b24:	6f 91       	pop	r22
    2b26:	5f 91       	pop	r21
    2b28:	4f 91       	pop	r20
    2b2a:	3f 91       	pop	r19
    2b2c:	2f 91       	pop	r18
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	0f 90       	pop	r0
    2b34:	1f 90       	pop	r1
    2b36:	18 95       	reti

00002b38 <Timer0_PWM_Fast>:

void Timer0_PWM_Fast(void)
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2b40:	a3 e5       	ldi	r26, 0x53	; 83
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e3 e5       	ldi	r30, 0x53	; 83
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	8f 77       	andi	r24, 0x7F	; 127
    2b4c:	8c 93       	st	X, r24
	/*Waveform generation MODE : Fast PWM*/
	SETBIT(TCCR0,TCCR0_WGM00);
    2b4e:	a3 e5       	ldi	r26, 0x53	; 83
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e3 e5       	ldi	r30, 0x53	; 83
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	80 64       	ori	r24, 0x40	; 64
    2b5a:	8c 93       	st	X, r24
	SETBIT(TCCR0,TCCR0_WGM01);
    2b5c:	a3 e5       	ldi	r26, 0x53	; 83
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e3 e5       	ldi	r30, 0x53	; 83
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	88 60       	ori	r24, 0x08	; 8
    2b68:	8c 93       	st	X, r24

	/* Output Mode */
	CLEARBIT(TCCR0,TCCR0_COM00);
    2b6a:	a3 e5       	ldi	r26, 0x53	; 83
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e3 e5       	ldi	r30, 0x53	; 83
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	8f 7e       	andi	r24, 0xEF	; 239
    2b76:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2b78:	a3 e5       	ldi	r26, 0x53	; 83
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e3 e5       	ldi	r30, 0x53	; 83
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	8f 7d       	andi	r24, 0xDF	; 223
    2b84:	8c 93       	st	X, r24
	TCCR0 |=OC0_PWM_MODE;
    2b86:	a3 e5       	ldi	r26, 0x53	; 83
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e3 e5       	ldi	r30, 0x53	; 83
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	80 62       	ori	r24, 0x20	; 32
    2b92:	8c 93       	st	X, r24

	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    2b94:	a3 e5       	ldi	r26, 0x53	; 83
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e3 e5       	ldi	r30, 0x53	; 83
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8e 7f       	andi	r24, 0xFE	; 254
    2ba0:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    2ba2:	a3 e5       	ldi	r26, 0x53	; 83
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e3 e5       	ldi	r30, 0x53	; 83
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	8d 7f       	andi	r24, 0xFD	; 253
    2bae:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    2bb0:	a3 e5       	ldi	r26, 0x53	; 83
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e3 e5       	ldi	r30, 0x53	; 83
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	8b 7f       	andi	r24, 0xFB	; 251
    2bbc:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    2bbe:	a3 e5       	ldi	r26, 0x53	; 83
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e3 e5       	ldi	r30, 0x53	; 83
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	82 60       	ori	r24, 0x02	; 2
    2bca:	8c 93       	st	X, r24

	/*set compare match value*/
	OCR0 = TIMER0_COMPARE_MATCH_VALUE;
    2bcc:	ec e5       	ldi	r30, 0x5C	; 92
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	84 e6       	ldi	r24, 0x64	; 100
    2bd2:	80 83       	st	Z, r24

}
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <Timer0_PWM_Phase_Correct>:

void Timer0_PWM_Phase_Correct(void)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
	/*force output compare =0*/
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2be2:	a3 e5       	ldi	r26, 0x53	; 83
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e3 e5       	ldi	r30, 0x53	; 83
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	8f 77       	andi	r24, 0x7F	; 127
    2bee:	8c 93       	st	X, r24
	/*Waveform generation MODE: PWM_Phase_Correct */
	SETBIT(TCCR0,TCCR0_WGM00);
    2bf0:	a3 e5       	ldi	r26, 0x53	; 83
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e3 e5       	ldi	r30, 0x53	; 83
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 64       	ori	r24, 0x40	; 64
    2bfc:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_WGM01);
    2bfe:	a3 e5       	ldi	r26, 0x53	; 83
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e3 e5       	ldi	r30, 0x53	; 83
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	87 7f       	andi	r24, 0xF7	; 247
    2c0a:	8c 93       	st	X, r24
	/*Output Mode*/
	CLEARBIT(TCCR0,TCCR0_COM00);
    2c0c:	a3 e5       	ldi	r26, 0x53	; 83
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e3 e5       	ldi	r30, 0x53	; 83
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	8f 7e       	andi	r24, 0xEF	; 239
    2c18:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2c1a:	a3 e5       	ldi	r26, 0x53	; 83
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e3 e5       	ldi	r30, 0x53	; 83
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	8f 7d       	andi	r24, 0xDF	; 223
    2c26:	8c 93       	st	X, r24
	TCCR0 |= OC0_PWM_MODE;
    2c28:	a3 e5       	ldi	r26, 0x53	; 83
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e3 e5       	ldi	r30, 0x53	; 83
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	80 62       	ori	r24, 0x20	; 32
    2c34:	8c 93       	st	X, r24
	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    2c36:	a3 e5       	ldi	r26, 0x53	; 83
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e3 e5       	ldi	r30, 0x53	; 83
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	8e 7f       	andi	r24, 0xFE	; 254
    2c42:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    2c44:	a3 e5       	ldi	r26, 0x53	; 83
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e3 e5       	ldi	r30, 0x53	; 83
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	8d 7f       	andi	r24, 0xFD	; 253
    2c50:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    2c52:	a3 e5       	ldi	r26, 0x53	; 83
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	e3 e5       	ldi	r30, 0x53	; 83
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	8b 7f       	andi	r24, 0xFB	; 251
    2c5e:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    2c60:	a3 e5       	ldi	r26, 0x53	; 83
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e3 e5       	ldi	r30, 0x53	; 83
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	82 60       	ori	r24, 0x02	; 2
    2c6c:	8c 93       	st	X, r24
	/*set compare match value*/
	OCR0= TIMER0_COMPARE_MATCH_VALUE;
    2c6e:	ec e5       	ldi	r30, 0x5C	; 92
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	84 e6       	ldi	r24, 0x64	; 100
    2c74:	80 83       	st	Z, r24
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <Delay_mS>:
void Delay_mS(uint32 copy_dtime_ms)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	2a 97       	sbiw	r28, 0x0a	; 10
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	6f 83       	std	Y+7, r22	; 0x07
    2c92:	78 87       	std	Y+8, r23	; 0x08
    2c94:	89 87       	std	Y+9, r24	; 0x09
    2c96:	9a 87       	std	Y+10, r25	; 0x0a
	uint32 counter=0;
    2c98:	1b 82       	std	Y+3, r1	; 0x03
    2c9a:	1c 82       	std	Y+4, r1	; 0x04
    2c9c:	1d 82       	std	Y+5, r1	; 0x05
    2c9e:	1e 82       	std	Y+6, r1	; 0x06
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2ca0:	a3 e5       	ldi	r26, 0x53	; 83
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e3 e5       	ldi	r30, 0x53	; 83
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	8f 77       	andi	r24, 0x7F	; 127
    2cac:	8c 93       	st	X, r24

	/*Mode of operation : CTC*/
	CLEARBIT(TCCR0,TCCR0_WGM00);
    2cae:	a3 e5       	ldi	r26, 0x53	; 83
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e3 e5       	ldi	r30, 0x53	; 83
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8f 7b       	andi	r24, 0xBF	; 191
    2cba:	8c 93       	st	X, r24
	SETBIT(TCCR0,TCCR0_WGM01);
    2cbc:	a3 e5       	ldi	r26, 0x53	; 83
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e3 e5       	ldi	r30, 0x53	; 83
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	88 60       	ori	r24, 0x08	; 8
    2cc8:	8c 93       	st	X, r24

	/* OC0 is disconnected */
	CLEARBIT(TCCR0,TCCR0_COM00);
    2cca:	a3 e5       	ldi	r26, 0x53	; 83
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e3 e5       	ldi	r30, 0x53	; 83
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	8f 7e       	andi	r24, 0xEF	; 239
    2cd6:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2cd8:	a3 e5       	ldi	r26, 0x53	; 83
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e3 e5       	ldi	r30, 0x53	; 83
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8f 7d       	andi	r24, 0xDF	; 223
    2ce4:	8c 93       	st	X, r24

	/*Clock Select div by 256*/
	TCCR0 |=0x04;
    2ce6:	a3 e5       	ldi	r26, 0x53	; 83
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e3 e5       	ldi	r30, 0x53	; 83
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	84 60       	ori	r24, 0x04	; 4
    2cf2:	8c 93       	st	X, r24
	/*set compare match value*/
	OCR0 = 250;  //this will generate 4 ms every cycle
    2cf4:	ec e5       	ldi	r30, 0x5C	; 92
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	8a ef       	ldi	r24, 0xFA	; 250
    2cfa:	80 83       	st	Z, r24
	uint16 CTC_Interrupt_counts=0;
    2cfc:	1a 82       	std	Y+2, r1	; 0x02
    2cfe:	19 82       	std	Y+1, r1	; 0x01
	CTC_Interrupt_counts=copy_dtime_ms/4;
    2d00:	8f 81       	ldd	r24, Y+7	; 0x07
    2d02:	98 85       	ldd	r25, Y+8	; 0x08
    2d04:	a9 85       	ldd	r26, Y+9	; 0x09
    2d06:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d08:	b6 95       	lsr	r27
    2d0a:	a7 95       	ror	r26
    2d0c:	97 95       	ror	r25
    2d0e:	87 95       	ror	r24
    2d10:	b6 95       	lsr	r27
    2d12:	a7 95       	ror	r26
    2d14:	97 95       	ror	r25
    2d16:	87 95       	ror	r24
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	18 c0       	rjmp	.+48     	; 0x2d4e <Delay_mS+0xd2>
	while(counter<CTC_Interrupt_counts)
	{
		while(!GETBIT(TIFR,TIFR_OCF0));
    2d1e:	e8 e5       	ldi	r30, 0x58	; 88
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	86 95       	lsr	r24
    2d26:	88 23       	and	r24, r24
    2d28:	d1 f3       	breq	.-12     	; 0x2d1e <Delay_mS+0xa2>
		SETBIT(TIFR,TIFR_OCF0);//clearing the flag
    2d2a:	a8 e5       	ldi	r26, 0x58	; 88
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e8 e5       	ldi	r30, 0x58	; 88
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	82 60       	ori	r24, 0x02	; 2
    2d36:	8c 93       	st	X, r24
		counter++;
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d3e:	be 81       	ldd	r27, Y+6	; 0x06
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	a1 1d       	adc	r26, r1
    2d44:	b1 1d       	adc	r27, r1
    2d46:	8b 83       	std	Y+3, r24	; 0x03
    2d48:	9c 83       	std	Y+4, r25	; 0x04
    2d4a:	ad 83       	std	Y+5, r26	; 0x05
    2d4c:	be 83       	std	Y+6, r27	; 0x06
	TCCR0 |=0x04;
	/*set compare match value*/
	OCR0 = 250;  //this will generate 4 ms every cycle
	uint16 CTC_Interrupt_counts=0;
	CTC_Interrupt_counts=copy_dtime_ms/4;
	while(counter<CTC_Interrupt_counts)
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	9c 01       	movw	r18, r24
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	50 e0       	ldi	r21, 0x00	; 0
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d5e:	be 81       	ldd	r27, Y+6	; 0x06
    2d60:	82 17       	cp	r24, r18
    2d62:	93 07       	cpc	r25, r19
    2d64:	a4 07       	cpc	r26, r20
    2d66:	b5 07       	cpc	r27, r21
    2d68:	d0 f2       	brcs	.-76     	; 0x2d1e <Delay_mS+0xa2>
	{
		while(!GETBIT(TIFR,TIFR_OCF0));
		SETBIT(TIFR,TIFR_OCF0);//clearing the flag
		counter++;
	}
}
    2d6a:	2a 96       	adiw	r28, 0x0a	; 10
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <Timer1_Servo>:

/*****************************************Timer1******************************************************/
void Timer1_Servo(uint8 copy_Angle)
{
    2d7c:	cf 92       	push	r12
    2d7e:	df 92       	push	r13
    2d80:	ef 92       	push	r14
    2d82:	ff 92       	push	r15
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	0f 92       	push	r0
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A|=0x80; //non inverting
    2d94:	af e4       	ldi	r26, 0x4F	; 79
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	ef e4       	ldi	r30, 0x4F	; 79
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	80 68       	ori	r24, 0x80	; 128
    2da0:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,2); //force output compare =0
    2da2:	af e4       	ldi	r26, 0x4F	; 79
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	ef e4       	ldi	r30, 0x4F	; 79
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8b 7f       	andi	r24, 0xFB	; 251
    2dae:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,3);
    2db0:	af e4       	ldi	r26, 0x4F	; 79
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	ef e4       	ldi	r30, 0x4F	; 79
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	87 7f       	andi	r24, 0xF7	; 247
    2dbc:	8c 93       	st	X, r24
	SETBIT(TCCR1A,1); //Waveform Generation Mode
    2dbe:	af e4       	ldi	r26, 0x4F	; 79
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	ef e4       	ldi	r30, 0x4F	; 79
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	82 60       	ori	r24, 0x02	; 2
    2dca:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,0);
    2dcc:	af e4       	ldi	r26, 0x4F	; 79
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	ef e4       	ldi	r30, 0x4F	; 79
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8e 7f       	andi	r24, 0xFE	; 254
    2dd8:	8c 93       	st	X, r24
	SETBIT(TCCR1B,3);
    2dda:	ae e4       	ldi	r26, 0x4E	; 78
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	ee e4       	ldi	r30, 0x4E	; 78
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	88 60       	ori	r24, 0x08	; 8
    2de6:	8c 93       	st	X, r24
	SETBIT(TCCR1B,4);
    2de8:	ae e4       	ldi	r26, 0x4E	; 78
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	ee e4       	ldi	r30, 0x4E	; 78
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	80 61       	ori	r24, 0x10	; 16
    2df4:	8c 93       	st	X, r24
	TCCR1B|=0x02; //prescaler 8
    2df6:	ae e4       	ldi	r26, 0x4E	; 78
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	ee e4       	ldi	r30, 0x4E	; 78
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	82 60       	ori	r24, 0x02	; 2
    2e02:	8c 93       	st	X, r24
	ICR1L=40000; //max count value
    2e04:	e6 e4       	ldi	r30, 0x46	; 70
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 e4       	ldi	r24, 0x40	; 64
    2e0a:	9c e9       	ldi	r25, 0x9C	; 156
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
	OCR1AL=2000+(copy_Angle)*(2000/180)+0.111111111*copy_Angle; //output compare
    2e10:	0f 2e       	mov	r0, r31
    2e12:	fa e4       	ldi	r31, 0x4A	; 74
    2e14:	cf 2e       	mov	r12, r31
    2e16:	dd 24       	eor	r13, r13
    2e18:	f0 2d       	mov	r31, r0
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	48 2f       	mov	r20, r24
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	ca 01       	movw	r24, r20
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	9c 01       	movw	r18, r24
    2e28:	22 0f       	add	r18, r18
    2e2a:	33 1f       	adc	r19, r19
    2e2c:	22 0f       	add	r18, r18
    2e2e:	33 1f       	adc	r19, r19
    2e30:	82 0f       	add	r24, r18
    2e32:	93 1f       	adc	r25, r19
    2e34:	84 0f       	add	r24, r20
    2e36:	95 1f       	adc	r25, r21
    2e38:	80 53       	subi	r24, 0x30	; 48
    2e3a:	98 4f       	sbci	r25, 0xF8	; 248
    2e3c:	aa 27       	eor	r26, r26
    2e3e:	97 fd       	sbrc	r25, 7
    2e40:	a0 95       	com	r26
    2e42:	ba 2f       	mov	r27, r26
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2e4c:	7b 01       	movw	r14, r22
    2e4e:	8c 01       	movw	r16, r24
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	88 2f       	mov	r24, r24
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	aa 27       	eor	r26, r26
    2e58:	97 fd       	sbrc	r25, 7
    2e5a:	a0 95       	com	r26
    2e5c:	ba 2f       	mov	r27, r26
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	29 e3       	ldi	r18, 0x39	; 57
    2e70:	3e e8       	ldi	r19, 0x8E	; 142
    2e72:	43 ee       	ldi	r20, 0xE3	; 227
    2e74:	5d e3       	ldi	r21, 0x3D	; 61
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	9c 01       	movw	r18, r24
    2e80:	ad 01       	movw	r20, r26
    2e82:	c8 01       	movw	r24, r16
    2e84:	b7 01       	movw	r22, r14
    2e86:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	f6 01       	movw	r30, r12
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
}
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	08 95       	ret

00002eb4 <ADC_To_Angle>:
uint8 ADC_To_Angle(uint8 copy_ADC_val)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <ADC_To_Angle+0x6>
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Angle =0;
    2ec0:	19 82       	std	Y+1, r1	; 0x01
	Angle=copy_ADC_val*180/255;
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	84 eb       	ldi	r24, 0xB4	; 180
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	ac 01       	movw	r20, r24
    2ece:	24 9f       	mul	r18, r20
    2ed0:	c0 01       	movw	r24, r0
    2ed2:	25 9f       	mul	r18, r21
    2ed4:	90 0d       	add	r25, r0
    2ed6:	34 9f       	mul	r19, r20
    2ed8:	90 0d       	add	r25, r0
    2eda:	11 24       	eor	r1, r1
    2edc:	2f ef       	ldi	r18, 0xFF	; 255
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	b9 01       	movw	r22, r18
    2ee2:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <__divmodhi4>
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	return Angle;
    2eea:	89 81       	ldd	r24, Y+1	; 0x01

}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <Timer1_Normal>:
void Timer1_Normal(void)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    2efe:	af e4       	ldi	r26, 0x4F	; 79
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	ef e4       	ldi	r30, 0x4F	; 79
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	8b 7f       	andi	r24, 0xFB	; 251
    2f0a:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    2f0c:	af e4       	ldi	r26, 0x4F	; 79
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ef e4       	ldi	r30, 0x4F	; 79
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	87 7f       	andi	r24, 0xF7	; 247
    2f18:	8c 93       	st	X, r24
	/*waveform generation mode: normal*/
	CLEARBIT(TCCR1A,TCCR1A_WGM10);
    2f1a:	af e4       	ldi	r26, 0x4F	; 79
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	ef e4       	ldi	r30, 0x4F	; 79
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	8e 7f       	andi	r24, 0xFE	; 254
    2f26:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_WGM11);
    2f28:	af e4       	ldi	r26, 0x4F	; 79
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	ef e4       	ldi	r30, 0x4F	; 79
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	8d 7f       	andi	r24, 0xFD	; 253
    2f34:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM12);
    2f36:	ae e4       	ldi	r26, 0x4E	; 78
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	ee e4       	ldi	r30, 0x4E	; 78
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	87 7f       	andi	r24, 0xF7	; 247
    2f42:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    2f44:	ae e4       	ldi	r26, 0x4E	; 78
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	ee e4       	ldi	r30, 0x4E	; 78
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8f 7e       	andi	r24, 0xEF	; 239
    2f50:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    2f52:	ae e4       	ldi	r26, 0x4E	; 78
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	ee e4       	ldi	r30, 0x4E	; 78
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	82 60       	ori	r24, 0x02	; 2
    2f5e:	8c 93       	st	X, r24
	/*Output mode: Toggle OC1A and OC1B*/
	TCCR1A &=0x0f;
    2f60:	af e4       	ldi	r26, 0x4F	; 79
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	ef e4       	ldi	r30, 0x4F	; 79
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	8f 70       	andi	r24, 0x0F	; 15
    2f6c:	8c 93       	st	X, r24
	TCCR1A |=OC1A_MODE;
    2f6e:	af e4       	ldi	r26, 0x4F	; 79
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	ef e4       	ldi	r30, 0x4F	; 79
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	8c 93       	st	X, r24
	TCCR1A |=OC1B_MODE;
    2f7a:	af e4       	ldi	r26, 0x4F	; 79
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	ef e4       	ldi	r30, 0x4F	; 79
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	80 61       	ori	r24, 0x10	; 16
    2f86:	8c 93       	st	X, r24
	/*Enable Interrupt*/
	SETBIT(TIMSK,TIMSK_TOIE1);
    2f88:	a9 e5       	ldi	r26, 0x59	; 89
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e9 e5       	ldi	r30, 0x59	; 89
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	84 60       	ori	r24, 0x04	; 4
    2f94:	8c 93       	st	X, r24
	/*Enable Global Interrupt*/
	SETBIT(SREG,GIE);
    2f96:	af e5       	ldi	r26, 0x5F	; 95
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	ef e5       	ldi	r30, 0x5F	; 95
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 68       	ori	r24, 0x80	; 128
    2fa2:	8c 93       	st	X, r24

}
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <Timer1_Normal_CallBack>:
uint8 Timer1_Normal_CallBack(void (*Copy_Timer1_Normal_CallBackFun)(void) , uint32 copy_time_ms)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	27 97       	sbiw	r28, 0x07	; 7
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	9b 83       	std	Y+3, r25	; 0x03
    2fc0:	8a 83       	std	Y+2, r24	; 0x02
    2fc2:	4c 83       	std	Y+4, r20	; 0x04
    2fc4:	5d 83       	std	Y+5, r21	; 0x05
    2fc6:	6e 83       	std	Y+6, r22	; 0x06
    2fc8:	7f 83       	std	Y+7, r23	; 0x07
	uint8 localError=1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	89 83       	std	Y+1, r24	; 0x01
	static float32 overflow_time=256*65535.0/(16000.0); //in ms
	#elif CLOCKSELECT ==CLOCK_DIV_BY_1024
	static float32 overflow_time =1024.0*65535.0/(16000.0); //in ms
	#endif

		if(Copy_Timer1_Normal_CallBackFun==NULL)
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	11 f4       	brne	.+4      	; 0x2fda <Timer1_Normal_CallBack+0x30>
		{
			localError=0;
    2fd6:	19 82       	std	Y+1, r1	; 0x01
    2fd8:	24 c0       	rjmp	.+72     	; 0x3022 <Timer1_Normal_CallBack+0x78>
		}
		else
		{
			Timer1_Normal_CallBackFun=Copy_Timer1_Normal_CallBackFun;
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	90 93 46 02 	sts	0x0246, r25
    2fe2:	80 93 45 02 	sts	0x0245, r24
			OV_Counts_Timer1=copy_time_ms/overflow_time;
    2fe6:	6c 81       	ldd	r22, Y+4	; 0x04
    2fe8:	7d 81       	ldd	r23, Y+5	; 0x05
    2fea:	8e 81       	ldd	r24, Y+6	; 0x06
    2fec:	9f 81       	ldd	r25, Y+7	; 0x07
    2fee:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	20 91 24 02 	lds	r18, 0x0224
    2ffa:	30 91 25 02 	lds	r19, 0x0225
    2ffe:	40 91 26 02 	lds	r20, 0x0226
    3002:	50 91 27 02 	lds	r21, 0x0227
    3006:	bc 01       	movw	r22, r24
    3008:	cd 01       	movw	r24, r26
    300a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	80 93 4d 02 	sts	0x024D, r24
    3016:	90 93 4e 02 	sts	0x024E, r25
    301a:	a0 93 4f 02 	sts	0x024F, r26
    301e:	b0 93 50 02 	sts	0x0250, r27
		}
		return localError;
    3022:	89 81       	ldd	r24, Y+1	; 0x01

}
    3024:	27 96       	adiw	r28, 0x07	; 7
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <__vector_9>:
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    3036:	1f 92       	push	r1
    3038:	0f 92       	push	r0
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	0f 92       	push	r0
    303e:	11 24       	eor	r1, r1
    3040:	2f 93       	push	r18
    3042:	3f 93       	push	r19
    3044:	4f 93       	push	r20
    3046:	5f 93       	push	r21
    3048:	6f 93       	push	r22
    304a:	7f 93       	push	r23
    304c:	8f 93       	push	r24
    304e:	9f 93       	push	r25
    3050:	af 93       	push	r26
    3052:	bf 93       	push	r27
    3054:	ef 93       	push	r30
    3056:	ff 93       	push	r31
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter=0;
	counter++;
    3060:	80 91 59 02 	lds	r24, 0x0259
    3064:	90 91 5a 02 	lds	r25, 0x025A
    3068:	a0 91 5b 02 	lds	r26, 0x025B
    306c:	b0 91 5c 02 	lds	r27, 0x025C
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	a1 1d       	adc	r26, r1
    3074:	b1 1d       	adc	r27, r1
    3076:	80 93 59 02 	sts	0x0259, r24
    307a:	90 93 5a 02 	sts	0x025A, r25
    307e:	a0 93 5b 02 	sts	0x025B, r26
    3082:	b0 93 5c 02 	sts	0x025C, r27
	if(counter>=OV_Counts_Timer1)
    3086:	80 91 59 02 	lds	r24, 0x0259
    308a:	90 91 5a 02 	lds	r25, 0x025A
    308e:	a0 91 5b 02 	lds	r26, 0x025B
    3092:	b0 91 5c 02 	lds	r27, 0x025C
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	20 91 4d 02 	lds	r18, 0x024D
    30a6:	30 91 4e 02 	lds	r19, 0x024E
    30aa:	40 91 4f 02 	lds	r20, 0x024F
    30ae:	50 91 50 02 	lds	r21, 0x0250
    30b2:	bc 01       	movw	r22, r24
    30b4:	cd 01       	movw	r24, r26
    30b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    30ba:	88 23       	and	r24, r24
    30bc:	9c f0       	brlt	.+38     	; 0x30e4 <__vector_9+0xae>
	{
		if(Timer1_Normal_CallBackFun != NULL)
    30be:	80 91 45 02 	lds	r24, 0x0245
    30c2:	90 91 46 02 	lds	r25, 0x0246
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	29 f0       	breq	.+10     	; 0x30d4 <__vector_9+0x9e>
		{
			Timer1_Normal_CallBackFun();
    30ca:	e0 91 45 02 	lds	r30, 0x0245
    30ce:	f0 91 46 02 	lds	r31, 0x0246
    30d2:	09 95       	icall
		}
		counter=0;
    30d4:	10 92 59 02 	sts	0x0259, r1
    30d8:	10 92 5a 02 	sts	0x025A, r1
    30dc:	10 92 5b 02 	sts	0x025B, r1
    30e0:	10 92 5c 02 	sts	0x025C, r1
	}

}
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	ff 91       	pop	r31
    30ea:	ef 91       	pop	r30
    30ec:	bf 91       	pop	r27
    30ee:	af 91       	pop	r26
    30f0:	9f 91       	pop	r25
    30f2:	8f 91       	pop	r24
    30f4:	7f 91       	pop	r23
    30f6:	6f 91       	pop	r22
    30f8:	5f 91       	pop	r21
    30fa:	4f 91       	pop	r20
    30fc:	3f 91       	pop	r19
    30fe:	2f 91       	pop	r18
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	0f 90       	pop	r0
    3106:	1f 90       	pop	r1
    3108:	18 95       	reti

0000310a <Timer1_CTC>:
void Timer1_CTC(void)
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    3112:	af e4       	ldi	r26, 0x4F	; 79
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ef e4       	ldi	r30, 0x4F	; 79
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	8b 7f       	andi	r24, 0xFB	; 251
    311e:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    3120:	af e4       	ldi	r26, 0x4F	; 79
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	ef e4       	ldi	r30, 0x4F	; 79
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	87 7f       	andi	r24, 0xF7	; 247
    312c:	8c 93       	st	X, r24
	/*waveform generation mode: CTC*/
	CLEARBIT(TCCR1A,TCCR1A_WGM10);
    312e:	af e4       	ldi	r26, 0x4F	; 79
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	ef e4       	ldi	r30, 0x4F	; 79
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	8e 7f       	andi	r24, 0xFE	; 254
    313a:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_WGM11);
    313c:	af e4       	ldi	r26, 0x4F	; 79
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	ef e4       	ldi	r30, 0x4F	; 79
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	8d 7f       	andi	r24, 0xFD	; 253
    3148:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM12);
    314a:	ae e4       	ldi	r26, 0x4E	; 78
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	ee e4       	ldi	r30, 0x4E	; 78
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	88 60       	ori	r24, 0x08	; 8
    3156:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    3158:	ae e4       	ldi	r26, 0x4E	; 78
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	ee e4       	ldi	r30, 0x4E	; 78
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 7e       	andi	r24, 0xEF	; 239
    3164:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    3166:	ae e4       	ldi	r26, 0x4E	; 78
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	ee e4       	ldi	r30, 0x4E	; 78
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	82 60       	ori	r24, 0x02	; 2
    3172:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3174:	ea e4       	ldi	r30, 0x4A	; 74
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	88 e0       	ldi	r24, 0x08	; 8
    317a:	97 e0       	ldi	r25, 0x07	; 7
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
	/*Output mode: Toggle OC1A and OC1B*/
	TCCR1A &=0x0f;
    3180:	af e4       	ldi	r26, 0x4F	; 79
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ef e4       	ldi	r30, 0x4F	; 79
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8f 70       	andi	r24, 0x0F	; 15
    318c:	8c 93       	st	X, r24
	TCCR1A |=OC1A_MODE;
    318e:	af e4       	ldi	r26, 0x4F	; 79
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	ef e4       	ldi	r30, 0x4F	; 79
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	8c 93       	st	X, r24
	TCCR1A |=OC1B_MODE;
    319a:	af e4       	ldi	r26, 0x4F	; 79
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	ef e4       	ldi	r30, 0x4F	; 79
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	80 61       	ori	r24, 0x10	; 16
    31a6:	8c 93       	st	X, r24
	/*Enable Interrupt*/
	SETBIT(TIMSK,TIMSK_OCIE1A);
    31a8:	a9 e5       	ldi	r26, 0x59	; 89
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e9 e5       	ldi	r30, 0x59	; 89
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	80 61       	ori	r24, 0x10	; 16
    31b4:	8c 93       	st	X, r24
	/*Enable Global Interrupt*/
	SETBIT(SREG,GIE);
    31b6:	af e5       	ldi	r26, 0x5F	; 95
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	ef e5       	ldi	r30, 0x5F	; 95
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	80 68       	ori	r24, 0x80	; 128
    31c2:	8c 93       	st	X, r24
}
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <Timer1_CTC_CallBack>:
uint8 Timer1_CTC_CallBack(void (*Copy_Timer1_CTC_CallBackFun)(void) , uint32 copy_time_ms)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	27 97       	sbiw	r28, 0x07	; 7
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	9b 83       	std	Y+3, r25	; 0x03
    31e0:	8a 83       	std	Y+2, r24	; 0x02
    31e2:	4c 83       	std	Y+4, r20	; 0x04
    31e4:	5d 83       	std	Y+5, r21	; 0x05
    31e6:	6e 83       	std	Y+6, r22	; 0x06
    31e8:	7f 83       	std	Y+7, r23	; 0x07
	uint8 localError=1;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	89 83       	std	Y+1, r24	; 0x01
	static float32 overflow_time=256.0*TIMER1_COMPARE_MATCH_VALUE_A/(16000.0); //in ms
	#elif CLOCKSELECT ==CLOCK_DIV_BY_1024
	static float32 overflow_time =1024.0*TIMER1_COMPARE_MATCH_VALUE_A/(16000.0); //in ms
	#endif

		if(Copy_Timer1_CTC_CallBackFun==NULL)
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	11 f4       	brne	.+4      	; 0x31fa <Timer1_CTC_CallBack+0x30>
		{
			localError=0;
    31f6:	19 82       	std	Y+1, r1	; 0x01
    31f8:	24 c0       	rjmp	.+72     	; 0x3242 <Timer1_CTC_CallBack+0x78>
		}
		else
		{
			Timer1_CTC_CallBackFun=Copy_Timer1_CTC_CallBackFun;
    31fa:	8a 81       	ldd	r24, Y+2	; 0x02
    31fc:	9b 81       	ldd	r25, Y+3	; 0x03
    31fe:	90 93 48 02 	sts	0x0248, r25
    3202:	80 93 47 02 	sts	0x0247, r24
			OV_Counts_Timer1=copy_time_ms/overflow_time;
    3206:	6c 81       	ldd	r22, Y+4	; 0x04
    3208:	7d 81       	ldd	r23, Y+5	; 0x05
    320a:	8e 81       	ldd	r24, Y+6	; 0x06
    320c:	9f 81       	ldd	r25, Y+7	; 0x07
    320e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	20 91 28 02 	lds	r18, 0x0228
    321a:	30 91 29 02 	lds	r19, 0x0229
    321e:	40 91 2a 02 	lds	r20, 0x022A
    3222:	50 91 2b 02 	lds	r21, 0x022B
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	80 93 4d 02 	sts	0x024D, r24
    3236:	90 93 4e 02 	sts	0x024E, r25
    323a:	a0 93 4f 02 	sts	0x024F, r26
    323e:	b0 93 50 02 	sts	0x0250, r27
		}
		return localError;
    3242:	89 81       	ldd	r24, Y+1	; 0x01
}
    3244:	27 96       	adiw	r28, 0x07	; 7
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    3256:	1f 92       	push	r1
    3258:	0f 92       	push	r0
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	0f 92       	push	r0
    325e:	11 24       	eor	r1, r1
    3260:	2f 93       	push	r18
    3262:	3f 93       	push	r19
    3264:	4f 93       	push	r20
    3266:	5f 93       	push	r21
    3268:	6f 93       	push	r22
    326a:	7f 93       	push	r23
    326c:	8f 93       	push	r24
    326e:	9f 93       	push	r25
    3270:	af 93       	push	r26
    3272:	bf 93       	push	r27
    3274:	ef 93       	push	r30
    3276:	ff 93       	push	r31
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter=0;
	counter++;
    3280:	80 91 5d 02 	lds	r24, 0x025D
    3284:	90 91 5e 02 	lds	r25, 0x025E
    3288:	a0 91 5f 02 	lds	r26, 0x025F
    328c:	b0 91 60 02 	lds	r27, 0x0260
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	a1 1d       	adc	r26, r1
    3294:	b1 1d       	adc	r27, r1
    3296:	80 93 5d 02 	sts	0x025D, r24
    329a:	90 93 5e 02 	sts	0x025E, r25
    329e:	a0 93 5f 02 	sts	0x025F, r26
    32a2:	b0 93 60 02 	sts	0x0260, r27
	if(counter>=OV_Counts_Timer1)
    32a6:	80 91 5d 02 	lds	r24, 0x025D
    32aa:	90 91 5e 02 	lds	r25, 0x025E
    32ae:	a0 91 5f 02 	lds	r26, 0x025F
    32b2:	b0 91 60 02 	lds	r27, 0x0260
    32b6:	bc 01       	movw	r22, r24
    32b8:	cd 01       	movw	r24, r26
    32ba:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	20 91 4d 02 	lds	r18, 0x024D
    32c6:	30 91 4e 02 	lds	r19, 0x024E
    32ca:	40 91 4f 02 	lds	r20, 0x024F
    32ce:	50 91 50 02 	lds	r21, 0x0250
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    32da:	88 23       	and	r24, r24
    32dc:	9c f0       	brlt	.+38     	; 0x3304 <__vector_7+0xae>
	{
		if(Timer1_CTC_CallBackFun != NULL)
    32de:	80 91 47 02 	lds	r24, 0x0247
    32e2:	90 91 48 02 	lds	r25, 0x0248
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	29 f0       	breq	.+10     	; 0x32f4 <__vector_7+0x9e>
		{
			Timer1_CTC_CallBackFun();
    32ea:	e0 91 47 02 	lds	r30, 0x0247
    32ee:	f0 91 48 02 	lds	r31, 0x0248
    32f2:	09 95       	icall
		}
		counter=0;
    32f4:	10 92 5d 02 	sts	0x025D, r1
    32f8:	10 92 5e 02 	sts	0x025E, r1
    32fc:	10 92 5f 02 	sts	0x025F, r1
    3300:	10 92 60 02 	sts	0x0260, r1
	}
}
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	ff 91       	pop	r31
    330a:	ef 91       	pop	r30
    330c:	bf 91       	pop	r27
    330e:	af 91       	pop	r26
    3310:	9f 91       	pop	r25
    3312:	8f 91       	pop	r24
    3314:	7f 91       	pop	r23
    3316:	6f 91       	pop	r22
    3318:	5f 91       	pop	r21
    331a:	4f 91       	pop	r20
    331c:	3f 91       	pop	r19
    331e:	2f 91       	pop	r18
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	0f 90       	pop	r0
    3326:	1f 90       	pop	r1
    3328:	18 95       	reti

0000332a <Timer1_PWM_Fast_8_bit>:
void Timer1_PWM_Fast_8_bit(void)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    3332:	af e4       	ldi	r26, 0x4F	; 79
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	ef e4       	ldi	r30, 0x4F	; 79
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	80 81       	ld	r24, Z
    333c:	8b 7f       	andi	r24, 0xFB	; 251
    333e:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    3340:	af e4       	ldi	r26, 0x4F	; 79
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	ef e4       	ldi	r30, 0x4F	; 79
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	87 7f       	andi	r24, 0xF7	; 247
    334c:	8c 93       	st	X, r24
	/*waveform generation mode: Fast PWM 8 bit*/
	SETBIT(TCCR1A,TCCR1A_WGM10);
    334e:	af e4       	ldi	r26, 0x4F	; 79
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	ef e4       	ldi	r30, 0x4F	; 79
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	81 60       	ori	r24, 0x01	; 1
    335a:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_WGM11);
    335c:	af e4       	ldi	r26, 0x4F	; 79
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	ef e4       	ldi	r30, 0x4F	; 79
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	8d 7f       	andi	r24, 0xFD	; 253
    3368:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM12);
    336a:	ae e4       	ldi	r26, 0x4E	; 78
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	ee e4       	ldi	r30, 0x4E	; 78
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	88 60       	ori	r24, 0x08	; 8
    3376:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    3378:	ae e4       	ldi	r26, 0x4E	; 78
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	ee e4       	ldi	r30, 0x4E	; 78
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	8f 7e       	andi	r24, 0xEF	; 239
    3384:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    3386:	ae e4       	ldi	r26, 0x4E	; 78
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	ee e4       	ldi	r30, 0x4E	; 78
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	82 60       	ori	r24, 0x02	; 2
    3392:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    3394:	af e4       	ldi	r26, 0x4F	; 79
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ef e4       	ldi	r30, 0x4F	; 79
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	8f 70       	andi	r24, 0x0F	; 15
    33a0:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    33a2:	af e4       	ldi	r26, 0x4F	; 79
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	ef e4       	ldi	r30, 0x4F	; 79
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	80 68       	ori	r24, 0x80	; 128
    33ae:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    33b0:	af e4       	ldi	r26, 0x4F	; 79
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	ef e4       	ldi	r30, 0x4F	; 79
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	80 62       	ori	r24, 0x20	; 32
    33bc:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    33be:	ea e4       	ldi	r30, 0x4A	; 74
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	88 e0       	ldi	r24, 0x08	; 8
    33c4:	97 e0       	ldi	r25, 0x07	; 7
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    33ca:	e8 e4       	ldi	r30, 0x48	; 72
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	8c ed       	ldi	r24, 0xDC	; 220
    33d0:	95 e0       	ldi	r25, 0x05	; 5
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
}
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <Timer1_PWM_Fast_9_bit>:
void Timer1_PWM_Fast_9_bit(void)
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    33e4:	af e4       	ldi	r26, 0x4F	; 79
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	ef e4       	ldi	r30, 0x4F	; 79
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	8b 7f       	andi	r24, 0xFB	; 251
    33f0:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    33f2:	af e4       	ldi	r26, 0x4F	; 79
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	ef e4       	ldi	r30, 0x4F	; 79
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	87 7f       	andi	r24, 0xF7	; 247
    33fe:	8c 93       	st	X, r24
	/*waveform generation mode: Fast PWM 9 bit*/
	CLEARBIT(TCCR1A,TCCR1A_WGM10);
    3400:	af e4       	ldi	r26, 0x4F	; 79
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	ef e4       	ldi	r30, 0x4F	; 79
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	8e 7f       	andi	r24, 0xFE	; 254
    340c:	8c 93       	st	X, r24
	SETBIT(TCCR1A,TCCR1A_WGM11);
    340e:	af e4       	ldi	r26, 0x4F	; 79
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	ef e4       	ldi	r30, 0x4F	; 79
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	82 60       	ori	r24, 0x02	; 2
    341a:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM12);
    341c:	ae e4       	ldi	r26, 0x4E	; 78
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	ee e4       	ldi	r30, 0x4E	; 78
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	88 60       	ori	r24, 0x08	; 8
    3428:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    342a:	ae e4       	ldi	r26, 0x4E	; 78
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	ee e4       	ldi	r30, 0x4E	; 78
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	8f 7e       	andi	r24, 0xEF	; 239
    3436:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    3438:	ae e4       	ldi	r26, 0x4E	; 78
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	ee e4       	ldi	r30, 0x4E	; 78
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	82 60       	ori	r24, 0x02	; 2
    3444:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    3446:	af e4       	ldi	r26, 0x4F	; 79
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	ef e4       	ldi	r30, 0x4F	; 79
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	8f 70       	andi	r24, 0x0F	; 15
    3452:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    3454:	af e4       	ldi	r26, 0x4F	; 79
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ef e4       	ldi	r30, 0x4F	; 79
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	80 68       	ori	r24, 0x80	; 128
    3460:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    3462:	af e4       	ldi	r26, 0x4F	; 79
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	ef e4       	ldi	r30, 0x4F	; 79
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	80 62       	ori	r24, 0x20	; 32
    346e:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3470:	ea e4       	ldi	r30, 0x4A	; 74
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	88 e0       	ldi	r24, 0x08	; 8
    3476:	97 e0       	ldi	r25, 0x07	; 7
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    347c:	e8 e4       	ldi	r30, 0x48	; 72
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	8c ed       	ldi	r24, 0xDC	; 220
    3482:	95 e0       	ldi	r25, 0x05	; 5
    3484:	91 83       	std	Z+1, r25	; 0x01
    3486:	80 83       	st	Z, r24
}
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <Timer1_PWM_Fast_10_bit>:
void Timer1_PWM_Fast_10_bit(void)
{
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    3496:	af e4       	ldi	r26, 0x4F	; 79
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	ef e4       	ldi	r30, 0x4F	; 79
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	8b 7f       	andi	r24, 0xFB	; 251
    34a2:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    34a4:	af e4       	ldi	r26, 0x4F	; 79
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	ef e4       	ldi	r30, 0x4F	; 79
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	87 7f       	andi	r24, 0xF7	; 247
    34b0:	8c 93       	st	X, r24
	/*waveform generation mode: Fast PWM 10 bit*/
	SETBIT(TCCR1A,TCCR1A_WGM10);
    34b2:	af e4       	ldi	r26, 0x4F	; 79
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	ef e4       	ldi	r30, 0x4F	; 79
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	81 60       	ori	r24, 0x01	; 1
    34be:	8c 93       	st	X, r24
	SETBIT(TCCR1A,TCCR1A_WGM11);
    34c0:	af e4       	ldi	r26, 0x4F	; 79
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	ef e4       	ldi	r30, 0x4F	; 79
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	82 60       	ori	r24, 0x02	; 2
    34cc:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM12);
    34ce:	ae e4       	ldi	r26, 0x4E	; 78
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	ee e4       	ldi	r30, 0x4E	; 78
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	88 60       	ori	r24, 0x08	; 8
    34da:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    34dc:	ae e4       	ldi	r26, 0x4E	; 78
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	ee e4       	ldi	r30, 0x4E	; 78
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	8f 7e       	andi	r24, 0xEF	; 239
    34e8:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    34ea:	ae e4       	ldi	r26, 0x4E	; 78
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	ee e4       	ldi	r30, 0x4E	; 78
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	82 60       	ori	r24, 0x02	; 2
    34f6:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    34f8:	af e4       	ldi	r26, 0x4F	; 79
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	ef e4       	ldi	r30, 0x4F	; 79
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	8f 70       	andi	r24, 0x0F	; 15
    3504:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    3506:	af e4       	ldi	r26, 0x4F	; 79
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	ef e4       	ldi	r30, 0x4F	; 79
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	80 68       	ori	r24, 0x80	; 128
    3512:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    3514:	af e4       	ldi	r26, 0x4F	; 79
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	ef e4       	ldi	r30, 0x4F	; 79
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	80 62       	ori	r24, 0x20	; 32
    3520:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3522:	ea e4       	ldi	r30, 0x4A	; 74
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	88 e0       	ldi	r24, 0x08	; 8
    3528:	97 e0       	ldi	r25, 0x07	; 7
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    352e:	e8 e4       	ldi	r30, 0x48	; 72
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	8c ed       	ldi	r24, 0xDC	; 220
    3534:	95 e0       	ldi	r25, 0x05	; 5
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
}
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <Timer1_PWM_Phase_Correct_8_bit>:
void Timer1_PWM_Phase_Correct_8_bit(void)
{
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    3548:	af e4       	ldi	r26, 0x4F	; 79
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	ef e4       	ldi	r30, 0x4F	; 79
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	8b 7f       	andi	r24, 0xFB	; 251
    3554:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    3556:	af e4       	ldi	r26, 0x4F	; 79
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	ef e4       	ldi	r30, 0x4F	; 79
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	87 7f       	andi	r24, 0xF7	; 247
    3562:	8c 93       	st	X, r24
	/*waveform generation mode: Phase Correct PWM 8 bit*/
	SETBIT(TCCR1A,TCCR1A_WGM10);
    3564:	af e4       	ldi	r26, 0x4F	; 79
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	ef e4       	ldi	r30, 0x4F	; 79
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	81 60       	ori	r24, 0x01	; 1
    3570:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_WGM11);
    3572:	af e4       	ldi	r26, 0x4F	; 79
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ef e4       	ldi	r30, 0x4F	; 79
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	8d 7f       	andi	r24, 0xFD	; 253
    357e:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM12);
    3580:	ae e4       	ldi	r26, 0x4E	; 78
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	ee e4       	ldi	r30, 0x4E	; 78
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	87 7f       	andi	r24, 0xF7	; 247
    358c:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    358e:	ae e4       	ldi	r26, 0x4E	; 78
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	ee e4       	ldi	r30, 0x4E	; 78
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	8f 7e       	andi	r24, 0xEF	; 239
    359a:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    359c:	ae e4       	ldi	r26, 0x4E	; 78
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	ee e4       	ldi	r30, 0x4E	; 78
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	82 60       	ori	r24, 0x02	; 2
    35a8:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    35aa:	af e4       	ldi	r26, 0x4F	; 79
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	ef e4       	ldi	r30, 0x4F	; 79
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	8f 70       	andi	r24, 0x0F	; 15
    35b6:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    35b8:	af e4       	ldi	r26, 0x4F	; 79
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	ef e4       	ldi	r30, 0x4F	; 79
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	80 68       	ori	r24, 0x80	; 128
    35c4:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    35c6:	af e4       	ldi	r26, 0x4F	; 79
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	ef e4       	ldi	r30, 0x4F	; 79
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	80 62       	ori	r24, 0x20	; 32
    35d2:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    35d4:	ea e4       	ldi	r30, 0x4A	; 74
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	88 e0       	ldi	r24, 0x08	; 8
    35da:	97 e0       	ldi	r25, 0x07	; 7
    35dc:	91 83       	std	Z+1, r25	; 0x01
    35de:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    35e0:	e8 e4       	ldi	r30, 0x48	; 72
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	8c ed       	ldi	r24, 0xDC	; 220
    35e6:	95 e0       	ldi	r25, 0x05	; 5
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	80 83       	st	Z, r24
}
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <Timer1_PWM_Phase_Correct_9_bit>:
void Timer1_PWM_Phase_Correct_9_bit(void)
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    35fa:	af e4       	ldi	r26, 0x4F	; 79
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	ef e4       	ldi	r30, 0x4F	; 79
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	8b 7f       	andi	r24, 0xFB	; 251
    3606:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    3608:	af e4       	ldi	r26, 0x4F	; 79
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	ef e4       	ldi	r30, 0x4F	; 79
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	80 81       	ld	r24, Z
    3612:	87 7f       	andi	r24, 0xF7	; 247
    3614:	8c 93       	st	X, r24
	/*waveform generation mode: Phase Correct PWM 9 bit*/
	CLEARBIT(TCCR1A,TCCR1A_WGM10);
    3616:	af e4       	ldi	r26, 0x4F	; 79
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	ef e4       	ldi	r30, 0x4F	; 79
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	80 81       	ld	r24, Z
    3620:	8e 7f       	andi	r24, 0xFE	; 254
    3622:	8c 93       	st	X, r24
	SETBIT(TCCR1A,TCCR1A_WGM11);
    3624:	af e4       	ldi	r26, 0x4F	; 79
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	ef e4       	ldi	r30, 0x4F	; 79
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	82 60       	ori	r24, 0x02	; 2
    3630:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM12);
    3632:	ae e4       	ldi	r26, 0x4E	; 78
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	ee e4       	ldi	r30, 0x4E	; 78
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	87 7f       	andi	r24, 0xF7	; 247
    363e:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    3640:	ae e4       	ldi	r26, 0x4E	; 78
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	ee e4       	ldi	r30, 0x4E	; 78
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	8f 7e       	andi	r24, 0xEF	; 239
    364c:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    364e:	ae e4       	ldi	r26, 0x4E	; 78
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	ee e4       	ldi	r30, 0x4E	; 78
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	82 60       	ori	r24, 0x02	; 2
    365a:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    365c:	af e4       	ldi	r26, 0x4F	; 79
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	ef e4       	ldi	r30, 0x4F	; 79
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	8f 70       	andi	r24, 0x0F	; 15
    3668:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    366a:	af e4       	ldi	r26, 0x4F	; 79
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	ef e4       	ldi	r30, 0x4F	; 79
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	80 68       	ori	r24, 0x80	; 128
    3676:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    3678:	af e4       	ldi	r26, 0x4F	; 79
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	ef e4       	ldi	r30, 0x4F	; 79
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	80 62       	ori	r24, 0x20	; 32
    3684:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3686:	ea e4       	ldi	r30, 0x4A	; 74
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	88 e0       	ldi	r24, 0x08	; 8
    368c:	97 e0       	ldi	r25, 0x07	; 7
    368e:	91 83       	std	Z+1, r25	; 0x01
    3690:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    3692:	e8 e4       	ldi	r30, 0x48	; 72
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	8c ed       	ldi	r24, 0xDC	; 220
    3698:	95 e0       	ldi	r25, 0x05	; 5
    369a:	91 83       	std	Z+1, r25	; 0x01
    369c:	80 83       	st	Z, r24
}
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <Timer1_PWM_Phase_Correct_10_bit>:
void Timer1_PWM_Phase_Correct_10_bit(void)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    36ac:	af e4       	ldi	r26, 0x4F	; 79
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	ef e4       	ldi	r30, 0x4F	; 79
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	8b 7f       	andi	r24, 0xFB	; 251
    36b8:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    36ba:	af e4       	ldi	r26, 0x4F	; 79
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	ef e4       	ldi	r30, 0x4F	; 79
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	87 7f       	andi	r24, 0xF7	; 247
    36c6:	8c 93       	st	X, r24
	/*waveform generation mode: Phase Correct PWM 10 bit*/
	SETBIT(TCCR1A,TCCR1A_WGM10);
    36c8:	af e4       	ldi	r26, 0x4F	; 79
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	ef e4       	ldi	r30, 0x4F	; 79
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	81 60       	ori	r24, 0x01	; 1
    36d4:	8c 93       	st	X, r24
	SETBIT(TCCR1A,TCCR1A_WGM11);
    36d6:	af e4       	ldi	r26, 0x4F	; 79
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ef e4       	ldi	r30, 0x4F	; 79
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	82 60       	ori	r24, 0x02	; 2
    36e2:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM12);
    36e4:	ae e4       	ldi	r26, 0x4E	; 78
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	ee e4       	ldi	r30, 0x4E	; 78
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	87 7f       	andi	r24, 0xF7	; 247
    36f0:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM13);
    36f2:	ae e4       	ldi	r26, 0x4E	; 78
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	ee e4       	ldi	r30, 0x4E	; 78
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 7e       	andi	r24, 0xEF	; 239
    36fe:	8c 93       	st	X, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    3700:	ae e4       	ldi	r26, 0x4E	; 78
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	ee e4       	ldi	r30, 0x4E	; 78
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	82 60       	ori	r24, 0x02	; 2
    370c:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    370e:	af e4       	ldi	r26, 0x4F	; 79
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ef e4       	ldi	r30, 0x4F	; 79
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	8f 70       	andi	r24, 0x0F	; 15
    371a:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    371c:	af e4       	ldi	r26, 0x4F	; 79
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	ef e4       	ldi	r30, 0x4F	; 79
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	80 68       	ori	r24, 0x80	; 128
    3728:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    372a:	af e4       	ldi	r26, 0x4F	; 79
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	ef e4       	ldi	r30, 0x4F	; 79
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	80 62       	ori	r24, 0x20	; 32
    3736:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3738:	ea e4       	ldi	r30, 0x4A	; 74
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	88 e0       	ldi	r24, 0x08	; 8
    373e:	97 e0       	ldi	r25, 0x07	; 7
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    3744:	e8 e4       	ldi	r30, 0x48	; 72
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	8c ed       	ldi	r24, 0xDC	; 220
    374a:	95 e0       	ldi	r25, 0x05	; 5
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	80 83       	st	Z, r24
}
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	08 95       	ret

00003756 <Timer1_PWM_Fast_ICR1>:
void Timer1_PWM_Fast_ICR1(uint16 copy_Req_Freq)
{
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	00 d0       	rcall	.+0      	; 0x375c <Timer1_PWM_Fast_ICR1+0x6>
    375c:	00 d0       	rcall	.+0      	; 0x375e <Timer1_PWM_Fast_ICR1+0x8>
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	9c 83       	std	Y+4, r25	; 0x04
    3764:	8b 83       	std	Y+3, r24	; 0x03
	uint16 top=0;
    3766:	1a 82       	std	Y+2, r1	; 0x02
    3768:	19 82       	std	Y+1, r1	; 0x01
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    376a:	af e4       	ldi	r26, 0x4F	; 79
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	ef e4       	ldi	r30, 0x4F	; 79
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	8b 7f       	andi	r24, 0xFB	; 251
    3776:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    3778:	af e4       	ldi	r26, 0x4F	; 79
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	ef e4       	ldi	r30, 0x4F	; 79
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	80 81       	ld	r24, Z
    3782:	87 7f       	andi	r24, 0xF7	; 247
    3784:	8c 93       	st	X, r24
	/*waveform generation mode: Fast PWM with ICR1*/
	CLEARBIT(TCCR1A,TCCR1A_WGM10);
    3786:	af e4       	ldi	r26, 0x4F	; 79
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	ef e4       	ldi	r30, 0x4F	; 79
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	8e 7f       	andi	r24, 0xFE	; 254
    3792:	8c 93       	st	X, r24
	SETBIT(TCCR1A,TCCR1A_WGM11);
    3794:	af e4       	ldi	r26, 0x4F	; 79
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	ef e4       	ldi	r30, 0x4F	; 79
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	82 60       	ori	r24, 0x02	; 2
    37a0:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM12);
    37a2:	ae e4       	ldi	r26, 0x4E	; 78
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	ee e4       	ldi	r30, 0x4E	; 78
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	88 60       	ori	r24, 0x08	; 8
    37ae:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM13);
    37b0:	ae e4       	ldi	r26, 0x4E	; 78
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	ee e4       	ldi	r30, 0x4E	; 78
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	80 61       	ori	r24, 0x10	; 16
    37bc:	8c 93       	st	X, r24
	/*ICR Value*/
	top=(16000000UL/CLOCKSELECT)/copy_Req_Freq;
    37be:	8b 81       	ldd	r24, Y+3	; 0x03
    37c0:	9c 81       	ldd	r25, Y+4	; 0x04
    37c2:	9c 01       	movw	r18, r24
    37c4:	40 e0       	ldi	r20, 0x00	; 0
    37c6:	50 e0       	ldi	r21, 0x00	; 0
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	92 e1       	ldi	r25, 0x12	; 18
    37cc:	aa e7       	ldi	r26, 0x7A	; 122
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	bc 01       	movw	r22, r24
    37d2:	cd 01       	movw	r24, r26
    37d4:	0e 94 04 2b 	call	0x5608	; 0x5608 <__udivmodsi4>
    37d8:	da 01       	movw	r26, r20
    37da:	c9 01       	movw	r24, r18
    37dc:	9a 83       	std	Y+2, r25	; 0x02
    37de:	89 83       	std	Y+1, r24	; 0x01
	ICR1L=top;
    37e0:	e6 e4       	ldi	r30, 0x46	; 70
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	9a 81       	ldd	r25, Y+2	; 0x02
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    37ec:	ae e4       	ldi	r26, 0x4E	; 78
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	ee e4       	ldi	r30, 0x4E	; 78
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	82 60       	ori	r24, 0x02	; 2
    37f8:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    37fa:	af e4       	ldi	r26, 0x4F	; 79
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	ef e4       	ldi	r30, 0x4F	; 79
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	8f 70       	andi	r24, 0x0F	; 15
    3806:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    3808:	af e4       	ldi	r26, 0x4F	; 79
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	ef e4       	ldi	r30, 0x4F	; 79
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	80 68       	ori	r24, 0x80	; 128
    3814:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    3816:	af e4       	ldi	r26, 0x4F	; 79
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	ef e4       	ldi	r30, 0x4F	; 79
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	80 62       	ori	r24, 0x20	; 32
    3822:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3824:	ea e4       	ldi	r30, 0x4A	; 74
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	88 e0       	ldi	r24, 0x08	; 8
    382a:	97 e0       	ldi	r25, 0x07	; 7
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    3830:	e8 e4       	ldi	r30, 0x48	; 72
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	8c ed       	ldi	r24, 0xDC	; 220
    3836:	95 e0       	ldi	r25, 0x05	; 5
    3838:	91 83       	std	Z+1, r25	; 0x01
    383a:	80 83       	st	Z, r24
}
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <Timer1_PWM_Phase_Correct_ICR1>:

void Timer1_PWM_Phase_Correct_ICR1(uint16 copy_Req_Freq)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	00 d0       	rcall	.+0      	; 0x3850 <Timer1_PWM_Phase_Correct_ICR1+0x6>
    3850:	00 d0       	rcall	.+0      	; 0x3852 <Timer1_PWM_Phase_Correct_ICR1+0x8>
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	9c 83       	std	Y+4, r25	; 0x04
    3858:	8b 83       	std	Y+3, r24	; 0x03
	uint16 top=0;
    385a:	1a 82       	std	Y+2, r1	; 0x02
    385c:	19 82       	std	Y+1, r1	; 0x01
	/*Clear force output compare*/
	CLEARBIT(TCCR1A,TCCR1A_FOC1B);
    385e:	af e4       	ldi	r26, 0x4F	; 79
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	ef e4       	ldi	r30, 0x4F	; 79
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 81       	ld	r24, Z
    3868:	8b 7f       	andi	r24, 0xFB	; 251
    386a:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,TCCR1A_FOC1A);
    386c:	af e4       	ldi	r26, 0x4F	; 79
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	ef e4       	ldi	r30, 0x4F	; 79
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	87 7f       	andi	r24, 0xF7	; 247
    3878:	8c 93       	st	X, r24
	/*waveform generation mode: Phase Correct PWM with ICR1*/
	CLEARBIT(TCCR1A,TCCR1A_WGM10);
    387a:	af e4       	ldi	r26, 0x4F	; 79
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	ef e4       	ldi	r30, 0x4F	; 79
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	8e 7f       	andi	r24, 0xFE	; 254
    3886:	8c 93       	st	X, r24
	SETBIT(TCCR1A,TCCR1A_WGM11);
    3888:	af e4       	ldi	r26, 0x4F	; 79
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	ef e4       	ldi	r30, 0x4F	; 79
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	82 60       	ori	r24, 0x02	; 2
    3894:	8c 93       	st	X, r24
	CLEARBIT(TCCR1B,TCCR1B_WGM12);
    3896:	ae e4       	ldi	r26, 0x4E	; 78
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	ee e4       	ldi	r30, 0x4E	; 78
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	87 7f       	andi	r24, 0xF7	; 247
    38a2:	8c 93       	st	X, r24
	SETBIT(TCCR1B,TCCR1B_WGM13);
    38a4:	ae e4       	ldi	r26, 0x4E	; 78
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	ee e4       	ldi	r30, 0x4E	; 78
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	80 61       	ori	r24, 0x10	; 16
    38b0:	8c 93       	st	X, r24
	/*ICR Value*/
	top=(8000000/CLOCKSELECT)/copy_Req_Freq;
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
    38b6:	9c 01       	movw	r18, r24
    38b8:	40 e0       	ldi	r20, 0x00	; 0
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	99 e0       	ldi	r25, 0x09	; 9
    38c0:	ad e3       	ldi	r26, 0x3D	; 61
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	0e 94 26 2b 	call	0x564c	; 0x564c <__divmodsi4>
    38cc:	da 01       	movw	r26, r20
    38ce:	c9 01       	movw	r24, r18
    38d0:	9a 83       	std	Y+2, r25	; 0x02
    38d2:	89 83       	std	Y+1, r24	; 0x01
	ICR1L=top;
    38d4:	e6 e4       	ldi	r30, 0x46	; 70
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
	/*Clock select*/
	TCCR1B |= CLOCKSELECT;
    38e0:	ae e4       	ldi	r26, 0x4E	; 78
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	ee e4       	ldi	r30, 0x4E	; 78
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	80 81       	ld	r24, Z
    38ea:	82 60       	ori	r24, 0x02	; 2
    38ec:	8c 93       	st	X, r24
	/*Output mode OC1A & OC1B*/
	TCCR1A &=0x0f;
    38ee:	af e4       	ldi	r26, 0x4F	; 79
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	ef e4       	ldi	r30, 0x4F	; 79
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	8f 70       	andi	r24, 0x0F	; 15
    38fa:	8c 93       	st	X, r24
	TCCR1A |=OC1A_PWM_MODE;
    38fc:	af e4       	ldi	r26, 0x4F	; 79
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	ef e4       	ldi	r30, 0x4F	; 79
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	80 68       	ori	r24, 0x80	; 128
    3908:	8c 93       	st	X, r24
	TCCR1A |=OC1B_PWM_MODE;
    390a:	af e4       	ldi	r26, 0x4F	; 79
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	ef e4       	ldi	r30, 0x4F	; 79
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	80 62       	ori	r24, 0x20	; 32
    3916:	8c 93       	st	X, r24
	/*compare match value "OCR1A" */
	OCR1AL=TIMER1_COMPARE_MATCH_VALUE_A;
    3918:	ea e4       	ldi	r30, 0x4A	; 74
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	88 e0       	ldi	r24, 0x08	; 8
    391e:	97 e0       	ldi	r25, 0x07	; 7
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	80 83       	st	Z, r24
	/*compare match value "OCR1B" */
	OCR1BL=TIMER1_COMPARE_MATCH_VALUE_B;
    3924:	e8 e4       	ldi	r30, 0x48	; 72
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	8c ed       	ldi	r24, 0xDC	; 220
    392a:	95 e0       	ldi	r25, 0x05	; 5
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	80 83       	st	Z, r24
}
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <main>:
#include "Timer_interface.h"

static uint8 ComparePasswords(uint8 *pass1 , uint8 *pass2 );

int main (void)
{
    393e:	0f 93       	push	r16
    3940:	1f 93       	push	r17
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
    394a:	c5 51       	subi	r28, 0x15	; 21
    394c:	d1 40       	sbci	r29, 0x01	; 1
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);//LCD data
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	6f ef       	ldi	r22, 0xFF	; 255
    395c:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_SetPortDirection>
	DIO_setPinDirection(DIO_PORTA,PIN5,OUTPUT);// LCD EN
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	65 e0       	ldi	r22, 0x05	; 5
    3964:	41 e0       	ldi	r20, 0x01	; 1
    3966:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,PIN6,OUTPUT); // LCD R/W
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	66 e0       	ldi	r22, 0x06	; 6
    396e:	41 e0       	ldi	r20, 0x01	; 1
    3970:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,PIN7,OUTPUT); //LCD RS
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	67 e0       	ldi	r22, 0x07	; 7
    3978:	41 e0       	ldi	r20, 0x01	; 1
    397a:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_setPinDirection>
	DIO_SetPortDirection(DIO_PORTC, KEYPAD_Direction);
    397e:	82 e0       	ldi	r24, 0x02	; 2
    3980:	60 ef       	ldi	r22, 0xF0	; 240
    3982:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_SetPortDirection>
	DIO_SetPortValue(DIO_PORTC,KEYPAD_Value);
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	6f ef       	ldi	r22, 0xFF	; 255
    398a:	0e 94 81 0b 	call	0x1702	; 0x1702 <DIO_SetPortValue>
	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);//Lights
    398e:	83 e0       	ldi	r24, 0x03	; 3
    3990:	67 e0       	ldi	r22, 0x07	; 7
    3992:	41 e0       	ldi	r20, 0x01	; 1
    3994:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);//Fan
    3998:	83 e0       	ldi	r24, 0x03	; 3
    399a:	64 e0       	ldi	r22, 0x04	; 4
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);//Servo motor
    39a2:	83 e0       	ldi	r24, 0x03	; 3
    39a4:	65 e0       	ldi	r22, 0x05	; 5
    39a6:	41 e0       	ldi	r20, 0x01	; 1
    39a8:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_setPinDirection>
	ADC_init();
    39ac:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
	LCD_init();
    39b0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_init>
	uint8 valueADC=0;
    39b4:	fe 01       	movw	r30, r28
    39b6:	e5 5f       	subi	r30, 0xF5	; 245
    39b8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ba:	10 82       	st	Z, r1
	uint32 analogue=0;
    39bc:	fe 01       	movw	r30, r28
    39be:	e9 5f       	subi	r30, 0xF9	; 249
    39c0:	fe 4f       	sbci	r31, 0xFE	; 254
    39c2:	10 82       	st	Z, r1
    39c4:	11 82       	std	Z+1, r1	; 0x01
    39c6:	12 82       	std	Z+2, r1	; 0x02
    39c8:	13 82       	std	Z+3, r1	; 0x03
	uint8 temprature=0;
    39ca:	fe 01       	movw	r30, r28
    39cc:	ea 5f       	subi	r30, 0xFA	; 250
    39ce:	fe 4f       	sbci	r31, 0xFE	; 254
    39d0:	10 82       	st	Z, r1
	uint8 passReal[4]={'4','3','2','1'};
    39d2:	fe 01       	movw	r30, r28
    39d4:	e4 5f       	subi	r30, 0xF4	; 244
    39d6:	fe 4f       	sbci	r31, 0xFE	; 254
    39d8:	84 e3       	ldi	r24, 0x34	; 52
    39da:	80 83       	st	Z, r24
    39dc:	fe 01       	movw	r30, r28
    39de:	e4 5f       	subi	r30, 0xF4	; 244
    39e0:	fe 4f       	sbci	r31, 0xFE	; 254
    39e2:	83 e3       	ldi	r24, 0x33	; 51
    39e4:	81 83       	std	Z+1, r24	; 0x01
    39e6:	fe 01       	movw	r30, r28
    39e8:	e4 5f       	subi	r30, 0xF4	; 244
    39ea:	fe 4f       	sbci	r31, 0xFE	; 254
    39ec:	82 e3       	ldi	r24, 0x32	; 50
    39ee:	82 83       	std	Z+2, r24	; 0x02
    39f0:	fe 01       	movw	r30, r28
    39f2:	e4 5f       	subi	r30, 0xF4	; 244
    39f4:	fe 4f       	sbci	r31, 0xFE	; 254
    39f6:	81 e3       	ldi	r24, 0x31	; 49
    39f8:	83 83       	std	Z+3, r24	; 0x03
	uint8 passArr[4];
	uint8 passStatus=2;
    39fa:	fe 01       	movw	r30, r28
    39fc:	eb 5f       	subi	r30, 0xFB	; 251
    39fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	80 83       	st	Z, r24
	uint8 iterator=0;
    3a04:	fe 01       	movw	r30, r28
    3a06:	ec 5f       	subi	r30, 0xFC	; 252
    3a08:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0a:	10 82       	st	Z, r1
	uint8 choosenOption =0;
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	ed 5f       	subi	r30, 0xFD	; 253
    3a10:	fe 4f       	sbci	r31, 0xFE	; 254
    3a12:	10 82       	st	Z, r1
	uint8 trials=0;
    3a14:	fe 01       	movw	r30, r28
    3a16:	ee 5f       	subi	r30, 0xFE	; 254
    3a18:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1a:	10 82       	st	Z, r1
	uint8 angle=0;
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	ef 5f       	subi	r30, 0xFF	; 255
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	10 82       	st	Z, r1
	uint32 servo_adjust_time=20000;
    3a24:	fe 01       	movw	r30, r28
    3a26:	e3 50       	subi	r30, 0x03	; 3
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 e2       	ldi	r24, 0x20	; 32
    3a2c:	9e e4       	ldi	r25, 0x4E	; 78
    3a2e:	a0 e0       	ldi	r26, 0x00	; 0
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	80 83       	st	Z, r24
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	a2 83       	std	Z+2, r26	; 0x02
    3a38:	b3 83       	std	Z+3, r27	; 0x03

	LCD_SendString("Welcome To SMART HOME");
    3a3a:	80 e6       	ldi	r24, 0x60	; 96
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    3a42:	fe 01       	movw	r30, r28
    3a44:	e7 50       	subi	r30, 0x07	; 7
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	90 e8       	ldi	r25, 0x80	; 128
    3a4c:	ab eb       	ldi	r26, 0xBB	; 187
    3a4e:	b4 e4       	ldi	r27, 0x44	; 68
    3a50:	80 83       	st	Z, r24
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	a2 83       	std	Z+2, r26	; 0x02
    3a56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a58:	8e 01       	movw	r16, r28
    3a5a:	0b 50       	subi	r16, 0x0B	; 11
    3a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e7 50       	subi	r30, 0x07	; 7
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	60 81       	ld	r22, Z
    3a66:	71 81       	ldd	r23, Z+1	; 0x01
    3a68:	82 81       	ldd	r24, Z+2	; 0x02
    3a6a:	93 81       	ldd	r25, Z+3	; 0x03
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	4a e7       	ldi	r20, 0x7A	; 122
    3a72:	55 e4       	ldi	r21, 0x45	; 69
    3a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	80 83       	st	Z, r24
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	a2 83       	std	Z+2, r26	; 0x02
    3a84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a86:	fe 01       	movw	r30, r28
    3a88:	eb 50       	subi	r30, 0x0B	; 11
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	60 81       	ld	r22, Z
    3a8e:	71 81       	ldd	r23, Z+1	; 0x01
    3a90:	82 81       	ldd	r24, Z+2	; 0x02
    3a92:	93 81       	ldd	r25, Z+3	; 0x03
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e8       	ldi	r20, 0x80	; 128
    3a9a:	5f e3       	ldi	r21, 0x3F	; 63
    3a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aa0:	88 23       	and	r24, r24
    3aa2:	44 f4       	brge	.+16     	; 0x3ab4 <main+0x176>
		__ticks = 1;
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	ed 50       	subi	r30, 0x0D	; 13
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	80 83       	st	Z, r24
    3ab2:	64 c0       	rjmp	.+200    	; 0x3b7c <main+0x23e>
	else if (__tmp > 65535)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	eb 50       	subi	r30, 0x0B	; 11
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	57 e4       	ldi	r21, 0x47	; 71
    3aca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	0c f0       	brlt	.+2      	; 0x3ad4 <main+0x196>
    3ad2:	43 c0       	rjmp	.+134    	; 0x3b5a <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e7 50       	subi	r30, 0x07	; 7
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e2       	ldi	r20, 0x20	; 32
    3ae8:	51 e4       	ldi	r21, 0x41	; 65
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	8e 01       	movw	r16, r28
    3af4:	0d 50       	subi	r16, 0x0D	; 13
    3af6:	1f 4f       	sbci	r17, 0xFF	; 255
    3af8:	bc 01       	movw	r22, r24
    3afa:	cd 01       	movw	r24, r26
    3afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	f8 01       	movw	r30, r16
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	80 83       	st	Z, r24
    3b0a:	1f c0       	rjmp	.+62     	; 0x3b4a <main+0x20c>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ef 50       	subi	r30, 0x0F	; 15
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 e9       	ldi	r24, 0x90	; 144
    3b14:	91 e0       	ldi	r25, 0x01	; 1
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	80 83       	st	Z, r24
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	ef 50       	subi	r30, 0x0F	; 15
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	80 81       	ld	r24, Z
    3b22:	91 81       	ldd	r25, Z+1	; 0x01
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <main+0x1e6>
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ef 50       	subi	r30, 0x0F	; 15
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	91 83       	std	Z+1, r25	; 0x01
    3b30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b32:	de 01       	movw	r26, r28
    3b34:	ad 50       	subi	r26, 0x0D	; 13
    3b36:	bf 4f       	sbci	r27, 0xFF	; 255
    3b38:	fe 01       	movw	r30, r28
    3b3a:	ed 50       	subi	r30, 0x0D	; 13
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	80 81       	ld	r24, Z
    3b40:	91 81       	ldd	r25, Z+1	; 0x01
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	11 96       	adiw	r26, 0x01	; 1
    3b46:	9c 93       	st	X, r25
    3b48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	ed 50       	subi	r30, 0x0D	; 13
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	00 97       	sbiw	r24, 0x00	; 0
    3b56:	d1 f6       	brne	.-76     	; 0x3b0c <main+0x1ce>
    3b58:	27 c0       	rjmp	.+78     	; 0x3ba8 <main+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5a:	8e 01       	movw	r16, r28
    3b5c:	0d 50       	subi	r16, 0x0D	; 13
    3b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b60:	fe 01       	movw	r30, r28
    3b62:	eb 50       	subi	r30, 0x0B	; 11
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	60 81       	ld	r22, Z
    3b68:	71 81       	ldd	r23, Z+1	; 0x01
    3b6a:	82 81       	ldd	r24, Z+2	; 0x02
    3b6c:	93 81       	ldd	r25, Z+3	; 0x03
    3b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	f8 01       	movw	r30, r16
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	80 83       	st	Z, r24
    3b7c:	de 01       	movw	r26, r28
    3b7e:	a1 51       	subi	r26, 0x11	; 17
    3b80:	bf 4f       	sbci	r27, 0xFF	; 255
    3b82:	fe 01       	movw	r30, r28
    3b84:	ed 50       	subi	r30, 0x0D	; 13
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	8d 93       	st	X+, r24
    3b8e:	9c 93       	st	X, r25
    3b90:	fe 01       	movw	r30, r28
    3b92:	e1 51       	subi	r30, 0x11	; 17
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 81       	ld	r24, Z
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <main+0x25c>
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	e1 51       	subi	r30, 0x11	; 17
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	91 83       	std	Z+1, r25	; 0x01
    3ba6:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCD_ClearDisplay();
    3ba8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    3bac:	fe 01       	movw	r30, r28
    3bae:	e5 51       	subi	r30, 0x15	; 21
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 e0       	ldi	r24, 0x00	; 0
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	a0 e0       	ldi	r26, 0x00	; 0
    3bb8:	b0 e4       	ldi	r27, 0x40	; 64
    3bba:	80 83       	st	Z, r24
    3bbc:	91 83       	std	Z+1, r25	; 0x01
    3bbe:	a2 83       	std	Z+2, r26	; 0x02
    3bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc2:	8e 01       	movw	r16, r28
    3bc4:	09 51       	subi	r16, 0x19	; 25
    3bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e5 51       	subi	r30, 0x15	; 21
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	82 81       	ldd	r24, Z+2	; 0x02
    3bd4:	93 81       	ldd	r25, Z+3	; 0x03
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	4a e7       	ldi	r20, 0x7A	; 122
    3bdc:	55 e4       	ldi	r21, 0x45	; 69
    3bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	f8 01       	movw	r30, r16
    3be8:	80 83       	st	Z, r24
    3bea:	91 83       	std	Z+1, r25	; 0x01
    3bec:	a2 83       	std	Z+2, r26	; 0x02
    3bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e9 51       	subi	r30, 0x19	; 25
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	60 81       	ld	r22, Z
    3bf8:	71 81       	ldd	r23, Z+1	; 0x01
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	93 81       	ldd	r25, Z+3	; 0x03
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e8       	ldi	r20, 0x80	; 128
    3c04:	5f e3       	ldi	r21, 0x3F	; 63
    3c06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c0a:	88 23       	and	r24, r24
    3c0c:	44 f4       	brge	.+16     	; 0x3c1e <main+0x2e0>
		__ticks = 1;
    3c0e:	fe 01       	movw	r30, r28
    3c10:	eb 51       	subi	r30, 0x1B	; 27
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	91 83       	std	Z+1, r25	; 0x01
    3c1a:	80 83       	st	Z, r24
    3c1c:	64 c0       	rjmp	.+200    	; 0x3ce6 <main+0x3a8>
	else if (__tmp > 65535)
    3c1e:	fe 01       	movw	r30, r28
    3c20:	e9 51       	subi	r30, 0x19	; 25
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	60 81       	ld	r22, Z
    3c26:	71 81       	ldd	r23, Z+1	; 0x01
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	3f ef       	ldi	r19, 0xFF	; 255
    3c30:	4f e7       	ldi	r20, 0x7F	; 127
    3c32:	57 e4       	ldi	r21, 0x47	; 71
    3c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c38:	18 16       	cp	r1, r24
    3c3a:	0c f0       	brlt	.+2      	; 0x3c3e <main+0x300>
    3c3c:	43 c0       	rjmp	.+134    	; 0x3cc4 <main+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e5 51       	subi	r30, 0x15	; 21
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	60 81       	ld	r22, Z
    3c46:	71 81       	ldd	r23, Z+1	; 0x01
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e2       	ldi	r20, 0x20	; 32
    3c52:	51 e4       	ldi	r21, 0x41	; 65
    3c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	8e 01       	movw	r16, r28
    3c5e:	0b 51       	subi	r16, 0x1B	; 27
    3c60:	1f 4f       	sbci	r17, 0xFF	; 255
    3c62:	bc 01       	movw	r22, r24
    3c64:	cd 01       	movw	r24, r26
    3c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	f8 01       	movw	r30, r16
    3c70:	91 83       	std	Z+1, r25	; 0x01
    3c72:	80 83       	st	Z, r24
    3c74:	1f c0       	rjmp	.+62     	; 0x3cb4 <main+0x376>
    3c76:	fe 01       	movw	r30, r28
    3c78:	ed 51       	subi	r30, 0x1D	; 29
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	80 e9       	ldi	r24, 0x90	; 144
    3c7e:	91 e0       	ldi	r25, 0x01	; 1
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
    3c84:	fe 01       	movw	r30, r28
    3c86:	ed 51       	subi	r30, 0x1D	; 29
    3c88:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8a:	80 81       	ld	r24, Z
    3c8c:	91 81       	ldd	r25, Z+1	; 0x01
    3c8e:	01 97       	sbiw	r24, 0x01	; 1
    3c90:	f1 f7       	brne	.-4      	; 0x3c8e <main+0x350>
    3c92:	fe 01       	movw	r30, r28
    3c94:	ed 51       	subi	r30, 0x1D	; 29
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	91 83       	std	Z+1, r25	; 0x01
    3c9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9c:	de 01       	movw	r26, r28
    3c9e:	ab 51       	subi	r26, 0x1B	; 27
    3ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	eb 51       	subi	r30, 0x1B	; 27
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	91 81       	ldd	r25, Z+1	; 0x01
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	11 96       	adiw	r26, 0x01	; 1
    3cb0:	9c 93       	st	X, r25
    3cb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	eb 51       	subi	r30, 0x1B	; 27
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	d1 f6       	brne	.-76     	; 0x3c76 <main+0x338>
    3cc2:	27 c0       	rjmp	.+78     	; 0x3d12 <main+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc4:	8e 01       	movw	r16, r28
    3cc6:	0b 51       	subi	r16, 0x1B	; 27
    3cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cca:	fe 01       	movw	r30, r28
    3ccc:	e9 51       	subi	r30, 0x19	; 25
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	f8 01       	movw	r30, r16
    3ce2:	91 83       	std	Z+1, r25	; 0x01
    3ce4:	80 83       	st	Z, r24
    3ce6:	de 01       	movw	r26, r28
    3ce8:	af 51       	subi	r26, 0x1F	; 31
    3cea:	bf 4f       	sbci	r27, 0xFF	; 255
    3cec:	fe 01       	movw	r30, r28
    3cee:	eb 51       	subi	r30, 0x1B	; 27
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	8d 93       	st	X+, r24
    3cf8:	9c 93       	st	X, r25
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	ef 51       	subi	r30, 0x1F	; 31
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 81       	ld	r24, Z
    3d02:	91 81       	ldd	r25, Z+1	; 0x01
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <main+0x3c6>
    3d08:	fe 01       	movw	r30, r28
    3d0a:	ef 51       	subi	r30, 0x1F	; 31
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_SendString("Enter Password");
    3d12:	86 e7       	ldi	r24, 0x76	; 118
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
	LCD_GoToXY(SecondLine, 0);
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
    3d22:	2b c0       	rjmp	.+86     	; 0x3d7a <main+0x43c>
	while(iterator<4)
	{
		do
		{
			passArr[iterator]=get_button_pressed();
    3d24:	fe 01       	movw	r30, r28
    3d26:	ec 5f       	subi	r30, 0xFC	; 252
    3d28:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2a:	80 81       	ld	r24, Z
    3d2c:	08 2f       	mov	r16, r24
    3d2e:	10 e0       	ldi	r17, 0x00	; 0
    3d30:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <get_button_pressed>
    3d34:	28 2f       	mov	r18, r24
    3d36:	ce 01       	movw	r24, r28
    3d38:	80 5f       	subi	r24, 0xF0	; 240
    3d3a:	9e 4f       	sbci	r25, 0xFE	; 254
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	e0 0f       	add	r30, r16
    3d40:	f1 1f       	adc	r31, r17
    3d42:	20 83       	st	Z, r18

		}while(passArr[iterator]==0xff);
    3d44:	fe 01       	movw	r30, r28
    3d46:	ec 5f       	subi	r30, 0xFC	; 252
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	80 81       	ld	r24, Z
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	ce 01       	movw	r24, r28
    3d52:	80 5f       	subi	r24, 0xF0	; 240
    3d54:	9e 4f       	sbci	r25, 0xFE	; 254
    3d56:	fc 01       	movw	r30, r24
    3d58:	e2 0f       	add	r30, r18
    3d5a:	f3 1f       	adc	r31, r19
    3d5c:	80 81       	ld	r24, Z
    3d5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d60:	09 f3       	breq	.-62     	; 0x3d24 <main+0x3e6>
		LCD_Write_data('*');
    3d62:	8a e2       	ldi	r24, 0x2A	; 42
    3d64:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
		iterator++;
    3d68:	de 01       	movw	r26, r28
    3d6a:	ac 5f       	subi	r26, 0xFC	; 252
    3d6c:	be 4f       	sbci	r27, 0xFE	; 254
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ec 5f       	subi	r30, 0xFC	; 252
    3d72:	fe 4f       	sbci	r31, 0xFE	; 254
    3d74:	80 81       	ld	r24, Z
    3d76:	8f 5f       	subi	r24, 0xFF	; 255
    3d78:	8c 93       	st	X, r24
	_delay_ms(1500);
	LCD_ClearDisplay();
	_delay_ms(2);
	LCD_SendString("Enter Password");
	LCD_GoToXY(SecondLine, 0);
	while(iterator<4)
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	ec 5f       	subi	r30, 0xFC	; 252
    3d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d80:	80 81       	ld	r24, Z
    3d82:	84 30       	cpi	r24, 0x04	; 4
    3d84:	78 f2       	brcs	.-98     	; 0x3d24 <main+0x3e6>
    3d86:	fe 01       	movw	r30, r28
    3d88:	e3 52       	subi	r30, 0x23	; 35
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	aa ef       	ldi	r26, 0xFA	; 250
    3d92:	b3 e4       	ldi	r27, 0x43	; 67
    3d94:	80 83       	st	Z, r24
    3d96:	91 83       	std	Z+1, r25	; 0x01
    3d98:	a2 83       	std	Z+2, r26	; 0x02
    3d9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9c:	8e 01       	movw	r16, r28
    3d9e:	07 52       	subi	r16, 0x27	; 39
    3da0:	1f 4f       	sbci	r17, 0xFF	; 255
    3da2:	fe 01       	movw	r30, r28
    3da4:	e3 52       	subi	r30, 0x23	; 35
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	60 81       	ld	r22, Z
    3daa:	71 81       	ldd	r23, Z+1	; 0x01
    3dac:	82 81       	ldd	r24, Z+2	; 0x02
    3dae:	93 81       	ldd	r25, Z+3	; 0x03
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	4a e7       	ldi	r20, 0x7A	; 122
    3db6:	55 e4       	ldi	r21, 0x45	; 69
    3db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	80 83       	st	Z, r24
    3dc4:	91 83       	std	Z+1, r25	; 0x01
    3dc6:	a2 83       	std	Z+2, r26	; 0x02
    3dc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dca:	fe 01       	movw	r30, r28
    3dcc:	e7 52       	subi	r30, 0x27	; 39
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	60 81       	ld	r22, Z
    3dd2:	71 81       	ldd	r23, Z+1	; 0x01
    3dd4:	82 81       	ldd	r24, Z+2	; 0x02
    3dd6:	93 81       	ldd	r25, Z+3	; 0x03
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	40 e8       	ldi	r20, 0x80	; 128
    3dde:	5f e3       	ldi	r21, 0x3F	; 63
    3de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de4:	88 23       	and	r24, r24
    3de6:	44 f4       	brge	.+16     	; 0x3df8 <main+0x4ba>
		__ticks = 1;
    3de8:	fe 01       	movw	r30, r28
    3dea:	e9 52       	subi	r30, 0x29	; 41
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	91 83       	std	Z+1, r25	; 0x01
    3df4:	80 83       	st	Z, r24
    3df6:	64 c0       	rjmp	.+200    	; 0x3ec0 <main+0x582>
	else if (__tmp > 65535)
    3df8:	fe 01       	movw	r30, r28
    3dfa:	e7 52       	subi	r30, 0x27	; 39
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	60 81       	ld	r22, Z
    3e00:	71 81       	ldd	r23, Z+1	; 0x01
    3e02:	82 81       	ldd	r24, Z+2	; 0x02
    3e04:	93 81       	ldd	r25, Z+3	; 0x03
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	3f ef       	ldi	r19, 0xFF	; 255
    3e0a:	4f e7       	ldi	r20, 0x7F	; 127
    3e0c:	57 e4       	ldi	r21, 0x47	; 71
    3e0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e12:	18 16       	cp	r1, r24
    3e14:	0c f0       	brlt	.+2      	; 0x3e18 <main+0x4da>
    3e16:	43 c0       	rjmp	.+134    	; 0x3e9e <main+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e3 52       	subi	r30, 0x23	; 35
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	60 81       	ld	r22, Z
    3e20:	71 81       	ldd	r23, Z+1	; 0x01
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e2       	ldi	r20, 0x20	; 32
    3e2c:	51 e4       	ldi	r21, 0x41	; 65
    3e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	8e 01       	movw	r16, r28
    3e38:	09 52       	subi	r16, 0x29	; 41
    3e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	f8 01       	movw	r30, r16
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	80 83       	st	Z, r24
    3e4e:	1f c0       	rjmp	.+62     	; 0x3e8e <main+0x550>
    3e50:	fe 01       	movw	r30, r28
    3e52:	eb 52       	subi	r30, 0x2B	; 43
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	80 e9       	ldi	r24, 0x90	; 144
    3e58:	91 e0       	ldi	r25, 0x01	; 1
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	80 83       	st	Z, r24
    3e5e:	fe 01       	movw	r30, r28
    3e60:	eb 52       	subi	r30, 0x2B	; 43
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	80 81       	ld	r24, Z
    3e66:	91 81       	ldd	r25, Z+1	; 0x01
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	f1 f7       	brne	.-4      	; 0x3e68 <main+0x52a>
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	eb 52       	subi	r30, 0x2B	; 43
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e76:	de 01       	movw	r26, r28
    3e78:	a9 52       	subi	r26, 0x29	; 41
    3e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e9 52       	subi	r30, 0x29	; 41
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	91 81       	ldd	r25, Z+1	; 0x01
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	11 96       	adiw	r26, 0x01	; 1
    3e8a:	9c 93       	st	X, r25
    3e8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e9 52       	subi	r30, 0x29	; 41
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	80 81       	ld	r24, Z
    3e96:	91 81       	ldd	r25, Z+1	; 0x01
    3e98:	00 97       	sbiw	r24, 0x00	; 0
    3e9a:	d1 f6       	brne	.-76     	; 0x3e50 <main+0x512>
    3e9c:	27 c0       	rjmp	.+78     	; 0x3eec <main+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9e:	8e 01       	movw	r16, r28
    3ea0:	09 52       	subi	r16, 0x29	; 41
    3ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e7 52       	subi	r30, 0x27	; 39
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	60 81       	ld	r22, Z
    3eac:	71 81       	ldd	r23, Z+1	; 0x01
    3eae:	82 81       	ldd	r24, Z+2	; 0x02
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	f8 01       	movw	r30, r16
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	80 83       	st	Z, r24
    3ec0:	de 01       	movw	r26, r28
    3ec2:	ad 52       	subi	r26, 0x2D	; 45
    3ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e9 52       	subi	r30, 0x29	; 41
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	80 81       	ld	r24, Z
    3ece:	91 81       	ldd	r25, Z+1	; 0x01
    3ed0:	8d 93       	st	X+, r24
    3ed2:	9c 93       	st	X, r25
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ed 52       	subi	r30, 0x2D	; 45
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	01 97       	sbiw	r24, 0x01	; 1
    3ee0:	f1 f7       	brne	.-4      	; 0x3ede <main+0x5a0>
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ed 52       	subi	r30, 0x2D	; 45
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	80 83       	st	Z, r24
		}while(passArr[iterator]==0xff);
		LCD_Write_data('*');
		iterator++;
	}
	_delay_ms(500);
	LCD_ClearDisplay();
    3eec:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e1 53       	subi	r30, 0x31	; 49
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	a0 e0       	ldi	r26, 0x00	; 0
    3efc:	b0 e4       	ldi	r27, 0x40	; 64
    3efe:	80 83       	st	Z, r24
    3f00:	91 83       	std	Z+1, r25	; 0x01
    3f02:	a2 83       	std	Z+2, r26	; 0x02
    3f04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f06:	8e 01       	movw	r16, r28
    3f08:	05 53       	subi	r16, 0x35	; 53
    3f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e1 53       	subi	r30, 0x31	; 49
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	60 81       	ld	r22, Z
    3f14:	71 81       	ldd	r23, Z+1	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	4a e7       	ldi	r20, 0x7A	; 122
    3f20:	55 e4       	ldi	r21, 0x45	; 69
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	f8 01       	movw	r30, r16
    3f2c:	80 83       	st	Z, r24
    3f2e:	91 83       	std	Z+1, r25	; 0x01
    3f30:	a2 83       	std	Z+2, r26	; 0x02
    3f32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f34:	fe 01       	movw	r30, r28
    3f36:	e5 53       	subi	r30, 0x35	; 53
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	60 81       	ld	r22, Z
    3f3c:	71 81       	ldd	r23, Z+1	; 0x01
    3f3e:	82 81       	ldd	r24, Z+2	; 0x02
    3f40:	93 81       	ldd	r25, Z+3	; 0x03
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	40 e8       	ldi	r20, 0x80	; 128
    3f48:	5f e3       	ldi	r21, 0x3F	; 63
    3f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f4e:	88 23       	and	r24, r24
    3f50:	44 f4       	brge	.+16     	; 0x3f62 <main+0x624>
		__ticks = 1;
    3f52:	fe 01       	movw	r30, r28
    3f54:	e7 53       	subi	r30, 0x37	; 55
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	91 83       	std	Z+1, r25	; 0x01
    3f5e:	80 83       	st	Z, r24
    3f60:	64 c0       	rjmp	.+200    	; 0x402a <main+0x6ec>
	else if (__tmp > 65535)
    3f62:	fe 01       	movw	r30, r28
    3f64:	e5 53       	subi	r30, 0x35	; 53
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	57 e4       	ldi	r21, 0x47	; 71
    3f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	0c f0       	brlt	.+2      	; 0x3f82 <main+0x644>
    3f80:	43 c0       	rjmp	.+134    	; 0x4008 <main+0x6ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f82:	fe 01       	movw	r30, r28
    3f84:	e1 53       	subi	r30, 0x31	; 49
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	60 81       	ld	r22, Z
    3f8a:	71 81       	ldd	r23, Z+1	; 0x01
    3f8c:	82 81       	ldd	r24, Z+2	; 0x02
    3f8e:	93 81       	ldd	r25, Z+3	; 0x03
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e2       	ldi	r20, 0x20	; 32
    3f96:	51 e4       	ldi	r21, 0x41	; 65
    3f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8e 01       	movw	r16, r28
    3fa2:	07 53       	subi	r16, 0x37	; 55
    3fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	f8 01       	movw	r30, r16
    3fb4:	91 83       	std	Z+1, r25	; 0x01
    3fb6:	80 83       	st	Z, r24
    3fb8:	1f c0       	rjmp	.+62     	; 0x3ff8 <main+0x6ba>
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e9 53       	subi	r30, 0x39	; 57
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 e9       	ldi	r24, 0x90	; 144
    3fc2:	91 e0       	ldi	r25, 0x01	; 1
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	80 83       	st	Z, r24
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e9 53       	subi	r30, 0x39	; 57
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 81       	ld	r24, Z
    3fd0:	91 81       	ldd	r25, Z+1	; 0x01
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <main+0x694>
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e9 53       	subi	r30, 0x39	; 57
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe0:	de 01       	movw	r26, r28
    3fe2:	a7 53       	subi	r26, 0x37	; 55
    3fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e7 53       	subi	r30, 0x37	; 55
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	80 81       	ld	r24, Z
    3fee:	91 81       	ldd	r25, Z+1	; 0x01
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	11 96       	adiw	r26, 0x01	; 1
    3ff4:	9c 93       	st	X, r25
    3ff6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	e7 53       	subi	r30, 0x37	; 55
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	80 81       	ld	r24, Z
    4000:	91 81       	ldd	r25, Z+1	; 0x01
    4002:	00 97       	sbiw	r24, 0x00	; 0
    4004:	d1 f6       	brne	.-76     	; 0x3fba <main+0x67c>
    4006:	27 c0       	rjmp	.+78     	; 0x4056 <main+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4008:	8e 01       	movw	r16, r28
    400a:	07 53       	subi	r16, 0x37	; 55
    400c:	1f 4f       	sbci	r17, 0xFF	; 255
    400e:	fe 01       	movw	r30, r28
    4010:	e5 53       	subi	r30, 0x35	; 53
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	f8 01       	movw	r30, r16
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
    402a:	de 01       	movw	r26, r28
    402c:	ab 53       	subi	r26, 0x3B	; 59
    402e:	bf 4f       	sbci	r27, 0xFF	; 255
    4030:	fe 01       	movw	r30, r28
    4032:	e7 53       	subi	r30, 0x37	; 55
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	80 81       	ld	r24, Z
    4038:	91 81       	ldd	r25, Z+1	; 0x01
    403a:	8d 93       	st	X+, r24
    403c:	9c 93       	st	X, r25
    403e:	fe 01       	movw	r30, r28
    4040:	eb 53       	subi	r30, 0x3B	; 59
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	80 81       	ld	r24, Z
    4046:	91 81       	ldd	r25, Z+1	; 0x01
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	f1 f7       	brne	.-4      	; 0x4048 <main+0x70a>
    404c:	fe 01       	movw	r30, r28
    404e:	eb 53       	subi	r30, 0x3B	; 59
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	80 83       	st	Z, r24
	_delay_ms(2);

	while(1)
	{
		passStatus = ComparePasswords(passReal,passArr);
    4056:	ce 01       	movw	r24, r28
    4058:	84 5f       	subi	r24, 0xF4	; 244
    405a:	9e 4f       	sbci	r25, 0xFE	; 254
    405c:	9e 01       	movw	r18, r28
    405e:	20 5f       	subi	r18, 0xF0	; 240
    4060:	3e 4f       	sbci	r19, 0xFE	; 254
    4062:	b9 01       	movw	r22, r18
    4064:	0e 94 82 2a 	call	0x5504	; 0x5504 <ComparePasswords>
    4068:	fe 01       	movw	r30, r28
    406a:	eb 5f       	subi	r30, 0xFB	; 251
    406c:	fe 4f       	sbci	r31, 0xFE	; 254
    406e:	80 83       	st	Z, r24
		if(passStatus==FALSE)
    4070:	fe 01       	movw	r30, r28
    4072:	eb 5f       	subi	r30, 0xFB	; 251
    4074:	fe 4f       	sbci	r31, 0xFE	; 254
    4076:	80 81       	ld	r24, Z
    4078:	88 23       	and	r24, r24
    407a:	09 f0       	breq	.+2      	; 0x407e <main+0x740>
    407c:	25 c3       	rjmp	.+1610   	; 0x46c8 <main+0xd8a>
		{
			trials++;
    407e:	de 01       	movw	r26, r28
    4080:	ae 5f       	subi	r26, 0xFE	; 254
    4082:	be 4f       	sbci	r27, 0xFE	; 254
    4084:	fe 01       	movw	r30, r28
    4086:	ee 5f       	subi	r30, 0xFE	; 254
    4088:	fe 4f       	sbci	r31, 0xFE	; 254
    408a:	80 81       	ld	r24, Z
    408c:	8f 5f       	subi	r24, 0xFF	; 255
    408e:	8c 93       	st	X, r24
			if(trials==3)
    4090:	fe 01       	movw	r30, r28
    4092:	ee 5f       	subi	r30, 0xFE	; 254
    4094:	fe 4f       	sbci	r31, 0xFE	; 254
    4096:	80 81       	ld	r24, Z
    4098:	83 30       	cpi	r24, 0x03	; 3
    409a:	11 f4       	brne	.+4      	; 0x40a0 <main+0x762>
    409c:	0c 94 74 2a 	jmp	0x54e8	; 0x54e8 <main+0x1baa>
			{
				break;
			}
			LCD_SendString("Wrong Password");
    40a0:	85 e8       	ldi	r24, 0x85	; 133
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 53       	subi	r30, 0x3F	; 63
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	aa e7       	ldi	r26, 0x7A	; 122
    40b4:	b4 e4       	ldi	r27, 0x44	; 68
    40b6:	80 83       	st	Z, r24
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	a2 83       	std	Z+2, r26	; 0x02
    40bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40be:	8e 01       	movw	r16, r28
    40c0:	03 54       	subi	r16, 0x43	; 67
    40c2:	1f 4f       	sbci	r17, 0xFF	; 255
    40c4:	fe 01       	movw	r30, r28
    40c6:	ef 53       	subi	r30, 0x3F	; 63
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	60 81       	ld	r22, Z
    40cc:	71 81       	ldd	r23, Z+1	; 0x01
    40ce:	82 81       	ldd	r24, Z+2	; 0x02
    40d0:	93 81       	ldd	r25, Z+3	; 0x03
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	4a e7       	ldi	r20, 0x7A	; 122
    40d8:	55 e4       	ldi	r21, 0x45	; 69
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	f8 01       	movw	r30, r16
    40e4:	80 83       	st	Z, r24
    40e6:	91 83       	std	Z+1, r25	; 0x01
    40e8:	a2 83       	std	Z+2, r26	; 0x02
    40ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40ec:	fe 01       	movw	r30, r28
    40ee:	e3 54       	subi	r30, 0x43	; 67
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	60 81       	ld	r22, Z
    40f4:	71 81       	ldd	r23, Z+1	; 0x01
    40f6:	82 81       	ldd	r24, Z+2	; 0x02
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e8       	ldi	r20, 0x80	; 128
    4100:	5f e3       	ldi	r21, 0x3F	; 63
    4102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4106:	88 23       	and	r24, r24
    4108:	44 f4       	brge	.+16     	; 0x411a <main+0x7dc>
		__ticks = 1;
    410a:	fe 01       	movw	r30, r28
    410c:	e5 54       	subi	r30, 0x45	; 69
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	91 83       	std	Z+1, r25	; 0x01
    4116:	80 83       	st	Z, r24
    4118:	64 c0       	rjmp	.+200    	; 0x41e2 <main+0x8a4>
	else if (__tmp > 65535)
    411a:	fe 01       	movw	r30, r28
    411c:	e3 54       	subi	r30, 0x43	; 67
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	60 81       	ld	r22, Z
    4122:	71 81       	ldd	r23, Z+1	; 0x01
    4124:	82 81       	ldd	r24, Z+2	; 0x02
    4126:	93 81       	ldd	r25, Z+3	; 0x03
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	3f ef       	ldi	r19, 0xFF	; 255
    412c:	4f e7       	ldi	r20, 0x7F	; 127
    412e:	57 e4       	ldi	r21, 0x47	; 71
    4130:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4134:	18 16       	cp	r1, r24
    4136:	0c f0       	brlt	.+2      	; 0x413a <main+0x7fc>
    4138:	43 c0       	rjmp	.+134    	; 0x41c0 <main+0x882>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413a:	fe 01       	movw	r30, r28
    413c:	ef 53       	subi	r30, 0x3F	; 63
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	60 81       	ld	r22, Z
    4142:	71 81       	ldd	r23, Z+1	; 0x01
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	93 81       	ldd	r25, Z+3	; 0x03
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e2       	ldi	r20, 0x20	; 32
    414e:	51 e4       	ldi	r21, 0x41	; 65
    4150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	8e 01       	movw	r16, r28
    415a:	05 54       	subi	r16, 0x45	; 69
    415c:	1f 4f       	sbci	r17, 0xFF	; 255
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	f8 01       	movw	r30, r16
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	80 83       	st	Z, r24
    4170:	1f c0       	rjmp	.+62     	; 0x41b0 <main+0x872>
    4172:	fe 01       	movw	r30, r28
    4174:	e7 54       	subi	r30, 0x47	; 71
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 e9       	ldi	r24, 0x90	; 144
    417a:	91 e0       	ldi	r25, 0x01	; 1
    417c:	91 83       	std	Z+1, r25	; 0x01
    417e:	80 83       	st	Z, r24
    4180:	fe 01       	movw	r30, r28
    4182:	e7 54       	subi	r30, 0x47	; 71
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	80 81       	ld	r24, Z
    4188:	91 81       	ldd	r25, Z+1	; 0x01
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <main+0x84c>
    418e:	fe 01       	movw	r30, r28
    4190:	e7 54       	subi	r30, 0x47	; 71
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4198:	de 01       	movw	r26, r28
    419a:	a5 54       	subi	r26, 0x45	; 69
    419c:	bf 4f       	sbci	r27, 0xFF	; 255
    419e:	fe 01       	movw	r30, r28
    41a0:	e5 54       	subi	r30, 0x45	; 69
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	80 81       	ld	r24, Z
    41a6:	91 81       	ldd	r25, Z+1	; 0x01
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	11 96       	adiw	r26, 0x01	; 1
    41ac:	9c 93       	st	X, r25
    41ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b0:	fe 01       	movw	r30, r28
    41b2:	e5 54       	subi	r30, 0x45	; 69
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	d1 f6       	brne	.-76     	; 0x4172 <main+0x834>
    41be:	27 c0       	rjmp	.+78     	; 0x420e <main+0x8d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c0:	8e 01       	movw	r16, r28
    41c2:	05 54       	subi	r16, 0x45	; 69
    41c4:	1f 4f       	sbci	r17, 0xFF	; 255
    41c6:	fe 01       	movw	r30, r28
    41c8:	e3 54       	subi	r30, 0x43	; 67
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	60 81       	ld	r22, Z
    41ce:	71 81       	ldd	r23, Z+1	; 0x01
    41d0:	82 81       	ldd	r24, Z+2	; 0x02
    41d2:	93 81       	ldd	r25, Z+3	; 0x03
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	f8 01       	movw	r30, r16
    41de:	91 83       	std	Z+1, r25	; 0x01
    41e0:	80 83       	st	Z, r24
    41e2:	de 01       	movw	r26, r28
    41e4:	a9 54       	subi	r26, 0x49	; 73
    41e6:	bf 4f       	sbci	r27, 0xFF	; 255
    41e8:	fe 01       	movw	r30, r28
    41ea:	e5 54       	subi	r30, 0x45	; 69
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	80 81       	ld	r24, Z
    41f0:	91 81       	ldd	r25, Z+1	; 0x01
    41f2:	8d 93       	st	X+, r24
    41f4:	9c 93       	st	X, r25
    41f6:	fe 01       	movw	r30, r28
    41f8:	e9 54       	subi	r30, 0x49	; 73
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	80 81       	ld	r24, Z
    41fe:	91 81       	ldd	r25, Z+1	; 0x01
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <main+0x8c2>
    4204:	fe 01       	movw	r30, r28
    4206:	e9 54       	subi	r30, 0x49	; 73
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_ClearDisplay();
    420e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    4212:	fe 01       	movw	r30, r28
    4214:	ed 54       	subi	r30, 0x4D	; 77
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	a0 e0       	ldi	r26, 0x00	; 0
    421e:	b0 e4       	ldi	r27, 0x40	; 64
    4220:	80 83       	st	Z, r24
    4222:	91 83       	std	Z+1, r25	; 0x01
    4224:	a2 83       	std	Z+2, r26	; 0x02
    4226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4228:	8e 01       	movw	r16, r28
    422a:	01 55       	subi	r16, 0x51	; 81
    422c:	1f 4f       	sbci	r17, 0xFF	; 255
    422e:	fe 01       	movw	r30, r28
    4230:	ed 54       	subi	r30, 0x4D	; 77
    4232:	ff 4f       	sbci	r31, 0xFF	; 255
    4234:	60 81       	ld	r22, Z
    4236:	71 81       	ldd	r23, Z+1	; 0x01
    4238:	82 81       	ldd	r24, Z+2	; 0x02
    423a:	93 81       	ldd	r25, Z+3	; 0x03
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	4a e7       	ldi	r20, 0x7A	; 122
    4242:	55 e4       	ldi	r21, 0x45	; 69
    4244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	f8 01       	movw	r30, r16
    424e:	80 83       	st	Z, r24
    4250:	91 83       	std	Z+1, r25	; 0x01
    4252:	a2 83       	std	Z+2, r26	; 0x02
    4254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4256:	fe 01       	movw	r30, r28
    4258:	e1 55       	subi	r30, 0x51	; 81
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	60 81       	ld	r22, Z
    425e:	71 81       	ldd	r23, Z+1	; 0x01
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	93 81       	ldd	r25, Z+3	; 0x03
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e8       	ldi	r20, 0x80	; 128
    426a:	5f e3       	ldi	r21, 0x3F	; 63
    426c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4270:	88 23       	and	r24, r24
    4272:	44 f4       	brge	.+16     	; 0x4284 <main+0x946>
		__ticks = 1;
    4274:	fe 01       	movw	r30, r28
    4276:	e3 55       	subi	r30, 0x53	; 83
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	91 83       	std	Z+1, r25	; 0x01
    4280:	80 83       	st	Z, r24
    4282:	64 c0       	rjmp	.+200    	; 0x434c <main+0xa0e>
	else if (__tmp > 65535)
    4284:	fe 01       	movw	r30, r28
    4286:	e1 55       	subi	r30, 0x51	; 81
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	60 81       	ld	r22, Z
    428c:	71 81       	ldd	r23, Z+1	; 0x01
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	93 81       	ldd	r25, Z+3	; 0x03
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	3f ef       	ldi	r19, 0xFF	; 255
    4296:	4f e7       	ldi	r20, 0x7F	; 127
    4298:	57 e4       	ldi	r21, 0x47	; 71
    429a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    429e:	18 16       	cp	r1, r24
    42a0:	0c f0       	brlt	.+2      	; 0x42a4 <main+0x966>
    42a2:	43 c0       	rjmp	.+134    	; 0x432a <main+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a4:	fe 01       	movw	r30, r28
    42a6:	ed 54       	subi	r30, 0x4D	; 77
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	60 81       	ld	r22, Z
    42ac:	71 81       	ldd	r23, Z+1	; 0x01
    42ae:	82 81       	ldd	r24, Z+2	; 0x02
    42b0:	93 81       	ldd	r25, Z+3	; 0x03
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e2       	ldi	r20, 0x20	; 32
    42b8:	51 e4       	ldi	r21, 0x41	; 65
    42ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	8e 01       	movw	r16, r28
    42c4:	03 55       	subi	r16, 0x53	; 83
    42c6:	1f 4f       	sbci	r17, 0xFF	; 255
    42c8:	bc 01       	movw	r22, r24
    42ca:	cd 01       	movw	r24, r26
    42cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	f8 01       	movw	r30, r16
    42d6:	91 83       	std	Z+1, r25	; 0x01
    42d8:	80 83       	st	Z, r24
    42da:	1f c0       	rjmp	.+62     	; 0x431a <main+0x9dc>
    42dc:	fe 01       	movw	r30, r28
    42de:	e5 55       	subi	r30, 0x55	; 85
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	80 e9       	ldi	r24, 0x90	; 144
    42e4:	91 e0       	ldi	r25, 0x01	; 1
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	80 83       	st	Z, r24
    42ea:	fe 01       	movw	r30, r28
    42ec:	e5 55       	subi	r30, 0x55	; 85
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	80 81       	ld	r24, Z
    42f2:	91 81       	ldd	r25, Z+1	; 0x01
    42f4:	01 97       	sbiw	r24, 0x01	; 1
    42f6:	f1 f7       	brne	.-4      	; 0x42f4 <main+0x9b6>
    42f8:	fe 01       	movw	r30, r28
    42fa:	e5 55       	subi	r30, 0x55	; 85
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	91 83       	std	Z+1, r25	; 0x01
    4300:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4302:	de 01       	movw	r26, r28
    4304:	a3 55       	subi	r26, 0x53	; 83
    4306:	bf 4f       	sbci	r27, 0xFF	; 255
    4308:	fe 01       	movw	r30, r28
    430a:	e3 55       	subi	r30, 0x53	; 83
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	80 81       	ld	r24, Z
    4310:	91 81       	ldd	r25, Z+1	; 0x01
    4312:	01 97       	sbiw	r24, 0x01	; 1
    4314:	11 96       	adiw	r26, 0x01	; 1
    4316:	9c 93       	st	X, r25
    4318:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    431a:	fe 01       	movw	r30, r28
    431c:	e3 55       	subi	r30, 0x53	; 83
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	80 81       	ld	r24, Z
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	00 97       	sbiw	r24, 0x00	; 0
    4326:	d1 f6       	brne	.-76     	; 0x42dc <main+0x99e>
    4328:	27 c0       	rjmp	.+78     	; 0x4378 <main+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    432a:	8e 01       	movw	r16, r28
    432c:	03 55       	subi	r16, 0x53	; 83
    432e:	1f 4f       	sbci	r17, 0xFF	; 255
    4330:	fe 01       	movw	r30, r28
    4332:	e1 55       	subi	r30, 0x51	; 81
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	60 81       	ld	r22, Z
    4338:	71 81       	ldd	r23, Z+1	; 0x01
    433a:	82 81       	ldd	r24, Z+2	; 0x02
    433c:	93 81       	ldd	r25, Z+3	; 0x03
    433e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	f8 01       	movw	r30, r16
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    434c:	de 01       	movw	r26, r28
    434e:	a7 55       	subi	r26, 0x57	; 87
    4350:	bf 4f       	sbci	r27, 0xFF	; 255
    4352:	fe 01       	movw	r30, r28
    4354:	e3 55       	subi	r30, 0x53	; 83
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	80 81       	ld	r24, Z
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	8d 93       	st	X+, r24
    435e:	9c 93       	st	X, r25
    4360:	fe 01       	movw	r30, r28
    4362:	e7 55       	subi	r30, 0x57	; 87
    4364:	ff 4f       	sbci	r31, 0xFF	; 255
    4366:	80 81       	ld	r24, Z
    4368:	91 81       	ldd	r25, Z+1	; 0x01
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	f1 f7       	brne	.-4      	; 0x436a <main+0xa2c>
    436e:	fe 01       	movw	r30, r28
    4370:	e7 55       	subi	r30, 0x57	; 87
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	91 83       	std	Z+1, r25	; 0x01
    4376:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("Enter Pass Again");
    4378:	84 e9       	ldi	r24, 0x94	; 148
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
			LCD_GoToXY(SecondLine, 3);
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	63 e0       	ldi	r22, 0x03	; 3
    4384:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
			iterator=0;
    4388:	fe 01       	movw	r30, r28
    438a:	ec 5f       	subi	r30, 0xFC	; 252
    438c:	fe 4f       	sbci	r31, 0xFE	; 254
    438e:	10 82       	st	Z, r1
    4390:	2b c0       	rjmp	.+86     	; 0x43e8 <main+0xaaa>
			while(iterator<4)
			{
				do
				{
					passArr[iterator]=get_button_pressed();
    4392:	fe 01       	movw	r30, r28
    4394:	ec 5f       	subi	r30, 0xFC	; 252
    4396:	fe 4f       	sbci	r31, 0xFE	; 254
    4398:	80 81       	ld	r24, Z
    439a:	08 2f       	mov	r16, r24
    439c:	10 e0       	ldi	r17, 0x00	; 0
    439e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <get_button_pressed>
    43a2:	28 2f       	mov	r18, r24
    43a4:	ce 01       	movw	r24, r28
    43a6:	80 5f       	subi	r24, 0xF0	; 240
    43a8:	9e 4f       	sbci	r25, 0xFE	; 254
    43aa:	fc 01       	movw	r30, r24
    43ac:	e0 0f       	add	r30, r16
    43ae:	f1 1f       	adc	r31, r17
    43b0:	20 83       	st	Z, r18
				}while(passArr[iterator]==0xff);
    43b2:	fe 01       	movw	r30, r28
    43b4:	ec 5f       	subi	r30, 0xFC	; 252
    43b6:	fe 4f       	sbci	r31, 0xFE	; 254
    43b8:	80 81       	ld	r24, Z
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	ce 01       	movw	r24, r28
    43c0:	80 5f       	subi	r24, 0xF0	; 240
    43c2:	9e 4f       	sbci	r25, 0xFE	; 254
    43c4:	fc 01       	movw	r30, r24
    43c6:	e2 0f       	add	r30, r18
    43c8:	f3 1f       	adc	r31, r19
    43ca:	80 81       	ld	r24, Z
    43cc:	8f 3f       	cpi	r24, 0xFF	; 255
    43ce:	09 f3       	breq	.-62     	; 0x4392 <main+0xa54>
				LCD_Write_data('*');
    43d0:	8a e2       	ldi	r24, 0x2A	; 42
    43d2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_Write_data>
				iterator++;
    43d6:	de 01       	movw	r26, r28
    43d8:	ac 5f       	subi	r26, 0xFC	; 252
    43da:	be 4f       	sbci	r27, 0xFE	; 254
    43dc:	fe 01       	movw	r30, r28
    43de:	ec 5f       	subi	r30, 0xFC	; 252
    43e0:	fe 4f       	sbci	r31, 0xFE	; 254
    43e2:	80 81       	ld	r24, Z
    43e4:	8f 5f       	subi	r24, 0xFF	; 255
    43e6:	8c 93       	st	X, r24
			LCD_ClearDisplay();
			_delay_ms(2);
			LCD_SendString("Enter Pass Again");
			LCD_GoToXY(SecondLine, 3);
			iterator=0;
			while(iterator<4)
    43e8:	fe 01       	movw	r30, r28
    43ea:	ec 5f       	subi	r30, 0xFC	; 252
    43ec:	fe 4f       	sbci	r31, 0xFE	; 254
    43ee:	80 81       	ld	r24, Z
    43f0:	84 30       	cpi	r24, 0x04	; 4
    43f2:	78 f2       	brcs	.-98     	; 0x4392 <main+0xa54>
    43f4:	fe 01       	movw	r30, r28
    43f6:	eb 55       	subi	r30, 0x5B	; 91
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	aa e7       	ldi	r26, 0x7A	; 122
    4400:	b4 e4       	ldi	r27, 0x44	; 68
    4402:	80 83       	st	Z, r24
    4404:	91 83       	std	Z+1, r25	; 0x01
    4406:	a2 83       	std	Z+2, r26	; 0x02
    4408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    440a:	8e 01       	movw	r16, r28
    440c:	0f 55       	subi	r16, 0x5F	; 95
    440e:	1f 4f       	sbci	r17, 0xFF	; 255
    4410:	fe 01       	movw	r30, r28
    4412:	eb 55       	subi	r30, 0x5B	; 91
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	60 81       	ld	r22, Z
    4418:	71 81       	ldd	r23, Z+1	; 0x01
    441a:	82 81       	ldd	r24, Z+2	; 0x02
    441c:	93 81       	ldd	r25, Z+3	; 0x03
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	4a e7       	ldi	r20, 0x7A	; 122
    4424:	55 e4       	ldi	r21, 0x45	; 69
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	f8 01       	movw	r30, r16
    4430:	80 83       	st	Z, r24
    4432:	91 83       	std	Z+1, r25	; 0x01
    4434:	a2 83       	std	Z+2, r26	; 0x02
    4436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4438:	fe 01       	movw	r30, r28
    443a:	ef 55       	subi	r30, 0x5F	; 95
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	60 81       	ld	r22, Z
    4440:	71 81       	ldd	r23, Z+1	; 0x01
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	93 81       	ldd	r25, Z+3	; 0x03
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e8       	ldi	r20, 0x80	; 128
    444c:	5f e3       	ldi	r21, 0x3F	; 63
    444e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4452:	88 23       	and	r24, r24
    4454:	44 f4       	brge	.+16     	; 0x4466 <main+0xb28>
		__ticks = 1;
    4456:	fe 01       	movw	r30, r28
    4458:	e1 56       	subi	r30, 0x61	; 97
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	80 83       	st	Z, r24
    4464:	64 c0       	rjmp	.+200    	; 0x452e <main+0xbf0>
	else if (__tmp > 65535)
    4466:	fe 01       	movw	r30, r28
    4468:	ef 55       	subi	r30, 0x5F	; 95
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	60 81       	ld	r22, Z
    446e:	71 81       	ldd	r23, Z+1	; 0x01
    4470:	82 81       	ldd	r24, Z+2	; 0x02
    4472:	93 81       	ldd	r25, Z+3	; 0x03
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	3f ef       	ldi	r19, 0xFF	; 255
    4478:	4f e7       	ldi	r20, 0x7F	; 127
    447a:	57 e4       	ldi	r21, 0x47	; 71
    447c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4480:	18 16       	cp	r1, r24
    4482:	0c f0       	brlt	.+2      	; 0x4486 <main+0xb48>
    4484:	43 c0       	rjmp	.+134    	; 0x450c <main+0xbce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4486:	fe 01       	movw	r30, r28
    4488:	eb 55       	subi	r30, 0x5B	; 91
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	60 81       	ld	r22, Z
    448e:	71 81       	ldd	r23, Z+1	; 0x01
    4490:	82 81       	ldd	r24, Z+2	; 0x02
    4492:	93 81       	ldd	r25, Z+3	; 0x03
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e2       	ldi	r20, 0x20	; 32
    449a:	51 e4       	ldi	r21, 0x41	; 65
    449c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	8e 01       	movw	r16, r28
    44a6:	01 56       	subi	r16, 0x61	; 97
    44a8:	1f 4f       	sbci	r17, 0xFF	; 255
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	f8 01       	movw	r30, r16
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	80 83       	st	Z, r24
    44bc:	1f c0       	rjmp	.+62     	; 0x44fc <main+0xbbe>
    44be:	fe 01       	movw	r30, r28
    44c0:	e3 56       	subi	r30, 0x63	; 99
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	80 e9       	ldi	r24, 0x90	; 144
    44c6:	91 e0       	ldi	r25, 0x01	; 1
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
    44cc:	fe 01       	movw	r30, r28
    44ce:	e3 56       	subi	r30, 0x63	; 99
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <main+0xb98>
    44da:	fe 01       	movw	r30, r28
    44dc:	e3 56       	subi	r30, 0x63	; 99
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44e4:	de 01       	movw	r26, r28
    44e6:	a1 56       	subi	r26, 0x61	; 97
    44e8:	bf 4f       	sbci	r27, 0xFF	; 255
    44ea:	fe 01       	movw	r30, r28
    44ec:	e1 56       	subi	r30, 0x61	; 97
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	80 81       	ld	r24, Z
    44f2:	91 81       	ldd	r25, Z+1	; 0x01
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	11 96       	adiw	r26, 0x01	; 1
    44f8:	9c 93       	st	X, r25
    44fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44fc:	fe 01       	movw	r30, r28
    44fe:	e1 56       	subi	r30, 0x61	; 97
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	91 81       	ldd	r25, Z+1	; 0x01
    4506:	00 97       	sbiw	r24, 0x00	; 0
    4508:	d1 f6       	brne	.-76     	; 0x44be <main+0xb80>
    450a:	27 c0       	rjmp	.+78     	; 0x455a <main+0xc1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450c:	8e 01       	movw	r16, r28
    450e:	01 56       	subi	r16, 0x61	; 97
    4510:	1f 4f       	sbci	r17, 0xFF	; 255
    4512:	fe 01       	movw	r30, r28
    4514:	ef 55       	subi	r30, 0x5F	; 95
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	60 81       	ld	r22, Z
    451a:	71 81       	ldd	r23, Z+1	; 0x01
    451c:	82 81       	ldd	r24, Z+2	; 0x02
    451e:	93 81       	ldd	r25, Z+3	; 0x03
    4520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	f8 01       	movw	r30, r16
    452a:	91 83       	std	Z+1, r25	; 0x01
    452c:	80 83       	st	Z, r24
    452e:	de 01       	movw	r26, r28
    4530:	a5 56       	subi	r26, 0x65	; 101
    4532:	bf 4f       	sbci	r27, 0xFF	; 255
    4534:	fe 01       	movw	r30, r28
    4536:	e1 56       	subi	r30, 0x61	; 97
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	80 81       	ld	r24, Z
    453c:	91 81       	ldd	r25, Z+1	; 0x01
    453e:	8d 93       	st	X+, r24
    4540:	9c 93       	st	X, r25
    4542:	fe 01       	movw	r30, r28
    4544:	e5 56       	subi	r30, 0x65	; 101
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	80 81       	ld	r24, Z
    454a:	91 81       	ldd	r25, Z+1	; 0x01
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <main+0xc0e>
    4550:	fe 01       	movw	r30, r28
    4552:	e5 56       	subi	r30, 0x65	; 101
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	80 83       	st	Z, r24
				}while(passArr[iterator]==0xff);
				LCD_Write_data('*');
				iterator++;
			}
			_delay_ms(1000);
			LCD_ClearDisplay();
    455a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    455e:	fe 01       	movw	r30, r28
    4560:	e9 56       	subi	r30, 0x69	; 105
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	80 e0       	ldi	r24, 0x00	; 0
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	a0 e0       	ldi	r26, 0x00	; 0
    456a:	b0 e4       	ldi	r27, 0x40	; 64
    456c:	80 83       	st	Z, r24
    456e:	91 83       	std	Z+1, r25	; 0x01
    4570:	a2 83       	std	Z+2, r26	; 0x02
    4572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4574:	8e 01       	movw	r16, r28
    4576:	0d 56       	subi	r16, 0x6D	; 109
    4578:	1f 4f       	sbci	r17, 0xFF	; 255
    457a:	fe 01       	movw	r30, r28
    457c:	e9 56       	subi	r30, 0x69	; 105
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	60 81       	ld	r22, Z
    4582:	71 81       	ldd	r23, Z+1	; 0x01
    4584:	82 81       	ldd	r24, Z+2	; 0x02
    4586:	93 81       	ldd	r25, Z+3	; 0x03
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	4a e7       	ldi	r20, 0x7A	; 122
    458e:	55 e4       	ldi	r21, 0x45	; 69
    4590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	f8 01       	movw	r30, r16
    459a:	80 83       	st	Z, r24
    459c:	91 83       	std	Z+1, r25	; 0x01
    459e:	a2 83       	std	Z+2, r26	; 0x02
    45a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45a2:	fe 01       	movw	r30, r28
    45a4:	ed 56       	subi	r30, 0x6D	; 109
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	60 81       	ld	r22, Z
    45aa:	71 81       	ldd	r23, Z+1	; 0x01
    45ac:	82 81       	ldd	r24, Z+2	; 0x02
    45ae:	93 81       	ldd	r25, Z+3	; 0x03
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e8       	ldi	r20, 0x80	; 128
    45b6:	5f e3       	ldi	r21, 0x3F	; 63
    45b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45bc:	88 23       	and	r24, r24
    45be:	44 f4       	brge	.+16     	; 0x45d0 <main+0xc92>
		__ticks = 1;
    45c0:	fe 01       	movw	r30, r28
    45c2:	ef 56       	subi	r30, 0x6F	; 111
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	80 83       	st	Z, r24
    45ce:	64 c0       	rjmp	.+200    	; 0x4698 <main+0xd5a>
	else if (__tmp > 65535)
    45d0:	fe 01       	movw	r30, r28
    45d2:	ed 56       	subi	r30, 0x6D	; 109
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	60 81       	ld	r22, Z
    45d8:	71 81       	ldd	r23, Z+1	; 0x01
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	3f ef       	ldi	r19, 0xFF	; 255
    45e2:	4f e7       	ldi	r20, 0x7F	; 127
    45e4:	57 e4       	ldi	r21, 0x47	; 71
    45e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45ea:	18 16       	cp	r1, r24
    45ec:	0c f0       	brlt	.+2      	; 0x45f0 <main+0xcb2>
    45ee:	43 c0       	rjmp	.+134    	; 0x4676 <main+0xd38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45f0:	fe 01       	movw	r30, r28
    45f2:	e9 56       	subi	r30, 0x69	; 105
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	60 81       	ld	r22, Z
    45f8:	71 81       	ldd	r23, Z+1	; 0x01
    45fa:	82 81       	ldd	r24, Z+2	; 0x02
    45fc:	93 81       	ldd	r25, Z+3	; 0x03
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	40 e2       	ldi	r20, 0x20	; 32
    4604:	51 e4       	ldi	r21, 0x41	; 65
    4606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    460a:	dc 01       	movw	r26, r24
    460c:	cb 01       	movw	r24, r22
    460e:	8e 01       	movw	r16, r28
    4610:	0f 56       	subi	r16, 0x6F	; 111
    4612:	1f 4f       	sbci	r17, 0xFF	; 255
    4614:	bc 01       	movw	r22, r24
    4616:	cd 01       	movw	r24, r26
    4618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	f8 01       	movw	r30, r16
    4622:	91 83       	std	Z+1, r25	; 0x01
    4624:	80 83       	st	Z, r24
    4626:	1f c0       	rjmp	.+62     	; 0x4666 <main+0xd28>
    4628:	fe 01       	movw	r30, r28
    462a:	e1 57       	subi	r30, 0x71	; 113
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	80 e9       	ldi	r24, 0x90	; 144
    4630:	91 e0       	ldi	r25, 0x01	; 1
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	fe 01       	movw	r30, r28
    4638:	e1 57       	subi	r30, 0x71	; 113
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	80 81       	ld	r24, Z
    463e:	91 81       	ldd	r25, Z+1	; 0x01
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	f1 f7       	brne	.-4      	; 0x4640 <main+0xd02>
    4644:	fe 01       	movw	r30, r28
    4646:	e1 57       	subi	r30, 0x71	; 113
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	91 83       	std	Z+1, r25	; 0x01
    464c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    464e:	de 01       	movw	r26, r28
    4650:	af 56       	subi	r26, 0x6F	; 111
    4652:	bf 4f       	sbci	r27, 0xFF	; 255
    4654:	fe 01       	movw	r30, r28
    4656:	ef 56       	subi	r30, 0x6F	; 111
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	80 81       	ld	r24, Z
    465c:	91 81       	ldd	r25, Z+1	; 0x01
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	11 96       	adiw	r26, 0x01	; 1
    4662:	9c 93       	st	X, r25
    4664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4666:	fe 01       	movw	r30, r28
    4668:	ef 56       	subi	r30, 0x6F	; 111
    466a:	ff 4f       	sbci	r31, 0xFF	; 255
    466c:	80 81       	ld	r24, Z
    466e:	91 81       	ldd	r25, Z+1	; 0x01
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	d1 f6       	brne	.-76     	; 0x4628 <main+0xcea>
    4674:	f0 cc       	rjmp	.-1568   	; 0x4056 <main+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4676:	8e 01       	movw	r16, r28
    4678:	0f 56       	subi	r16, 0x6F	; 111
    467a:	1f 4f       	sbci	r17, 0xFF	; 255
    467c:	fe 01       	movw	r30, r28
    467e:	ed 56       	subi	r30, 0x6D	; 109
    4680:	ff 4f       	sbci	r31, 0xFF	; 255
    4682:	60 81       	ld	r22, Z
    4684:	71 81       	ldd	r23, Z+1	; 0x01
    4686:	82 81       	ldd	r24, Z+2	; 0x02
    4688:	93 81       	ldd	r25, Z+3	; 0x03
    468a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	f8 01       	movw	r30, r16
    4694:	91 83       	std	Z+1, r25	; 0x01
    4696:	80 83       	st	Z, r24
    4698:	de 01       	movw	r26, r28
    469a:	a3 57       	subi	r26, 0x73	; 115
    469c:	bf 4f       	sbci	r27, 0xFF	; 255
    469e:	fe 01       	movw	r30, r28
    46a0:	ef 56       	subi	r30, 0x6F	; 111
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	80 81       	ld	r24, Z
    46a6:	91 81       	ldd	r25, Z+1	; 0x01
    46a8:	11 96       	adiw	r26, 0x01	; 1
    46aa:	9c 93       	st	X, r25
    46ac:	8e 93       	st	-X, r24
    46ae:	fe 01       	movw	r30, r28
    46b0:	e3 57       	subi	r30, 0x73	; 115
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	80 81       	ld	r24, Z
    46b6:	91 81       	ldd	r25, Z+1	; 0x01
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <main+0xd7a>
    46bc:	fe 01       	movw	r30, r28
    46be:	e3 57       	subi	r30, 0x73	; 115
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	91 83       	std	Z+1, r25	; 0x01
    46c4:	80 83       	st	Z, r24
    46c6:	c7 cc       	rjmp	.-1650   	; 0x4056 <main+0x718>
			_delay_ms(2);

		}
		else if(passStatus==TRUE)
    46c8:	fe 01       	movw	r30, r28
    46ca:	eb 5f       	subi	r30, 0xFB	; 251
    46cc:	fe 4f       	sbci	r31, 0xFE	; 254
    46ce:	80 81       	ld	r24, Z
    46d0:	81 30       	cpi	r24, 0x01	; 1
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <main+0xd98>
    46d4:	c0 cc       	rjmp	.-1664   	; 0x4056 <main+0x718>
		{
		/*control servo motor using potentiometer*/
			LCD_SendString("Options:");
    46d6:	85 ea       	ldi	r24, 0xA5	; 165
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
			LCD_SendString("1-Display Temp");
    46e6:	8e ea       	ldi	r24, 0xAE	; 174
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    46ee:	fe 01       	movw	r30, r28
    46f0:	e7 57       	subi	r30, 0x77	; 119
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e8       	ldi	r25, 0x80	; 128
    46f8:	ab eb       	ldi	r26, 0xBB	; 187
    46fa:	b4 e4       	ldi	r27, 0x44	; 68
    46fc:	80 83       	st	Z, r24
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	a2 83       	std	Z+2, r26	; 0x02
    4702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4704:	8e 01       	movw	r16, r28
    4706:	0b 57       	subi	r16, 0x7B	; 123
    4708:	1f 4f       	sbci	r17, 0xFF	; 255
    470a:	fe 01       	movw	r30, r28
    470c:	e7 57       	subi	r30, 0x77	; 119
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	60 81       	ld	r22, Z
    4712:	71 81       	ldd	r23, Z+1	; 0x01
    4714:	82 81       	ldd	r24, Z+2	; 0x02
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	4a e7       	ldi	r20, 0x7A	; 122
    471e:	55 e4       	ldi	r21, 0x45	; 69
    4720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	f8 01       	movw	r30, r16
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4732:	fe 01       	movw	r30, r28
    4734:	eb 57       	subi	r30, 0x7B	; 123
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	60 81       	ld	r22, Z
    473a:	71 81       	ldd	r23, Z+1	; 0x01
    473c:	82 81       	ldd	r24, Z+2	; 0x02
    473e:	93 81       	ldd	r25, Z+3	; 0x03
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	40 e8       	ldi	r20, 0x80	; 128
    4746:	5f e3       	ldi	r21, 0x3F	; 63
    4748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    474c:	88 23       	and	r24, r24
    474e:	44 f4       	brge	.+16     	; 0x4760 <main+0xe22>
		__ticks = 1;
    4750:	fe 01       	movw	r30, r28
    4752:	ed 57       	subi	r30, 0x7D	; 125
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	80 83       	st	Z, r24
    475e:	64 c0       	rjmp	.+200    	; 0x4828 <main+0xeea>
	else if (__tmp > 65535)
    4760:	fe 01       	movw	r30, r28
    4762:	eb 57       	subi	r30, 0x7B	; 123
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	60 81       	ld	r22, Z
    4768:	71 81       	ldd	r23, Z+1	; 0x01
    476a:	82 81       	ldd	r24, Z+2	; 0x02
    476c:	93 81       	ldd	r25, Z+3	; 0x03
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	3f ef       	ldi	r19, 0xFF	; 255
    4772:	4f e7       	ldi	r20, 0x7F	; 127
    4774:	57 e4       	ldi	r21, 0x47	; 71
    4776:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    477a:	18 16       	cp	r1, r24
    477c:	0c f0       	brlt	.+2      	; 0x4780 <main+0xe42>
    477e:	43 c0       	rjmp	.+134    	; 0x4806 <main+0xec8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4780:	fe 01       	movw	r30, r28
    4782:	e7 57       	subi	r30, 0x77	; 119
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	60 81       	ld	r22, Z
    4788:	71 81       	ldd	r23, Z+1	; 0x01
    478a:	82 81       	ldd	r24, Z+2	; 0x02
    478c:	93 81       	ldd	r25, Z+3	; 0x03
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e2       	ldi	r20, 0x20	; 32
    4794:	51 e4       	ldi	r21, 0x41	; 65
    4796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	8e 01       	movw	r16, r28
    47a0:	0d 57       	subi	r16, 0x7D	; 125
    47a2:	1f 4f       	sbci	r17, 0xFF	; 255
    47a4:	bc 01       	movw	r22, r24
    47a6:	cd 01       	movw	r24, r26
    47a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	f8 01       	movw	r30, r16
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	80 83       	st	Z, r24
    47b6:	1f c0       	rjmp	.+62     	; 0x47f6 <main+0xeb8>
    47b8:	fe 01       	movw	r30, r28
    47ba:	ef 57       	subi	r30, 0x7F	; 127
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 e9       	ldi	r24, 0x90	; 144
    47c0:	91 e0       	ldi	r25, 0x01	; 1
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	80 83       	st	Z, r24
    47c6:	fe 01       	movw	r30, r28
    47c8:	ef 57       	subi	r30, 0x7F	; 127
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	80 81       	ld	r24, Z
    47ce:	91 81       	ldd	r25, Z+1	; 0x01
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	f1 f7       	brne	.-4      	; 0x47d0 <main+0xe92>
    47d4:	fe 01       	movw	r30, r28
    47d6:	ef 57       	subi	r30, 0x7F	; 127
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47de:	de 01       	movw	r26, r28
    47e0:	ad 57       	subi	r26, 0x7D	; 125
    47e2:	bf 4f       	sbci	r27, 0xFF	; 255
    47e4:	fe 01       	movw	r30, r28
    47e6:	ed 57       	subi	r30, 0x7D	; 125
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	80 81       	ld	r24, Z
    47ec:	91 81       	ldd	r25, Z+1	; 0x01
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	11 96       	adiw	r26, 0x01	; 1
    47f2:	9c 93       	st	X, r25
    47f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f6:	fe 01       	movw	r30, r28
    47f8:	ed 57       	subi	r30, 0x7D	; 125
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	80 81       	ld	r24, Z
    47fe:	91 81       	ldd	r25, Z+1	; 0x01
    4800:	00 97       	sbiw	r24, 0x00	; 0
    4802:	d1 f6       	brne	.-76     	; 0x47b8 <main+0xe7a>
    4804:	27 c0       	rjmp	.+78     	; 0x4854 <main+0xf16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4806:	8e 01       	movw	r16, r28
    4808:	0d 57       	subi	r16, 0x7D	; 125
    480a:	1f 4f       	sbci	r17, 0xFF	; 255
    480c:	fe 01       	movw	r30, r28
    480e:	eb 57       	subi	r30, 0x7B	; 123
    4810:	ff 4f       	sbci	r31, 0xFF	; 255
    4812:	60 81       	ld	r22, Z
    4814:	71 81       	ldd	r23, Z+1	; 0x01
    4816:	82 81       	ldd	r24, Z+2	; 0x02
    4818:	93 81       	ldd	r25, Z+3	; 0x03
    481a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	f8 01       	movw	r30, r16
    4824:	91 83       	std	Z+1, r25	; 0x01
    4826:	80 83       	st	Z, r24
    4828:	de 01       	movw	r26, r28
    482a:	a1 58       	subi	r26, 0x81	; 129
    482c:	bf 4f       	sbci	r27, 0xFF	; 255
    482e:	fe 01       	movw	r30, r28
    4830:	ed 57       	subi	r30, 0x7D	; 125
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	80 81       	ld	r24, Z
    4836:	91 81       	ldd	r25, Z+1	; 0x01
    4838:	8d 93       	st	X+, r24
    483a:	9c 93       	st	X, r25
    483c:	fe 01       	movw	r30, r28
    483e:	e1 58       	subi	r30, 0x81	; 129
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	80 81       	ld	r24, Z
    4844:	91 81       	ldd	r25, Z+1	; 0x01
    4846:	01 97       	sbiw	r24, 0x01	; 1
    4848:	f1 f7       	brne	.-4      	; 0x4846 <main+0xf08>
    484a:	fe 01       	movw	r30, r28
    484c:	e1 58       	subi	r30, 0x81	; 129
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	91 83       	std	Z+1, r25	; 0x01
    4852:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    4854:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    4858:	fe 01       	movw	r30, r28
    485a:	e5 58       	subi	r30, 0x85	; 133
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	a0 e0       	ldi	r26, 0x00	; 0
    4864:	b0 e4       	ldi	r27, 0x40	; 64
    4866:	80 83       	st	Z, r24
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	a2 83       	std	Z+2, r26	; 0x02
    486c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    486e:	8e 01       	movw	r16, r28
    4870:	09 58       	subi	r16, 0x89	; 137
    4872:	1f 4f       	sbci	r17, 0xFF	; 255
    4874:	fe 01       	movw	r30, r28
    4876:	e5 58       	subi	r30, 0x85	; 133
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	60 81       	ld	r22, Z
    487c:	71 81       	ldd	r23, Z+1	; 0x01
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	4a e7       	ldi	r20, 0x7A	; 122
    4888:	55 e4       	ldi	r21, 0x45	; 69
    488a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	f8 01       	movw	r30, r16
    4894:	80 83       	st	Z, r24
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	a2 83       	std	Z+2, r26	; 0x02
    489a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    489c:	fe 01       	movw	r30, r28
    489e:	e9 58       	subi	r30, 0x89	; 137
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	60 81       	ld	r22, Z
    48a4:	71 81       	ldd	r23, Z+1	; 0x01
    48a6:	82 81       	ldd	r24, Z+2	; 0x02
    48a8:	93 81       	ldd	r25, Z+3	; 0x03
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	40 e8       	ldi	r20, 0x80	; 128
    48b0:	5f e3       	ldi	r21, 0x3F	; 63
    48b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48b6:	88 23       	and	r24, r24
    48b8:	44 f4       	brge	.+16     	; 0x48ca <main+0xf8c>
		__ticks = 1;
    48ba:	fe 01       	movw	r30, r28
    48bc:	eb 58       	subi	r30, 0x8B	; 139
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	80 83       	st	Z, r24
    48c8:	64 c0       	rjmp	.+200    	; 0x4992 <main+0x1054>
	else if (__tmp > 65535)
    48ca:	fe 01       	movw	r30, r28
    48cc:	e9 58       	subi	r30, 0x89	; 137
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	3f ef       	ldi	r19, 0xFF	; 255
    48dc:	4f e7       	ldi	r20, 0x7F	; 127
    48de:	57 e4       	ldi	r21, 0x47	; 71
    48e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48e4:	18 16       	cp	r1, r24
    48e6:	0c f0       	brlt	.+2      	; 0x48ea <main+0xfac>
    48e8:	43 c0       	rjmp	.+134    	; 0x4970 <main+0x1032>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ea:	fe 01       	movw	r30, r28
    48ec:	e5 58       	subi	r30, 0x85	; 133
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	60 81       	ld	r22, Z
    48f2:	71 81       	ldd	r23, Z+1	; 0x01
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	93 81       	ldd	r25, Z+3	; 0x03
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e2       	ldi	r20, 0x20	; 32
    48fe:	51 e4       	ldi	r21, 0x41	; 65
    4900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	8e 01       	movw	r16, r28
    490a:	0b 58       	subi	r16, 0x8B	; 139
    490c:	1f 4f       	sbci	r17, 0xFF	; 255
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	f8 01       	movw	r30, r16
    491c:	91 83       	std	Z+1, r25	; 0x01
    491e:	80 83       	st	Z, r24
    4920:	1f c0       	rjmp	.+62     	; 0x4960 <main+0x1022>
    4922:	fe 01       	movw	r30, r28
    4924:	ed 58       	subi	r30, 0x8D	; 141
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 e9       	ldi	r24, 0x90	; 144
    492a:	91 e0       	ldi	r25, 0x01	; 1
    492c:	91 83       	std	Z+1, r25	; 0x01
    492e:	80 83       	st	Z, r24
    4930:	fe 01       	movw	r30, r28
    4932:	ed 58       	subi	r30, 0x8D	; 141
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	80 81       	ld	r24, Z
    4938:	91 81       	ldd	r25, Z+1	; 0x01
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	f1 f7       	brne	.-4      	; 0x493a <main+0xffc>
    493e:	fe 01       	movw	r30, r28
    4940:	ed 58       	subi	r30, 0x8D	; 141
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	91 83       	std	Z+1, r25	; 0x01
    4946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4948:	de 01       	movw	r26, r28
    494a:	ab 58       	subi	r26, 0x8B	; 139
    494c:	bf 4f       	sbci	r27, 0xFF	; 255
    494e:	fe 01       	movw	r30, r28
    4950:	eb 58       	subi	r30, 0x8B	; 139
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 81       	ld	r24, Z
    4956:	91 81       	ldd	r25, Z+1	; 0x01
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	11 96       	adiw	r26, 0x01	; 1
    495c:	9c 93       	st	X, r25
    495e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4960:	fe 01       	movw	r30, r28
    4962:	eb 58       	subi	r30, 0x8B	; 139
    4964:	ff 4f       	sbci	r31, 0xFF	; 255
    4966:	80 81       	ld	r24, Z
    4968:	91 81       	ldd	r25, Z+1	; 0x01
    496a:	00 97       	sbiw	r24, 0x00	; 0
    496c:	d1 f6       	brne	.-76     	; 0x4922 <main+0xfe4>
    496e:	27 c0       	rjmp	.+78     	; 0x49be <main+0x1080>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4970:	8e 01       	movw	r16, r28
    4972:	0b 58       	subi	r16, 0x8B	; 139
    4974:	1f 4f       	sbci	r17, 0xFF	; 255
    4976:	fe 01       	movw	r30, r28
    4978:	e9 58       	subi	r30, 0x89	; 137
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	60 81       	ld	r22, Z
    497e:	71 81       	ldd	r23, Z+1	; 0x01
    4980:	82 81       	ldd	r24, Z+2	; 0x02
    4982:	93 81       	ldd	r25, Z+3	; 0x03
    4984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	f8 01       	movw	r30, r16
    498e:	91 83       	std	Z+1, r25	; 0x01
    4990:	80 83       	st	Z, r24
    4992:	de 01       	movw	r26, r28
    4994:	af 58       	subi	r26, 0x8F	; 143
    4996:	bf 4f       	sbci	r27, 0xFF	; 255
    4998:	fe 01       	movw	r30, r28
    499a:	eb 58       	subi	r30, 0x8B	; 139
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	80 81       	ld	r24, Z
    49a0:	91 81       	ldd	r25, Z+1	; 0x01
    49a2:	8d 93       	st	X+, r24
    49a4:	9c 93       	st	X, r25
    49a6:	fe 01       	movw	r30, r28
    49a8:	ef 58       	subi	r30, 0x8F	; 143
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	80 81       	ld	r24, Z
    49ae:	91 81       	ldd	r25, Z+1	; 0x01
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	f1 f7       	brne	.-4      	; 0x49b0 <main+0x1072>
    49b4:	fe 01       	movw	r30, r28
    49b6:	ef 58       	subi	r30, 0x8F	; 143
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	91 83       	std	Z+1, r25	; 0x01
    49bc:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("2- Fan ON");
    49be:	8d eb       	ldi	r24, 0xBD	; 189
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
			LCD_SendString("3- Fan OFF");
    49ce:	87 ec       	ldi	r24, 0xC7	; 199
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    49d6:	fe 01       	movw	r30, r28
    49d8:	e3 59       	subi	r30, 0x93	; 147
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	90 e8       	ldi	r25, 0x80	; 128
    49e0:	ab eb       	ldi	r26, 0xBB	; 187
    49e2:	b4 e4       	ldi	r27, 0x44	; 68
    49e4:	80 83       	st	Z, r24
    49e6:	91 83       	std	Z+1, r25	; 0x01
    49e8:	a2 83       	std	Z+2, r26	; 0x02
    49ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ec:	8e 01       	movw	r16, r28
    49ee:	07 59       	subi	r16, 0x97	; 151
    49f0:	1f 4f       	sbci	r17, 0xFF	; 255
    49f2:	fe 01       	movw	r30, r28
    49f4:	e3 59       	subi	r30, 0x93	; 147
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	60 81       	ld	r22, Z
    49fa:	71 81       	ldd	r23, Z+1	; 0x01
    49fc:	82 81       	ldd	r24, Z+2	; 0x02
    49fe:	93 81       	ldd	r25, Z+3	; 0x03
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	4a e7       	ldi	r20, 0x7A	; 122
    4a06:	55 e4       	ldi	r21, 0x45	; 69
    4a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	f8 01       	movw	r30, r16
    4a12:	80 83       	st	Z, r24
    4a14:	91 83       	std	Z+1, r25	; 0x01
    4a16:	a2 83       	std	Z+2, r26	; 0x02
    4a18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e7 59       	subi	r30, 0x97	; 151
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	60 81       	ld	r22, Z
    4a22:	71 81       	ldd	r23, Z+1	; 0x01
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	93 81       	ldd	r25, Z+3	; 0x03
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e8       	ldi	r20, 0x80	; 128
    4a2e:	5f e3       	ldi	r21, 0x3F	; 63
    4a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a34:	88 23       	and	r24, r24
    4a36:	44 f4       	brge	.+16     	; 0x4a48 <main+0x110a>
		__ticks = 1;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e9 59       	subi	r30, 0x99	; 153
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	91 83       	std	Z+1, r25	; 0x01
    4a44:	80 83       	st	Z, r24
    4a46:	64 c0       	rjmp	.+200    	; 0x4b10 <main+0x11d2>
	else if (__tmp > 65535)
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e7 59       	subi	r30, 0x97	; 151
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	60 81       	ld	r22, Z
    4a50:	71 81       	ldd	r23, Z+1	; 0x01
    4a52:	82 81       	ldd	r24, Z+2	; 0x02
    4a54:	93 81       	ldd	r25, Z+3	; 0x03
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	3f ef       	ldi	r19, 0xFF	; 255
    4a5a:	4f e7       	ldi	r20, 0x7F	; 127
    4a5c:	57 e4       	ldi	r21, 0x47	; 71
    4a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a62:	18 16       	cp	r1, r24
    4a64:	0c f0       	brlt	.+2      	; 0x4a68 <main+0x112a>
    4a66:	43 c0       	rjmp	.+134    	; 0x4aee <main+0x11b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e3 59       	subi	r30, 0x93	; 147
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	60 81       	ld	r22, Z
    4a70:	71 81       	ldd	r23, Z+1	; 0x01
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	8e 01       	movw	r16, r28
    4a88:	09 59       	subi	r16, 0x99	; 153
    4a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8c:	bc 01       	movw	r22, r24
    4a8e:	cd 01       	movw	r24, r26
    4a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	f8 01       	movw	r30, r16
    4a9a:	91 83       	std	Z+1, r25	; 0x01
    4a9c:	80 83       	st	Z, r24
    4a9e:	1f c0       	rjmp	.+62     	; 0x4ade <main+0x11a0>
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	eb 59       	subi	r30, 0x9B	; 155
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	80 e9       	ldi	r24, 0x90	; 144
    4aa8:	91 e0       	ldi	r25, 0x01	; 1
    4aaa:	91 83       	std	Z+1, r25	; 0x01
    4aac:	80 83       	st	Z, r24
    4aae:	fe 01       	movw	r30, r28
    4ab0:	eb 59       	subi	r30, 0x9B	; 155
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <main+0x117a>
    4abc:	fe 01       	movw	r30, r28
    4abe:	eb 59       	subi	r30, 0x9B	; 155
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac6:	de 01       	movw	r26, r28
    4ac8:	a9 59       	subi	r26, 0x99	; 153
    4aca:	bf 4f       	sbci	r27, 0xFF	; 255
    4acc:	fe 01       	movw	r30, r28
    4ace:	e9 59       	subi	r30, 0x99	; 153
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	80 81       	ld	r24, Z
    4ad4:	91 81       	ldd	r25, Z+1	; 0x01
    4ad6:	01 97       	sbiw	r24, 0x01	; 1
    4ad8:	11 96       	adiw	r26, 0x01	; 1
    4ada:	9c 93       	st	X, r25
    4adc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e9 59       	subi	r30, 0x99	; 153
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	80 81       	ld	r24, Z
    4ae6:	91 81       	ldd	r25, Z+1	; 0x01
    4ae8:	00 97       	sbiw	r24, 0x00	; 0
    4aea:	d1 f6       	brne	.-76     	; 0x4aa0 <main+0x1162>
    4aec:	27 c0       	rjmp	.+78     	; 0x4b3c <main+0x11fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aee:	8e 01       	movw	r16, r28
    4af0:	09 59       	subi	r16, 0x99	; 153
    4af2:	1f 4f       	sbci	r17, 0xFF	; 255
    4af4:	fe 01       	movw	r30, r28
    4af6:	e7 59       	subi	r30, 0x97	; 151
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	60 81       	ld	r22, Z
    4afc:	71 81       	ldd	r23, Z+1	; 0x01
    4afe:	82 81       	ldd	r24, Z+2	; 0x02
    4b00:	93 81       	ldd	r25, Z+3	; 0x03
    4b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	f8 01       	movw	r30, r16
    4b0c:	91 83       	std	Z+1, r25	; 0x01
    4b0e:	80 83       	st	Z, r24
    4b10:	de 01       	movw	r26, r28
    4b12:	ad 59       	subi	r26, 0x9D	; 157
    4b14:	bf 4f       	sbci	r27, 0xFF	; 255
    4b16:	fe 01       	movw	r30, r28
    4b18:	e9 59       	subi	r30, 0x99	; 153
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	80 81       	ld	r24, Z
    4b1e:	91 81       	ldd	r25, Z+1	; 0x01
    4b20:	8d 93       	st	X+, r24
    4b22:	9c 93       	st	X, r25
    4b24:	fe 01       	movw	r30, r28
    4b26:	ed 59       	subi	r30, 0x9D	; 157
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	80 81       	ld	r24, Z
    4b2c:	91 81       	ldd	r25, Z+1	; 0x01
    4b2e:	01 97       	sbiw	r24, 0x01	; 1
    4b30:	f1 f7       	brne	.-4      	; 0x4b2e <main+0x11f0>
    4b32:	fe 01       	movw	r30, r28
    4b34:	ed 59       	subi	r30, 0x9D	; 157
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	91 83       	std	Z+1, r25	; 0x01
    4b3a:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    4b3c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    4b40:	fe 01       	movw	r30, r28
    4b42:	e1 5a       	subi	r30, 0xA1	; 161
    4b44:	ff 4f       	sbci	r31, 0xFF	; 255
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	a0 e0       	ldi	r26, 0x00	; 0
    4b4c:	b0 e4       	ldi	r27, 0x40	; 64
    4b4e:	80 83       	st	Z, r24
    4b50:	91 83       	std	Z+1, r25	; 0x01
    4b52:	a2 83       	std	Z+2, r26	; 0x02
    4b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b56:	8e 01       	movw	r16, r28
    4b58:	05 5a       	subi	r16, 0xA5	; 165
    4b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	e1 5a       	subi	r30, 0xA1	; 161
    4b60:	ff 4f       	sbci	r31, 0xFF	; 255
    4b62:	60 81       	ld	r22, Z
    4b64:	71 81       	ldd	r23, Z+1	; 0x01
    4b66:	82 81       	ldd	r24, Z+2	; 0x02
    4b68:	93 81       	ldd	r25, Z+3	; 0x03
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	4a e7       	ldi	r20, 0x7A	; 122
    4b70:	55 e4       	ldi	r21, 0x45	; 69
    4b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	f8 01       	movw	r30, r16
    4b7c:	80 83       	st	Z, r24
    4b7e:	91 83       	std	Z+1, r25	; 0x01
    4b80:	a2 83       	std	Z+2, r26	; 0x02
    4b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b84:	fe 01       	movw	r30, r28
    4b86:	e5 5a       	subi	r30, 0xA5	; 165
    4b88:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8a:	60 81       	ld	r22, Z
    4b8c:	71 81       	ldd	r23, Z+1	; 0x01
    4b8e:	82 81       	ldd	r24, Z+2	; 0x02
    4b90:	93 81       	ldd	r25, Z+3	; 0x03
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	40 e8       	ldi	r20, 0x80	; 128
    4b98:	5f e3       	ldi	r21, 0x3F	; 63
    4b9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b9e:	88 23       	and	r24, r24
    4ba0:	44 f4       	brge	.+16     	; 0x4bb2 <main+0x1274>
		__ticks = 1;
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e7 5a       	subi	r30, 0xA7	; 167
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	91 83       	std	Z+1, r25	; 0x01
    4bae:	80 83       	st	Z, r24
    4bb0:	64 c0       	rjmp	.+200    	; 0x4c7a <main+0x133c>
	else if (__tmp > 65535)
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	e5 5a       	subi	r30, 0xA5	; 165
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	60 81       	ld	r22, Z
    4bba:	71 81       	ldd	r23, Z+1	; 0x01
    4bbc:	82 81       	ldd	r24, Z+2	; 0x02
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	3f ef       	ldi	r19, 0xFF	; 255
    4bc4:	4f e7       	ldi	r20, 0x7F	; 127
    4bc6:	57 e4       	ldi	r21, 0x47	; 71
    4bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bcc:	18 16       	cp	r1, r24
    4bce:	0c f0       	brlt	.+2      	; 0x4bd2 <main+0x1294>
    4bd0:	43 c0       	rjmp	.+134    	; 0x4c58 <main+0x131a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e1 5a       	subi	r30, 0xA1	; 161
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	60 81       	ld	r22, Z
    4bda:	71 81       	ldd	r23, Z+1	; 0x01
    4bdc:	82 81       	ldd	r24, Z+2	; 0x02
    4bde:	93 81       	ldd	r25, Z+3	; 0x03
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	40 e2       	ldi	r20, 0x20	; 32
    4be6:	51 e4       	ldi	r21, 0x41	; 65
    4be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	8e 01       	movw	r16, r28
    4bf2:	07 5a       	subi	r16, 0xA7	; 167
    4bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf6:	bc 01       	movw	r22, r24
    4bf8:	cd 01       	movw	r24, r26
    4bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	f8 01       	movw	r30, r16
    4c04:	91 83       	std	Z+1, r25	; 0x01
    4c06:	80 83       	st	Z, r24
    4c08:	1f c0       	rjmp	.+62     	; 0x4c48 <main+0x130a>
    4c0a:	fe 01       	movw	r30, r28
    4c0c:	e9 5a       	subi	r30, 0xA9	; 169
    4c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c10:	80 e9       	ldi	r24, 0x90	; 144
    4c12:	91 e0       	ldi	r25, 0x01	; 1
    4c14:	91 83       	std	Z+1, r25	; 0x01
    4c16:	80 83       	st	Z, r24
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e9 5a       	subi	r30, 0xA9	; 169
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	80 81       	ld	r24, Z
    4c20:	91 81       	ldd	r25, Z+1	; 0x01
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	f1 f7       	brne	.-4      	; 0x4c22 <main+0x12e4>
    4c26:	fe 01       	movw	r30, r28
    4c28:	e9 5a       	subi	r30, 0xA9	; 169
    4c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2c:	91 83       	std	Z+1, r25	; 0x01
    4c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c30:	de 01       	movw	r26, r28
    4c32:	a7 5a       	subi	r26, 0xA7	; 167
    4c34:	bf 4f       	sbci	r27, 0xFF	; 255
    4c36:	fe 01       	movw	r30, r28
    4c38:	e7 5a       	subi	r30, 0xA7	; 167
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	80 81       	ld	r24, Z
    4c3e:	91 81       	ldd	r25, Z+1	; 0x01
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	11 96       	adiw	r26, 0x01	; 1
    4c44:	9c 93       	st	X, r25
    4c46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e7 5a       	subi	r30, 0xA7	; 167
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 81       	ld	r24, Z
    4c50:	91 81       	ldd	r25, Z+1	; 0x01
    4c52:	00 97       	sbiw	r24, 0x00	; 0
    4c54:	d1 f6       	brne	.-76     	; 0x4c0a <main+0x12cc>
    4c56:	27 c0       	rjmp	.+78     	; 0x4ca6 <main+0x1368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c58:	8e 01       	movw	r16, r28
    4c5a:	07 5a       	subi	r16, 0xA7	; 167
    4c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5e:	fe 01       	movw	r30, r28
    4c60:	e5 5a       	subi	r30, 0xA5	; 165
    4c62:	ff 4f       	sbci	r31, 0xFF	; 255
    4c64:	60 81       	ld	r22, Z
    4c66:	71 81       	ldd	r23, Z+1	; 0x01
    4c68:	82 81       	ldd	r24, Z+2	; 0x02
    4c6a:	93 81       	ldd	r25, Z+3	; 0x03
    4c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	f8 01       	movw	r30, r16
    4c76:	91 83       	std	Z+1, r25	; 0x01
    4c78:	80 83       	st	Z, r24
    4c7a:	de 01       	movw	r26, r28
    4c7c:	ab 5a       	subi	r26, 0xAB	; 171
    4c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c80:	fe 01       	movw	r30, r28
    4c82:	e7 5a       	subi	r30, 0xA7	; 167
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	80 81       	ld	r24, Z
    4c88:	91 81       	ldd	r25, Z+1	; 0x01
    4c8a:	8d 93       	st	X+, r24
    4c8c:	9c 93       	st	X, r25
    4c8e:	fe 01       	movw	r30, r28
    4c90:	eb 5a       	subi	r30, 0xAB	; 171
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 81       	ld	r24, Z
    4c96:	91 81       	ldd	r25, Z+1	; 0x01
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	f1 f7       	brne	.-4      	; 0x4c98 <main+0x135a>
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	eb 5a       	subi	r30, 0xAB	; 171
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	91 83       	std	Z+1, r25	; 0x01
    4ca4:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("4- Lights ON");
    4ca6:	82 ed       	ldi	r24, 0xD2	; 210
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	60 e0       	ldi	r22, 0x00	; 0
    4cb2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
			LCD_SendString("5- Lights OFF");
    4cb6:	8f ed       	ldi	r24, 0xDF	; 223
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	ef 5a       	subi	r30, 0xAF	; 175
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	90 e8       	ldi	r25, 0x80	; 128
    4cc8:	ab eb       	ldi	r26, 0xBB	; 187
    4cca:	b4 e4       	ldi	r27, 0x44	; 68
    4ccc:	80 83       	st	Z, r24
    4cce:	91 83       	std	Z+1, r25	; 0x01
    4cd0:	a2 83       	std	Z+2, r26	; 0x02
    4cd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cd4:	8e 01       	movw	r16, r28
    4cd6:	03 5b       	subi	r16, 0xB3	; 179
    4cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cda:	fe 01       	movw	r30, r28
    4cdc:	ef 5a       	subi	r30, 0xAF	; 175
    4cde:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce0:	60 81       	ld	r22, Z
    4ce2:	71 81       	ldd	r23, Z+1	; 0x01
    4ce4:	82 81       	ldd	r24, Z+2	; 0x02
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	4a e7       	ldi	r20, 0x7A	; 122
    4cee:	55 e4       	ldi	r21, 0x45	; 69
    4cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	f8 01       	movw	r30, r16
    4cfa:	80 83       	st	Z, r24
    4cfc:	91 83       	std	Z+1, r25	; 0x01
    4cfe:	a2 83       	std	Z+2, r26	; 0x02
    4d00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d02:	fe 01       	movw	r30, r28
    4d04:	e3 5b       	subi	r30, 0xB3	; 179
    4d06:	ff 4f       	sbci	r31, 0xFF	; 255
    4d08:	60 81       	ld	r22, Z
    4d0a:	71 81       	ldd	r23, Z+1	; 0x01
    4d0c:	82 81       	ldd	r24, Z+2	; 0x02
    4d0e:	93 81       	ldd	r25, Z+3	; 0x03
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	40 e8       	ldi	r20, 0x80	; 128
    4d16:	5f e3       	ldi	r21, 0x3F	; 63
    4d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d1c:	88 23       	and	r24, r24
    4d1e:	44 f4       	brge	.+16     	; 0x4d30 <main+0x13f2>
		__ticks = 1;
    4d20:	fe 01       	movw	r30, r28
    4d22:	e5 5b       	subi	r30, 0xB5	; 181
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	91 83       	std	Z+1, r25	; 0x01
    4d2c:	80 83       	st	Z, r24
    4d2e:	64 c0       	rjmp	.+200    	; 0x4df8 <main+0x14ba>
	else if (__tmp > 65535)
    4d30:	fe 01       	movw	r30, r28
    4d32:	e3 5b       	subi	r30, 0xB3	; 179
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	60 81       	ld	r22, Z
    4d38:	71 81       	ldd	r23, Z+1	; 0x01
    4d3a:	82 81       	ldd	r24, Z+2	; 0x02
    4d3c:	93 81       	ldd	r25, Z+3	; 0x03
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	3f ef       	ldi	r19, 0xFF	; 255
    4d42:	4f e7       	ldi	r20, 0x7F	; 127
    4d44:	57 e4       	ldi	r21, 0x47	; 71
    4d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d4a:	18 16       	cp	r1, r24
    4d4c:	0c f0       	brlt	.+2      	; 0x4d50 <main+0x1412>
    4d4e:	43 c0       	rjmp	.+134    	; 0x4dd6 <main+0x1498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d50:	fe 01       	movw	r30, r28
    4d52:	ef 5a       	subi	r30, 0xAF	; 175
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	60 81       	ld	r22, Z
    4d58:	71 81       	ldd	r23, Z+1	; 0x01
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	93 81       	ldd	r25, Z+3	; 0x03
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	40 e2       	ldi	r20, 0x20	; 32
    4d64:	51 e4       	ldi	r21, 0x41	; 65
    4d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	8e 01       	movw	r16, r28
    4d70:	05 5b       	subi	r16, 0xB5	; 181
    4d72:	1f 4f       	sbci	r17, 0xFF	; 255
    4d74:	bc 01       	movw	r22, r24
    4d76:	cd 01       	movw	r24, r26
    4d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	f8 01       	movw	r30, r16
    4d82:	91 83       	std	Z+1, r25	; 0x01
    4d84:	80 83       	st	Z, r24
    4d86:	1f c0       	rjmp	.+62     	; 0x4dc6 <main+0x1488>
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e7 5b       	subi	r30, 0xB7	; 183
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 e9       	ldi	r24, 0x90	; 144
    4d90:	91 e0       	ldi	r25, 0x01	; 1
    4d92:	91 83       	std	Z+1, r25	; 0x01
    4d94:	80 83       	st	Z, r24
    4d96:	fe 01       	movw	r30, r28
    4d98:	e7 5b       	subi	r30, 0xB7	; 183
    4d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9c:	80 81       	ld	r24, Z
    4d9e:	91 81       	ldd	r25, Z+1	; 0x01
    4da0:	01 97       	sbiw	r24, 0x01	; 1
    4da2:	f1 f7       	brne	.-4      	; 0x4da0 <main+0x1462>
    4da4:	fe 01       	movw	r30, r28
    4da6:	e7 5b       	subi	r30, 0xB7	; 183
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	91 83       	std	Z+1, r25	; 0x01
    4dac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dae:	de 01       	movw	r26, r28
    4db0:	a5 5b       	subi	r26, 0xB5	; 181
    4db2:	bf 4f       	sbci	r27, 0xFF	; 255
    4db4:	fe 01       	movw	r30, r28
    4db6:	e5 5b       	subi	r30, 0xB5	; 181
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	80 81       	ld	r24, Z
    4dbc:	91 81       	ldd	r25, Z+1	; 0x01
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	11 96       	adiw	r26, 0x01	; 1
    4dc2:	9c 93       	st	X, r25
    4dc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e5 5b       	subi	r30, 0xB5	; 181
    4dca:	ff 4f       	sbci	r31, 0xFF	; 255
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
    4dd0:	00 97       	sbiw	r24, 0x00	; 0
    4dd2:	d1 f6       	brne	.-76     	; 0x4d88 <main+0x144a>
    4dd4:	27 c0       	rjmp	.+78     	; 0x4e24 <main+0x14e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd6:	8e 01       	movw	r16, r28
    4dd8:	05 5b       	subi	r16, 0xB5	; 181
    4dda:	1f 4f       	sbci	r17, 0xFF	; 255
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e3 5b       	subi	r30, 0xB3	; 179
    4de0:	ff 4f       	sbci	r31, 0xFF	; 255
    4de2:	60 81       	ld	r22, Z
    4de4:	71 81       	ldd	r23, Z+1	; 0x01
    4de6:	82 81       	ldd	r24, Z+2	; 0x02
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dee:	dc 01       	movw	r26, r24
    4df0:	cb 01       	movw	r24, r22
    4df2:	f8 01       	movw	r30, r16
    4df4:	91 83       	std	Z+1, r25	; 0x01
    4df6:	80 83       	st	Z, r24
    4df8:	de 01       	movw	r26, r28
    4dfa:	a9 5b       	subi	r26, 0xB9	; 185
    4dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    4dfe:	fe 01       	movw	r30, r28
    4e00:	e5 5b       	subi	r30, 0xB5	; 181
    4e02:	ff 4f       	sbci	r31, 0xFF	; 255
    4e04:	80 81       	ld	r24, Z
    4e06:	91 81       	ldd	r25, Z+1	; 0x01
    4e08:	8d 93       	st	X+, r24
    4e0a:	9c 93       	st	X, r25
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	e9 5b       	subi	r30, 0xB9	; 185
    4e10:	ff 4f       	sbci	r31, 0xFF	; 255
    4e12:	80 81       	ld	r24, Z
    4e14:	91 81       	ldd	r25, Z+1	; 0x01
    4e16:	01 97       	sbiw	r24, 0x01	; 1
    4e18:	f1 f7       	brne	.-4      	; 0x4e16 <main+0x14d8>
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e9 5b       	subi	r30, 0xB9	; 185
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	91 83       	std	Z+1, r25	; 0x01
    4e22:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    4e24:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    4e28:	fe 01       	movw	r30, r28
    4e2a:	ed 5b       	subi	r30, 0xBD	; 189
    4e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	a0 e0       	ldi	r26, 0x00	; 0
    4e34:	b0 e4       	ldi	r27, 0x40	; 64
    4e36:	80 83       	st	Z, r24
    4e38:	91 83       	std	Z+1, r25	; 0x01
    4e3a:	a2 83       	std	Z+2, r26	; 0x02
    4e3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e3e:	8e 01       	movw	r16, r28
    4e40:	01 5c       	subi	r16, 0xC1	; 193
    4e42:	1f 4f       	sbci	r17, 0xFF	; 255
    4e44:	fe 01       	movw	r30, r28
    4e46:	ed 5b       	subi	r30, 0xBD	; 189
    4e48:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	4a e7       	ldi	r20, 0x7A	; 122
    4e58:	55 e4       	ldi	r21, 0x45	; 69
    4e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	f8 01       	movw	r30, r16
    4e64:	80 83       	st	Z, r24
    4e66:	91 83       	std	Z+1, r25	; 0x01
    4e68:	a2 83       	std	Z+2, r26	; 0x02
    4e6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	ff 96       	adiw	r30, 0x3f	; 63
    4e70:	60 81       	ld	r22, Z
    4e72:	71 81       	ldd	r23, Z+1	; 0x01
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e8       	ldi	r20, 0x80	; 128
    4e7e:	5f e3       	ldi	r21, 0x3F	; 63
    4e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e84:	88 23       	and	r24, r24
    4e86:	2c f4       	brge	.+10     	; 0x4e92 <main+0x1554>
		__ticks = 1;
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	9e af       	std	Y+62, r25	; 0x3e
    4e8e:	8d af       	std	Y+61, r24	; 0x3d
    4e90:	46 c0       	rjmp	.+140    	; 0x4f1e <main+0x15e0>
	else if (__tmp > 65535)
    4e92:	fe 01       	movw	r30, r28
    4e94:	ff 96       	adiw	r30, 0x3f	; 63
    4e96:	60 81       	ld	r22, Z
    4e98:	71 81       	ldd	r23, Z+1	; 0x01
    4e9a:	82 81       	ldd	r24, Z+2	; 0x02
    4e9c:	93 81       	ldd	r25, Z+3	; 0x03
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	3f ef       	ldi	r19, 0xFF	; 255
    4ea2:	4f e7       	ldi	r20, 0x7F	; 127
    4ea4:	57 e4       	ldi	r21, 0x47	; 71
    4ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eaa:	18 16       	cp	r1, r24
    4eac:	64 f5       	brge	.+88     	; 0x4f06 <main+0x15c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eae:	fe 01       	movw	r30, r28
    4eb0:	ed 5b       	subi	r30, 0xBD	; 189
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	60 81       	ld	r22, Z
    4eb6:	71 81       	ldd	r23, Z+1	; 0x01
    4eb8:	82 81       	ldd	r24, Z+2	; 0x02
    4eba:	93 81       	ldd	r25, Z+3	; 0x03
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e2       	ldi	r20, 0x20	; 32
    4ec2:	51 e4       	ldi	r21, 0x41	; 65
    4ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec8:	dc 01       	movw	r26, r24
    4eca:	cb 01       	movw	r24, r22
    4ecc:	bc 01       	movw	r22, r24
    4ece:	cd 01       	movw	r24, r26
    4ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	9e af       	std	Y+62, r25	; 0x3e
    4eda:	8d af       	std	Y+61, r24	; 0x3d
    4edc:	0f c0       	rjmp	.+30     	; 0x4efc <main+0x15be>
    4ede:	80 e9       	ldi	r24, 0x90	; 144
    4ee0:	91 e0       	ldi	r25, 0x01	; 1
    4ee2:	9c af       	std	Y+60, r25	; 0x3c
    4ee4:	8b af       	std	Y+59, r24	; 0x3b
    4ee6:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ee8:	9c ad       	ldd	r25, Y+60	; 0x3c
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	f1 f7       	brne	.-4      	; 0x4eea <main+0x15ac>
    4eee:	9c af       	std	Y+60, r25	; 0x3c
    4ef0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ef4:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	9e af       	std	Y+62, r25	; 0x3e
    4efa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    4efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f00:	00 97       	sbiw	r24, 0x00	; 0
    4f02:	69 f7       	brne	.-38     	; 0x4ede <main+0x15a0>
    4f04:	16 c0       	rjmp	.+44     	; 0x4f32 <main+0x15f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f06:	fe 01       	movw	r30, r28
    4f08:	ff 96       	adiw	r30, 0x3f	; 63
    4f0a:	60 81       	ld	r22, Z
    4f0c:	71 81       	ldd	r23, Z+1	; 0x01
    4f0e:	82 81       	ldd	r24, Z+2	; 0x02
    4f10:	93 81       	ldd	r25, Z+3	; 0x03
    4f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	9e af       	std	Y+62, r25	; 0x3e
    4f1c:	8d af       	std	Y+61, r24	; 0x3d
    4f1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f20:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f22:	9a af       	std	Y+58, r25	; 0x3a
    4f24:	89 af       	std	Y+57, r24	; 0x39
    4f26:	89 ad       	ldd	r24, Y+57	; 0x39
    4f28:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f2a:	01 97       	sbiw	r24, 0x01	; 1
    4f2c:	f1 f7       	brne	.-4      	; 0x4f2a <main+0x15ec>
    4f2e:	9a af       	std	Y+58, r25	; 0x3a
    4f30:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			LCD_SendString("6-Adjust Angel  Of Curtains");
    4f32:	8d ee       	ldi	r24, 0xED	; 237
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	90 e8       	ldi	r25, 0x80	; 128
    4f3e:	ab eb       	ldi	r26, 0xBB	; 187
    4f40:	b4 e4       	ldi	r27, 0x44	; 68
    4f42:	8d ab       	std	Y+53, r24	; 0x35
    4f44:	9e ab       	std	Y+54, r25	; 0x36
    4f46:	af ab       	std	Y+55, r26	; 0x37
    4f48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f4a:	6d a9       	ldd	r22, Y+53	; 0x35
    4f4c:	7e a9       	ldd	r23, Y+54	; 0x36
    4f4e:	8f a9       	ldd	r24, Y+55	; 0x37
    4f50:	98 ad       	ldd	r25, Y+56	; 0x38
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	4a e7       	ldi	r20, 0x7A	; 122
    4f58:	55 e4       	ldi	r21, 0x45	; 69
    4f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f5e:	dc 01       	movw	r26, r24
    4f60:	cb 01       	movw	r24, r22
    4f62:	89 ab       	std	Y+49, r24	; 0x31
    4f64:	9a ab       	std	Y+50, r25	; 0x32
    4f66:	ab ab       	std	Y+51, r26	; 0x33
    4f68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f6a:	69 a9       	ldd	r22, Y+49	; 0x31
    4f6c:	7a a9       	ldd	r23, Y+50	; 0x32
    4f6e:	8b a9       	ldd	r24, Y+51	; 0x33
    4f70:	9c a9       	ldd	r25, Y+52	; 0x34
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	40 e8       	ldi	r20, 0x80	; 128
    4f78:	5f e3       	ldi	r21, 0x3F	; 63
    4f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f7e:	88 23       	and	r24, r24
    4f80:	2c f4       	brge	.+10     	; 0x4f8c <main+0x164e>
		__ticks = 1;
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	98 ab       	std	Y+48, r25	; 0x30
    4f88:	8f a7       	std	Y+47, r24	; 0x2f
    4f8a:	3f c0       	rjmp	.+126    	; 0x500a <main+0x16cc>
	else if (__tmp > 65535)
    4f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    4f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    4f90:	8b a9       	ldd	r24, Y+51	; 0x33
    4f92:	9c a9       	ldd	r25, Y+52	; 0x34
    4f94:	20 e0       	ldi	r18, 0x00	; 0
    4f96:	3f ef       	ldi	r19, 0xFF	; 255
    4f98:	4f e7       	ldi	r20, 0x7F	; 127
    4f9a:	57 e4       	ldi	r21, 0x47	; 71
    4f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fa0:	18 16       	cp	r1, r24
    4fa2:	4c f5       	brge	.+82     	; 0x4ff6 <main+0x16b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa4:	6d a9       	ldd	r22, Y+53	; 0x35
    4fa6:	7e a9       	ldd	r23, Y+54	; 0x36
    4fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    4faa:	98 ad       	ldd	r25, Y+56	; 0x38
    4fac:	20 e0       	ldi	r18, 0x00	; 0
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	40 e2       	ldi	r20, 0x20	; 32
    4fb2:	51 e4       	ldi	r21, 0x41	; 65
    4fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	bc 01       	movw	r22, r24
    4fbe:	cd 01       	movw	r24, r26
    4fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc4:	dc 01       	movw	r26, r24
    4fc6:	cb 01       	movw	r24, r22
    4fc8:	98 ab       	std	Y+48, r25	; 0x30
    4fca:	8f a7       	std	Y+47, r24	; 0x2f
    4fcc:	0f c0       	rjmp	.+30     	; 0x4fec <main+0x16ae>
    4fce:	80 e9       	ldi	r24, 0x90	; 144
    4fd0:	91 e0       	ldi	r25, 0x01	; 1
    4fd2:	9e a7       	std	Y+46, r25	; 0x2e
    4fd4:	8d a7       	std	Y+45, r24	; 0x2d
    4fd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fda:	01 97       	sbiw	r24, 0x01	; 1
    4fdc:	f1 f7       	brne	.-4      	; 0x4fda <main+0x169c>
    4fde:	9e a7       	std	Y+46, r25	; 0x2e
    4fe0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	98 ab       	std	Y+48, r25	; 0x30
    4fea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fec:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fee:	98 a9       	ldd	r25, Y+48	; 0x30
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	69 f7       	brne	.-38     	; 0x4fce <main+0x1690>
    4ff4:	14 c0       	rjmp	.+40     	; 0x501e <main+0x16e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    4ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    4ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    4ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    4ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	98 ab       	std	Y+48, r25	; 0x30
    5008:	8f a7       	std	Y+47, r24	; 0x2f
    500a:	8f a5       	ldd	r24, Y+47	; 0x2f
    500c:	98 a9       	ldd	r25, Y+48	; 0x30
    500e:	9c a7       	std	Y+44, r25	; 0x2c
    5010:	8b a7       	std	Y+43, r24	; 0x2b
    5012:	8b a5       	ldd	r24, Y+43	; 0x2b
    5014:	9c a5       	ldd	r25, Y+44	; 0x2c
    5016:	01 97       	sbiw	r24, 0x01	; 1
    5018:	f1 f7       	brne	.-4      	; 0x5016 <main+0x16d8>
    501a:	9c a7       	std	Y+44, r25	; 0x2c
    501c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1500);
			LCD_ClearDisplay();
    501e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	a0 e0       	ldi	r26, 0x00	; 0
    5028:	b0 e4       	ldi	r27, 0x40	; 64
    502a:	8f a3       	std	Y+39, r24	; 0x27
    502c:	98 a7       	std	Y+40, r25	; 0x28
    502e:	a9 a7       	std	Y+41, r26	; 0x29
    5030:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5032:	6f a1       	ldd	r22, Y+39	; 0x27
    5034:	78 a5       	ldd	r23, Y+40	; 0x28
    5036:	89 a5       	ldd	r24, Y+41	; 0x29
    5038:	9a a5       	ldd	r25, Y+42	; 0x2a
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	4a e7       	ldi	r20, 0x7A	; 122
    5040:	55 e4       	ldi	r21, 0x45	; 69
    5042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	8b a3       	std	Y+35, r24	; 0x23
    504c:	9c a3       	std	Y+36, r25	; 0x24
    504e:	ad a3       	std	Y+37, r26	; 0x25
    5050:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5052:	6b a1       	ldd	r22, Y+35	; 0x23
    5054:	7c a1       	ldd	r23, Y+36	; 0x24
    5056:	8d a1       	ldd	r24, Y+37	; 0x25
    5058:	9e a1       	ldd	r25, Y+38	; 0x26
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	40 e8       	ldi	r20, 0x80	; 128
    5060:	5f e3       	ldi	r21, 0x3F	; 63
    5062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5066:	88 23       	and	r24, r24
    5068:	2c f4       	brge	.+10     	; 0x5074 <main+0x1736>
		__ticks = 1;
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	9a a3       	std	Y+34, r25	; 0x22
    5070:	89 a3       	std	Y+33, r24	; 0x21
    5072:	3f c0       	rjmp	.+126    	; 0x50f2 <main+0x17b4>
	else if (__tmp > 65535)
    5074:	6b a1       	ldd	r22, Y+35	; 0x23
    5076:	7c a1       	ldd	r23, Y+36	; 0x24
    5078:	8d a1       	ldd	r24, Y+37	; 0x25
    507a:	9e a1       	ldd	r25, Y+38	; 0x26
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	3f ef       	ldi	r19, 0xFF	; 255
    5080:	4f e7       	ldi	r20, 0x7F	; 127
    5082:	57 e4       	ldi	r21, 0x47	; 71
    5084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5088:	18 16       	cp	r1, r24
    508a:	4c f5       	brge	.+82     	; 0x50de <main+0x17a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    508c:	6f a1       	ldd	r22, Y+39	; 0x27
    508e:	78 a5       	ldd	r23, Y+40	; 0x28
    5090:	89 a5       	ldd	r24, Y+41	; 0x29
    5092:	9a a5       	ldd	r25, Y+42	; 0x2a
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	40 e2       	ldi	r20, 0x20	; 32
    509a:	51 e4       	ldi	r21, 0x41	; 65
    509c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	bc 01       	movw	r22, r24
    50a6:	cd 01       	movw	r24, r26
    50a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ac:	dc 01       	movw	r26, r24
    50ae:	cb 01       	movw	r24, r22
    50b0:	9a a3       	std	Y+34, r25	; 0x22
    50b2:	89 a3       	std	Y+33, r24	; 0x21
    50b4:	0f c0       	rjmp	.+30     	; 0x50d4 <main+0x1796>
    50b6:	80 e9       	ldi	r24, 0x90	; 144
    50b8:	91 e0       	ldi	r25, 0x01	; 1
    50ba:	98 a3       	std	Y+32, r25	; 0x20
    50bc:	8f 8f       	std	Y+31, r24	; 0x1f
    50be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50c0:	98 a1       	ldd	r25, Y+32	; 0x20
    50c2:	01 97       	sbiw	r24, 0x01	; 1
    50c4:	f1 f7       	brne	.-4      	; 0x50c2 <main+0x1784>
    50c6:	98 a3       	std	Y+32, r25	; 0x20
    50c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ca:	89 a1       	ldd	r24, Y+33	; 0x21
    50cc:	9a a1       	ldd	r25, Y+34	; 0x22
    50ce:	01 97       	sbiw	r24, 0x01	; 1
    50d0:	9a a3       	std	Y+34, r25	; 0x22
    50d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d4:	89 a1       	ldd	r24, Y+33	; 0x21
    50d6:	9a a1       	ldd	r25, Y+34	; 0x22
    50d8:	00 97       	sbiw	r24, 0x00	; 0
    50da:	69 f7       	brne	.-38     	; 0x50b6 <main+0x1778>
    50dc:	14 c0       	rjmp	.+40     	; 0x5106 <main+0x17c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50de:	6b a1       	ldd	r22, Y+35	; 0x23
    50e0:	7c a1       	ldd	r23, Y+36	; 0x24
    50e2:	8d a1       	ldd	r24, Y+37	; 0x25
    50e4:	9e a1       	ldd	r25, Y+38	; 0x26
    50e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ea:	dc 01       	movw	r26, r24
    50ec:	cb 01       	movw	r24, r22
    50ee:	9a a3       	std	Y+34, r25	; 0x22
    50f0:	89 a3       	std	Y+33, r24	; 0x21
    50f2:	89 a1       	ldd	r24, Y+33	; 0x21
    50f4:	9a a1       	ldd	r25, Y+34	; 0x22
    50f6:	9e 8f       	std	Y+30, r25	; 0x1e
    50f8:	8d 8f       	std	Y+29, r24	; 0x1d
    50fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50fe:	01 97       	sbiw	r24, 0x01	; 1
    5100:	f1 f7       	brne	.-4      	; 0x50fe <main+0x17c0>
    5102:	9e 8f       	std	Y+30, r25	; 0x1e
    5104:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			do
			{
				choosenOption=get_button_pressed();
    5106:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <get_button_pressed>
    510a:	fe 01       	movw	r30, r28
    510c:	ed 5f       	subi	r30, 0xFD	; 253
    510e:	fe 4f       	sbci	r31, 0xFE	; 254
    5110:	80 83       	st	Z, r24

			}while(choosenOption==0xff);
    5112:	fe 01       	movw	r30, r28
    5114:	ed 5f       	subi	r30, 0xFD	; 253
    5116:	fe 4f       	sbci	r31, 0xFE	; 254
    5118:	80 81       	ld	r24, Z
    511a:	8f 3f       	cpi	r24, 0xFF	; 255
    511c:	a1 f3       	breq	.-24     	; 0x5106 <main+0x17c8>

			switch(choosenOption)
    511e:	fe 01       	movw	r30, r28
    5120:	ed 5f       	subi	r30, 0xFD	; 253
    5122:	fe 4f       	sbci	r31, 0xFE	; 254
    5124:	80 81       	ld	r24, Z
    5126:	28 2f       	mov	r18, r24
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	cc 5e       	subi	r28, 0xEC	; 236
    512c:	de 4f       	sbci	r29, 0xFE	; 254
    512e:	39 83       	std	Y+1, r19	; 0x01
    5130:	28 83       	st	Y, r18
    5132:	c4 51       	subi	r28, 0x14	; 20
    5134:	d1 40       	sbci	r29, 0x01	; 1
    5136:	cc 5e       	subi	r28, 0xEC	; 236
    5138:	de 4f       	sbci	r29, 0xFE	; 254
    513a:	88 81       	ld	r24, Y
    513c:	99 81       	ldd	r25, Y+1	; 0x01
    513e:	c4 51       	subi	r28, 0x14	; 20
    5140:	d1 40       	sbci	r29, 0x01	; 1
    5142:	83 33       	cpi	r24, 0x33	; 51
    5144:	91 05       	cpc	r25, r1
    5146:	09 f4       	brne	.+2      	; 0x514a <main+0x180c>
    5148:	79 c1       	rjmp	.+754    	; 0x543c <main+0x1afe>
    514a:	cc 5e       	subi	r28, 0xEC	; 236
    514c:	de 4f       	sbci	r29, 0xFE	; 254
    514e:	e8 81       	ld	r30, Y
    5150:	f9 81       	ldd	r31, Y+1	; 0x01
    5152:	c4 51       	subi	r28, 0x14	; 20
    5154:	d1 40       	sbci	r29, 0x01	; 1
    5156:	e4 33       	cpi	r30, 0x34	; 52
    5158:	f1 05       	cpc	r31, r1
    515a:	ac f4       	brge	.+42     	; 0x5186 <main+0x1848>
    515c:	cc 5e       	subi	r28, 0xEC	; 236
    515e:	de 4f       	sbci	r29, 0xFE	; 254
    5160:	28 81       	ld	r18, Y
    5162:	39 81       	ldd	r19, Y+1	; 0x01
    5164:	c4 51       	subi	r28, 0x14	; 20
    5166:	d1 40       	sbci	r29, 0x01	; 1
    5168:	21 33       	cpi	r18, 0x31	; 49
    516a:	31 05       	cpc	r19, r1
    516c:	61 f1       	breq	.+88     	; 0x51c6 <main+0x1888>
    516e:	cc 5e       	subi	r28, 0xEC	; 236
    5170:	de 4f       	sbci	r29, 0xFE	; 254
    5172:	88 81       	ld	r24, Y
    5174:	99 81       	ldd	r25, Y+1	; 0x01
    5176:	c4 51       	subi	r28, 0x14	; 20
    5178:	d1 40       	sbci	r29, 0x01	; 1
    517a:	82 33       	cpi	r24, 0x32	; 50
    517c:	91 05       	cpc	r25, r1
    517e:	09 f4       	brne	.+2      	; 0x5182 <main+0x1844>
    5180:	56 c1       	rjmp	.+684    	; 0x542e <main+0x1af0>
    5182:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
    5186:	cc 5e       	subi	r28, 0xEC	; 236
    5188:	de 4f       	sbci	r29, 0xFE	; 254
    518a:	e8 81       	ld	r30, Y
    518c:	f9 81       	ldd	r31, Y+1	; 0x01
    518e:	c4 51       	subi	r28, 0x14	; 20
    5190:	d1 40       	sbci	r29, 0x01	; 1
    5192:	e5 33       	cpi	r30, 0x35	; 53
    5194:	f1 05       	cpc	r31, r1
    5196:	09 f4       	brne	.+2      	; 0x519a <main+0x185c>
    5198:	5f c1       	rjmp	.+702    	; 0x5458 <main+0x1b1a>
    519a:	cc 5e       	subi	r28, 0xEC	; 236
    519c:	de 4f       	sbci	r29, 0xFE	; 254
    519e:	28 81       	ld	r18, Y
    51a0:	39 81       	ldd	r19, Y+1	; 0x01
    51a2:	c4 51       	subi	r28, 0x14	; 20
    51a4:	d1 40       	sbci	r29, 0x01	; 1
    51a6:	25 33       	cpi	r18, 0x35	; 53
    51a8:	31 05       	cpc	r19, r1
    51aa:	0c f4       	brge	.+2      	; 0x51ae <main+0x1870>
    51ac:	4e c1       	rjmp	.+668    	; 0x544a <main+0x1b0c>
    51ae:	cc 5e       	subi	r28, 0xEC	; 236
    51b0:	de 4f       	sbci	r29, 0xFE	; 254
    51b2:	88 81       	ld	r24, Y
    51b4:	99 81       	ldd	r25, Y+1	; 0x01
    51b6:	c4 51       	subi	r28, 0x14	; 20
    51b8:	d1 40       	sbci	r29, 0x01	; 1
    51ba:	86 33       	cpi	r24, 0x36	; 54
    51bc:	91 05       	cpc	r25, r1
    51be:	09 f4       	brne	.+2      	; 0x51c2 <main+0x1884>
    51c0:	7b c1       	rjmp	.+758    	; 0x54b8 <main+0x1b7a>
    51c2:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
			{
				case '1':
					valueADC= ADC_StartConversion(ADC1);
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	0e 94 c2 07 	call	0xf84	; 0xf84 <ADC_StartConversion>
    51cc:	fe 01       	movw	r30, r28
    51ce:	e5 5f       	subi	r30, 0xF5	; 245
    51d0:	fe 4f       	sbci	r31, 0xFE	; 254
    51d2:	80 83       	st	Z, r24
					analogue=(uint32)valueADC*5000UL/256UL; //in mV
    51d4:	fe 01       	movw	r30, r28
    51d6:	e5 5f       	subi	r30, 0xF5	; 245
    51d8:	fe 4f       	sbci	r31, 0xFE	; 254
    51da:	80 81       	ld	r24, Z
    51dc:	88 2f       	mov	r24, r24
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	a0 e0       	ldi	r26, 0x00	; 0
    51e2:	b0 e0       	ldi	r27, 0x00	; 0
    51e4:	28 e8       	ldi	r18, 0x88	; 136
    51e6:	33 e1       	ldi	r19, 0x13	; 19
    51e8:	40 e0       	ldi	r20, 0x00	; 0
    51ea:	50 e0       	ldi	r21, 0x00	; 0
    51ec:	bc 01       	movw	r22, r24
    51ee:	cd 01       	movw	r24, r26
    51f0:	0e 94 c6 2a 	call	0x558c	; 0x558c <__mulsi3>
    51f4:	dc 01       	movw	r26, r24
    51f6:	cb 01       	movw	r24, r22
    51f8:	fe 01       	movw	r30, r28
    51fa:	e9 5f       	subi	r30, 0xF9	; 249
    51fc:	fe 4f       	sbci	r31, 0xFE	; 254
    51fe:	89 2f       	mov	r24, r25
    5200:	9a 2f       	mov	r25, r26
    5202:	ab 2f       	mov	r26, r27
    5204:	bb 27       	eor	r27, r27
    5206:	80 83       	st	Z, r24
    5208:	91 83       	std	Z+1, r25	; 0x01
    520a:	a2 83       	std	Z+2, r26	; 0x02
    520c:	b3 83       	std	Z+3, r27	; 0x03
					temprature=analogue/10;
    520e:	fe 01       	movw	r30, r28
    5210:	e9 5f       	subi	r30, 0xF9	; 249
    5212:	fe 4f       	sbci	r31, 0xFE	; 254
    5214:	80 81       	ld	r24, Z
    5216:	91 81       	ldd	r25, Z+1	; 0x01
    5218:	a2 81       	ldd	r26, Z+2	; 0x02
    521a:	b3 81       	ldd	r27, Z+3	; 0x03
    521c:	2a e0       	ldi	r18, 0x0A	; 10
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	40 e0       	ldi	r20, 0x00	; 0
    5222:	50 e0       	ldi	r21, 0x00	; 0
    5224:	bc 01       	movw	r22, r24
    5226:	cd 01       	movw	r24, r26
    5228:	0e 94 04 2b 	call	0x5608	; 0x5608 <__udivmodsi4>
    522c:	da 01       	movw	r26, r20
    522e:	c9 01       	movw	r24, r18
    5230:	fe 01       	movw	r30, r28
    5232:	ea 5f       	subi	r30, 0xFA	; 250
    5234:	fe 4f       	sbci	r31, 0xFE	; 254
    5236:	80 83       	st	Z, r24
					LCD_SendString("Temp=");
    5238:	89 e0       	ldi	r24, 0x09	; 9
    523a:	91 e0       	ldi	r25, 0x01	; 1
    523c:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
					LCD_GoToXY(FirstLine, 6);
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	66 e0       	ldi	r22, 0x06	; 6
    5244:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_GoToXY>
					LCD_uint8_WriteNumber(temprature);
    5248:	fe 01       	movw	r30, r28
    524a:	ea 5f       	subi	r30, 0xFA	; 250
    524c:	fe 4f       	sbci	r31, 0xFE	; 254
    524e:	80 81       	ld	r24, Z
    5250:	0e 94 db 11 	call	0x23b6	; 0x23b6 <LCD_uint8_WriteNumber>
					LCD_SendString(" 'C");
    5254:	8f e0       	ldi	r24, 0x0F	; 15
    5256:	91 e0       	ldi	r25, 0x01	; 1
    5258:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_SendString>
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e8       	ldi	r25, 0x80	; 128
    5260:	ab e3       	ldi	r26, 0x3B	; 59
    5262:	b5 e4       	ldi	r27, 0x45	; 69
    5264:	89 8f       	std	Y+25, r24	; 0x19
    5266:	9a 8f       	std	Y+26, r25	; 0x1a
    5268:	ab 8f       	std	Y+27, r26	; 0x1b
    526a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    526c:	69 8d       	ldd	r22, Y+25	; 0x19
    526e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5274:	20 e0       	ldi	r18, 0x00	; 0
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	4a e7       	ldi	r20, 0x7A	; 122
    527a:	55 e4       	ldi	r21, 0x45	; 69
    527c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5280:	dc 01       	movw	r26, r24
    5282:	cb 01       	movw	r24, r22
    5284:	8d 8b       	std	Y+21, r24	; 0x15
    5286:	9e 8b       	std	Y+22, r25	; 0x16
    5288:	af 8b       	std	Y+23, r26	; 0x17
    528a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    528c:	6d 89       	ldd	r22, Y+21	; 0x15
    528e:	7e 89       	ldd	r23, Y+22	; 0x16
    5290:	8f 89       	ldd	r24, Y+23	; 0x17
    5292:	98 8d       	ldd	r25, Y+24	; 0x18
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	30 e0       	ldi	r19, 0x00	; 0
    5298:	40 e8       	ldi	r20, 0x80	; 128
    529a:	5f e3       	ldi	r21, 0x3F	; 63
    529c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52a0:	88 23       	and	r24, r24
    52a2:	2c f4       	brge	.+10     	; 0x52ae <main+0x1970>
		__ticks = 1;
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	9c 8b       	std	Y+20, r25	; 0x14
    52aa:	8b 8b       	std	Y+19, r24	; 0x13
    52ac:	3f c0       	rjmp	.+126    	; 0x532c <main+0x19ee>
	else if (__tmp > 65535)
    52ae:	6d 89       	ldd	r22, Y+21	; 0x15
    52b0:	7e 89       	ldd	r23, Y+22	; 0x16
    52b2:	8f 89       	ldd	r24, Y+23	; 0x17
    52b4:	98 8d       	ldd	r25, Y+24	; 0x18
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	3f ef       	ldi	r19, 0xFF	; 255
    52ba:	4f e7       	ldi	r20, 0x7F	; 127
    52bc:	57 e4       	ldi	r21, 0x47	; 71
    52be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52c2:	18 16       	cp	r1, r24
    52c4:	4c f5       	brge	.+82     	; 0x5318 <main+0x19da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c6:	69 8d       	ldd	r22, Y+25	; 0x19
    52c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52ce:	20 e0       	ldi	r18, 0x00	; 0
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	40 e2       	ldi	r20, 0x20	; 32
    52d4:	51 e4       	ldi	r21, 0x41	; 65
    52d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	bc 01       	movw	r22, r24
    52e0:	cd 01       	movw	r24, r26
    52e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	9c 8b       	std	Y+20, r25	; 0x14
    52ec:	8b 8b       	std	Y+19, r24	; 0x13
    52ee:	0f c0       	rjmp	.+30     	; 0x530e <main+0x19d0>
    52f0:	80 e9       	ldi	r24, 0x90	; 144
    52f2:	91 e0       	ldi	r25, 0x01	; 1
    52f4:	9a 8b       	std	Y+18, r25	; 0x12
    52f6:	89 8b       	std	Y+17, r24	; 0x11
    52f8:	89 89       	ldd	r24, Y+17	; 0x11
    52fa:	9a 89       	ldd	r25, Y+18	; 0x12
    52fc:	01 97       	sbiw	r24, 0x01	; 1
    52fe:	f1 f7       	brne	.-4      	; 0x52fc <main+0x19be>
    5300:	9a 8b       	std	Y+18, r25	; 0x12
    5302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5304:	8b 89       	ldd	r24, Y+19	; 0x13
    5306:	9c 89       	ldd	r25, Y+20	; 0x14
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	9c 8b       	std	Y+20, r25	; 0x14
    530c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    530e:	8b 89       	ldd	r24, Y+19	; 0x13
    5310:	9c 89       	ldd	r25, Y+20	; 0x14
    5312:	00 97       	sbiw	r24, 0x00	; 0
    5314:	69 f7       	brne	.-38     	; 0x52f0 <main+0x19b2>
    5316:	14 c0       	rjmp	.+40     	; 0x5340 <main+0x1a02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5318:	6d 89       	ldd	r22, Y+21	; 0x15
    531a:	7e 89       	ldd	r23, Y+22	; 0x16
    531c:	8f 89       	ldd	r24, Y+23	; 0x17
    531e:	98 8d       	ldd	r25, Y+24	; 0x18
    5320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	9c 8b       	std	Y+20, r25	; 0x14
    532a:	8b 8b       	std	Y+19, r24	; 0x13
    532c:	8b 89       	ldd	r24, Y+19	; 0x13
    532e:	9c 89       	ldd	r25, Y+20	; 0x14
    5330:	98 8b       	std	Y+16, r25	; 0x10
    5332:	8f 87       	std	Y+15, r24	; 0x0f
    5334:	8f 85       	ldd	r24, Y+15	; 0x0f
    5336:	98 89       	ldd	r25, Y+16	; 0x10
    5338:	01 97       	sbiw	r24, 0x01	; 1
    533a:	f1 f7       	brne	.-4      	; 0x5338 <main+0x19fa>
    533c:	98 8b       	std	Y+16, r25	; 0x10
    533e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(3000);
					LCD_ClearDisplay();
    5340:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_ClearDisplay>
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	a0 e0       	ldi	r26, 0x00	; 0
    534a:	b0 e4       	ldi	r27, 0x40	; 64
    534c:	8b 87       	std	Y+11, r24	; 0x0b
    534e:	9c 87       	std	Y+12, r25	; 0x0c
    5350:	ad 87       	std	Y+13, r26	; 0x0d
    5352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5354:	6b 85       	ldd	r22, Y+11	; 0x0b
    5356:	7c 85       	ldd	r23, Y+12	; 0x0c
    5358:	8d 85       	ldd	r24, Y+13	; 0x0d
    535a:	9e 85       	ldd	r25, Y+14	; 0x0e
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	4a e7       	ldi	r20, 0x7A	; 122
    5362:	55 e4       	ldi	r21, 0x45	; 69
    5364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	8f 83       	std	Y+7, r24	; 0x07
    536e:	98 87       	std	Y+8, r25	; 0x08
    5370:	a9 87       	std	Y+9, r26	; 0x09
    5372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5374:	6f 81       	ldd	r22, Y+7	; 0x07
    5376:	78 85       	ldd	r23, Y+8	; 0x08
    5378:	89 85       	ldd	r24, Y+9	; 0x09
    537a:	9a 85       	ldd	r25, Y+10	; 0x0a
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e8       	ldi	r20, 0x80	; 128
    5382:	5f e3       	ldi	r21, 0x3F	; 63
    5384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5388:	88 23       	and	r24, r24
    538a:	2c f4       	brge	.+10     	; 0x5396 <main+0x1a58>
		__ticks = 1;
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	9e 83       	std	Y+6, r25	; 0x06
    5392:	8d 83       	std	Y+5, r24	; 0x05
    5394:	40 c0       	rjmp	.+128    	; 0x5416 <main+0x1ad8>
	else if (__tmp > 65535)
    5396:	6f 81       	ldd	r22, Y+7	; 0x07
    5398:	78 85       	ldd	r23, Y+8	; 0x08
    539a:	89 85       	ldd	r24, Y+9	; 0x09
    539c:	9a 85       	ldd	r25, Y+10	; 0x0a
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	3f ef       	ldi	r19, 0xFF	; 255
    53a2:	4f e7       	ldi	r20, 0x7F	; 127
    53a4:	57 e4       	ldi	r21, 0x47	; 71
    53a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53aa:	18 16       	cp	r1, r24
    53ac:	54 f5       	brge	.+84     	; 0x5402 <main+0x1ac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    53b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    53b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    53b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	40 e2       	ldi	r20, 0x20	; 32
    53bc:	51 e4       	ldi	r21, 0x41	; 65
    53be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c2:	dc 01       	movw	r26, r24
    53c4:	cb 01       	movw	r24, r22
    53c6:	bc 01       	movw	r22, r24
    53c8:	cd 01       	movw	r24, r26
    53ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	9e 83       	std	Y+6, r25	; 0x06
    53d4:	8d 83       	std	Y+5, r24	; 0x05
    53d6:	0f c0       	rjmp	.+30     	; 0x53f6 <main+0x1ab8>
    53d8:	80 e9       	ldi	r24, 0x90	; 144
    53da:	91 e0       	ldi	r25, 0x01	; 1
    53dc:	9c 83       	std	Y+4, r25	; 0x04
    53de:	8b 83       	std	Y+3, r24	; 0x03
    53e0:	8b 81       	ldd	r24, Y+3	; 0x03
    53e2:	9c 81       	ldd	r25, Y+4	; 0x04
    53e4:	01 97       	sbiw	r24, 0x01	; 1
    53e6:	f1 f7       	brne	.-4      	; 0x53e4 <main+0x1aa6>
    53e8:	9c 83       	std	Y+4, r25	; 0x04
    53ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53ec:	8d 81       	ldd	r24, Y+5	; 0x05
    53ee:	9e 81       	ldd	r25, Y+6	; 0x06
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	9e 83       	std	Y+6, r25	; 0x06
    53f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53f6:	8d 81       	ldd	r24, Y+5	; 0x05
    53f8:	9e 81       	ldd	r25, Y+6	; 0x06
    53fa:	00 97       	sbiw	r24, 0x00	; 0
    53fc:	69 f7       	brne	.-38     	; 0x53d8 <main+0x1a9a>
    53fe:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5402:	6f 81       	ldd	r22, Y+7	; 0x07
    5404:	78 85       	ldd	r23, Y+8	; 0x08
    5406:	89 85       	ldd	r24, Y+9	; 0x09
    5408:	9a 85       	ldd	r25, Y+10	; 0x0a
    540a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	9e 83       	std	Y+6, r25	; 0x06
    5414:	8d 83       	std	Y+5, r24	; 0x05
    5416:	8d 81       	ldd	r24, Y+5	; 0x05
    5418:	9e 81       	ldd	r25, Y+6	; 0x06
    541a:	9a 83       	std	Y+2, r25	; 0x02
    541c:	89 83       	std	Y+1, r24	; 0x01
    541e:	89 81       	ldd	r24, Y+1	; 0x01
    5420:	9a 81       	ldd	r25, Y+2	; 0x02
    5422:	01 97       	sbiw	r24, 0x01	; 1
    5424:	f1 f7       	brne	.-4      	; 0x5422 <main+0x1ae4>
    5426:	9a 83       	std	Y+2, r25	; 0x02
    5428:	89 83       	std	Y+1, r24	; 0x01
    542a:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
					_delay_ms(2);
					break;
				case '2':
					DIO_setPinVAlue(DIO_PORTD,PIN4,OUTPUT_HIGH);
    542e:	83 e0       	ldi	r24, 0x03	; 3
    5430:	64 e0       	ldi	r22, 0x04	; 4
    5432:	41 e0       	ldi	r20, 0x01	; 1
    5434:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
    5438:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
					break;
				case '3':
					DIO_setPinVAlue(DIO_PORTD,PIN4,OUTPUT_LOW);
    543c:	83 e0       	ldi	r24, 0x03	; 3
    543e:	64 e0       	ldi	r22, 0x04	; 4
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
    5446:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
					break;
				case '4':
					DIO_setPinVAlue(DIO_PORTD,PIN7,OUTPUT_HIGH);
    544a:	83 e0       	ldi	r24, 0x03	; 3
    544c:	67 e0       	ldi	r22, 0x07	; 7
    544e:	41 e0       	ldi	r20, 0x01	; 1
    5450:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
    5454:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
					break;
				case '5':
					DIO_setPinVAlue(DIO_PORTD,PIN7,OUTPUT_LOW);
    5458:	83 e0       	ldi	r24, 0x03	; 3
    545a:	67 e0       	ldi	r22, 0x07	; 7
    545c:	40 e0       	ldi	r20, 0x00	; 0
    545e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_setPinVAlue>
    5462:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
					break;
				case '6':
					/*control servo motor using potentiometer*/
					while(servo_adjust_time)
					{
						valueADC=ADC_StartConversion(ADC0);
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	0e 94 c2 07 	call	0xf84	; 0xf84 <ADC_StartConversion>
    546c:	fe 01       	movw	r30, r28
    546e:	e5 5f       	subi	r30, 0xF5	; 245
    5470:	fe 4f       	sbci	r31, 0xFE	; 254
    5472:	80 83       	st	Z, r24
						angle=ADC_To_Angle(valueADC);
    5474:	fe 01       	movw	r30, r28
    5476:	e5 5f       	subi	r30, 0xF5	; 245
    5478:	fe 4f       	sbci	r31, 0xFE	; 254
    547a:	80 81       	ld	r24, Z
    547c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <ADC_To_Angle>
    5480:	fe 01       	movw	r30, r28
    5482:	ef 5f       	subi	r30, 0xFF	; 255
    5484:	fe 4f       	sbci	r31, 0xFE	; 254
    5486:	80 83       	st	Z, r24
						Timer1_Servo(angle);
    5488:	fe 01       	movw	r30, r28
    548a:	ef 5f       	subi	r30, 0xFF	; 255
    548c:	fe 4f       	sbci	r31, 0xFE	; 254
    548e:	80 81       	ld	r24, Z
    5490:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Timer1_Servo>
						servo_adjust_time--;
    5494:	9e 01       	movw	r18, r28
    5496:	23 50       	subi	r18, 0x03	; 3
    5498:	3f 4f       	sbci	r19, 0xFF	; 255
    549a:	fe 01       	movw	r30, r28
    549c:	e3 50       	subi	r30, 0x03	; 3
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	80 81       	ld	r24, Z
    54a2:	91 81       	ldd	r25, Z+1	; 0x01
    54a4:	a2 81       	ldd	r26, Z+2	; 0x02
    54a6:	b3 81       	ldd	r27, Z+3	; 0x03
    54a8:	01 97       	sbiw	r24, 0x01	; 1
    54aa:	a1 09       	sbc	r26, r1
    54ac:	b1 09       	sbc	r27, r1
    54ae:	f9 01       	movw	r30, r18
    54b0:	80 83       	st	Z, r24
    54b2:	91 83       	std	Z+1, r25	; 0x01
    54b4:	a2 83       	std	Z+2, r26	; 0x02
    54b6:	b3 83       	std	Z+3, r27	; 0x03
				case '5':
					DIO_setPinVAlue(DIO_PORTD,PIN7,OUTPUT_LOW);
					break;
				case '6':
					/*control servo motor using potentiometer*/
					while(servo_adjust_time)
    54b8:	fe 01       	movw	r30, r28
    54ba:	e3 50       	subi	r30, 0x03	; 3
    54bc:	ff 4f       	sbci	r31, 0xFF	; 255
    54be:	80 81       	ld	r24, Z
    54c0:	91 81       	ldd	r25, Z+1	; 0x01
    54c2:	a2 81       	ldd	r26, Z+2	; 0x02
    54c4:	b3 81       	ldd	r27, Z+3	; 0x03
    54c6:	00 97       	sbiw	r24, 0x00	; 0
    54c8:	a1 05       	cpc	r26, r1
    54ca:	b1 05       	cpc	r27, r1
    54cc:	61 f6       	brne	.-104    	; 0x5466 <main+0x1b28>
						valueADC=ADC_StartConversion(ADC0);
						angle=ADC_To_Angle(valueADC);
						Timer1_Servo(angle);
						servo_adjust_time--;
					}
					servo_adjust_time=20000;
    54ce:	fe 01       	movw	r30, r28
    54d0:	e3 50       	subi	r30, 0x03	; 3
    54d2:	ff 4f       	sbci	r31, 0xFF	; 255
    54d4:	80 e2       	ldi	r24, 0x20	; 32
    54d6:	9e e4       	ldi	r25, 0x4E	; 78
    54d8:	a0 e0       	ldi	r26, 0x00	; 0
    54da:	b0 e0       	ldi	r27, 0x00	; 0
    54dc:	80 83       	st	Z, r24
    54de:	91 83       	std	Z+1, r25	; 0x01
    54e0:	a2 83       	std	Z+2, r26	; 0x02
    54e2:	b3 83       	std	Z+3, r27	; 0x03
    54e4:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <main+0x718>
				default:
					break;
			}
		}
	}
	return 0;
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	90 e0       	ldi	r25, 0x00	; 0
}
    54ec:	cb 5e       	subi	r28, 0xEB	; 235
    54ee:	de 4f       	sbci	r29, 0xFE	; 254
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	f8 94       	cli
    54f4:	de bf       	out	0x3e, r29	; 62
    54f6:	0f be       	out	0x3f, r0	; 63
    54f8:	cd bf       	out	0x3d, r28	; 61
    54fa:	cf 91       	pop	r28
    54fc:	df 91       	pop	r29
    54fe:	1f 91       	pop	r17
    5500:	0f 91       	pop	r16
    5502:	08 95       	ret

00005504 <ComparePasswords>:

static uint8 ComparePasswords(uint8 *pass1 , uint8 *pass2 )
{
    5504:	df 93       	push	r29
    5506:	cf 93       	push	r28
    5508:	00 d0       	rcall	.+0      	; 0x550a <ComparePasswords+0x6>
    550a:	00 d0       	rcall	.+0      	; 0x550c <ComparePasswords+0x8>
    550c:	0f 92       	push	r0
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
    5512:	9a 83       	std	Y+2, r25	; 0x02
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	7c 83       	std	Y+4, r23	; 0x04
    5518:	6b 83       	std	Y+3, r22	; 0x03
	if(pass1[0]==pass2[3]&&pass1[1]==pass2[2]&&pass1[2]==pass2[1]&&pass1[3]==pass2[0])
    551a:	e9 81       	ldd	r30, Y+1	; 0x01
    551c:	fa 81       	ldd	r31, Y+2	; 0x02
    551e:	20 81       	ld	r18, Z
    5520:	8b 81       	ldd	r24, Y+3	; 0x03
    5522:	9c 81       	ldd	r25, Y+4	; 0x04
    5524:	fc 01       	movw	r30, r24
    5526:	33 96       	adiw	r30, 0x03	; 3
    5528:	80 81       	ld	r24, Z
    552a:	28 17       	cp	r18, r24
    552c:	29 f5       	brne	.+74     	; 0x5578 <ComparePasswords+0x74>
    552e:	89 81       	ldd	r24, Y+1	; 0x01
    5530:	9a 81       	ldd	r25, Y+2	; 0x02
    5532:	fc 01       	movw	r30, r24
    5534:	31 96       	adiw	r30, 0x01	; 1
    5536:	20 81       	ld	r18, Z
    5538:	8b 81       	ldd	r24, Y+3	; 0x03
    553a:	9c 81       	ldd	r25, Y+4	; 0x04
    553c:	fc 01       	movw	r30, r24
    553e:	32 96       	adiw	r30, 0x02	; 2
    5540:	80 81       	ld	r24, Z
    5542:	28 17       	cp	r18, r24
    5544:	c9 f4       	brne	.+50     	; 0x5578 <ComparePasswords+0x74>
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	9a 81       	ldd	r25, Y+2	; 0x02
    554a:	fc 01       	movw	r30, r24
    554c:	32 96       	adiw	r30, 0x02	; 2
    554e:	20 81       	ld	r18, Z
    5550:	8b 81       	ldd	r24, Y+3	; 0x03
    5552:	9c 81       	ldd	r25, Y+4	; 0x04
    5554:	fc 01       	movw	r30, r24
    5556:	31 96       	adiw	r30, 0x01	; 1
    5558:	80 81       	ld	r24, Z
    555a:	28 17       	cp	r18, r24
    555c:	69 f4       	brne	.+26     	; 0x5578 <ComparePasswords+0x74>
    555e:	89 81       	ldd	r24, Y+1	; 0x01
    5560:	9a 81       	ldd	r25, Y+2	; 0x02
    5562:	fc 01       	movw	r30, r24
    5564:	33 96       	adiw	r30, 0x03	; 3
    5566:	90 81       	ld	r25, Z
    5568:	eb 81       	ldd	r30, Y+3	; 0x03
    556a:	fc 81       	ldd	r31, Y+4	; 0x04
    556c:	80 81       	ld	r24, Z
    556e:	98 17       	cp	r25, r24
    5570:	19 f4       	brne	.+6      	; 0x5578 <ComparePasswords+0x74>
	{
		return TRUE;
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	8d 83       	std	Y+5, r24	; 0x05
    5576:	01 c0       	rjmp	.+2      	; 0x557a <ComparePasswords+0x76>
	}
	else
	{
		return FALSE;
    5578:	1d 82       	std	Y+5, r1	; 0x05
    557a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    557c:	0f 90       	pop	r0
    557e:	0f 90       	pop	r0
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	0f 90       	pop	r0
    5586:	cf 91       	pop	r28
    5588:	df 91       	pop	r29
    558a:	08 95       	ret

0000558c <__mulsi3>:
    558c:	62 9f       	mul	r22, r18
    558e:	d0 01       	movw	r26, r0
    5590:	73 9f       	mul	r23, r19
    5592:	f0 01       	movw	r30, r0
    5594:	82 9f       	mul	r24, r18
    5596:	e0 0d       	add	r30, r0
    5598:	f1 1d       	adc	r31, r1
    559a:	64 9f       	mul	r22, r20
    559c:	e0 0d       	add	r30, r0
    559e:	f1 1d       	adc	r31, r1
    55a0:	92 9f       	mul	r25, r18
    55a2:	f0 0d       	add	r31, r0
    55a4:	83 9f       	mul	r24, r19
    55a6:	f0 0d       	add	r31, r0
    55a8:	74 9f       	mul	r23, r20
    55aa:	f0 0d       	add	r31, r0
    55ac:	65 9f       	mul	r22, r21
    55ae:	f0 0d       	add	r31, r0
    55b0:	99 27       	eor	r25, r25
    55b2:	72 9f       	mul	r23, r18
    55b4:	b0 0d       	add	r27, r0
    55b6:	e1 1d       	adc	r30, r1
    55b8:	f9 1f       	adc	r31, r25
    55ba:	63 9f       	mul	r22, r19
    55bc:	b0 0d       	add	r27, r0
    55be:	e1 1d       	adc	r30, r1
    55c0:	f9 1f       	adc	r31, r25
    55c2:	bd 01       	movw	r22, r26
    55c4:	cf 01       	movw	r24, r30
    55c6:	11 24       	eor	r1, r1
    55c8:	08 95       	ret

000055ca <__udivmodqi4>:
    55ca:	99 1b       	sub	r25, r25
    55cc:	79 e0       	ldi	r23, 0x09	; 9
    55ce:	04 c0       	rjmp	.+8      	; 0x55d8 <__udivmodqi4_ep>

000055d0 <__udivmodqi4_loop>:
    55d0:	99 1f       	adc	r25, r25
    55d2:	96 17       	cp	r25, r22
    55d4:	08 f0       	brcs	.+2      	; 0x55d8 <__udivmodqi4_ep>
    55d6:	96 1b       	sub	r25, r22

000055d8 <__udivmodqi4_ep>:
    55d8:	88 1f       	adc	r24, r24
    55da:	7a 95       	dec	r23
    55dc:	c9 f7       	brne	.-14     	; 0x55d0 <__udivmodqi4_loop>
    55de:	80 95       	com	r24
    55e0:	08 95       	ret

000055e2 <__divmodhi4>:
    55e2:	97 fb       	bst	r25, 7
    55e4:	09 2e       	mov	r0, r25
    55e6:	07 26       	eor	r0, r23
    55e8:	0a d0       	rcall	.+20     	; 0x55fe <__divmodhi4_neg1>
    55ea:	77 fd       	sbrc	r23, 7
    55ec:	04 d0       	rcall	.+8      	; 0x55f6 <__divmodhi4_neg2>
    55ee:	49 d0       	rcall	.+146    	; 0x5682 <__udivmodhi4>
    55f0:	06 d0       	rcall	.+12     	; 0x55fe <__divmodhi4_neg1>
    55f2:	00 20       	and	r0, r0
    55f4:	1a f4       	brpl	.+6      	; 0x55fc <__divmodhi4_exit>

000055f6 <__divmodhi4_neg2>:
    55f6:	70 95       	com	r23
    55f8:	61 95       	neg	r22
    55fa:	7f 4f       	sbci	r23, 0xFF	; 255

000055fc <__divmodhi4_exit>:
    55fc:	08 95       	ret

000055fe <__divmodhi4_neg1>:
    55fe:	f6 f7       	brtc	.-4      	; 0x55fc <__divmodhi4_exit>
    5600:	90 95       	com	r25
    5602:	81 95       	neg	r24
    5604:	9f 4f       	sbci	r25, 0xFF	; 255
    5606:	08 95       	ret

00005608 <__udivmodsi4>:
    5608:	a1 e2       	ldi	r26, 0x21	; 33
    560a:	1a 2e       	mov	r1, r26
    560c:	aa 1b       	sub	r26, r26
    560e:	bb 1b       	sub	r27, r27
    5610:	fd 01       	movw	r30, r26
    5612:	0d c0       	rjmp	.+26     	; 0x562e <__udivmodsi4_ep>

00005614 <__udivmodsi4_loop>:
    5614:	aa 1f       	adc	r26, r26
    5616:	bb 1f       	adc	r27, r27
    5618:	ee 1f       	adc	r30, r30
    561a:	ff 1f       	adc	r31, r31
    561c:	a2 17       	cp	r26, r18
    561e:	b3 07       	cpc	r27, r19
    5620:	e4 07       	cpc	r30, r20
    5622:	f5 07       	cpc	r31, r21
    5624:	20 f0       	brcs	.+8      	; 0x562e <__udivmodsi4_ep>
    5626:	a2 1b       	sub	r26, r18
    5628:	b3 0b       	sbc	r27, r19
    562a:	e4 0b       	sbc	r30, r20
    562c:	f5 0b       	sbc	r31, r21

0000562e <__udivmodsi4_ep>:
    562e:	66 1f       	adc	r22, r22
    5630:	77 1f       	adc	r23, r23
    5632:	88 1f       	adc	r24, r24
    5634:	99 1f       	adc	r25, r25
    5636:	1a 94       	dec	r1
    5638:	69 f7       	brne	.-38     	; 0x5614 <__udivmodsi4_loop>
    563a:	60 95       	com	r22
    563c:	70 95       	com	r23
    563e:	80 95       	com	r24
    5640:	90 95       	com	r25
    5642:	9b 01       	movw	r18, r22
    5644:	ac 01       	movw	r20, r24
    5646:	bd 01       	movw	r22, r26
    5648:	cf 01       	movw	r24, r30
    564a:	08 95       	ret

0000564c <__divmodsi4>:
    564c:	97 fb       	bst	r25, 7
    564e:	09 2e       	mov	r0, r25
    5650:	05 26       	eor	r0, r21
    5652:	0e d0       	rcall	.+28     	; 0x5670 <__divmodsi4_neg1>
    5654:	57 fd       	sbrc	r21, 7
    5656:	04 d0       	rcall	.+8      	; 0x5660 <__divmodsi4_neg2>
    5658:	d7 df       	rcall	.-82     	; 0x5608 <__udivmodsi4>
    565a:	0a d0       	rcall	.+20     	; 0x5670 <__divmodsi4_neg1>
    565c:	00 1c       	adc	r0, r0
    565e:	38 f4       	brcc	.+14     	; 0x566e <__divmodsi4_exit>

00005660 <__divmodsi4_neg2>:
    5660:	50 95       	com	r21
    5662:	40 95       	com	r20
    5664:	30 95       	com	r19
    5666:	21 95       	neg	r18
    5668:	3f 4f       	sbci	r19, 0xFF	; 255
    566a:	4f 4f       	sbci	r20, 0xFF	; 255
    566c:	5f 4f       	sbci	r21, 0xFF	; 255

0000566e <__divmodsi4_exit>:
    566e:	08 95       	ret

00005670 <__divmodsi4_neg1>:
    5670:	f6 f7       	brtc	.-4      	; 0x566e <__divmodsi4_exit>
    5672:	90 95       	com	r25
    5674:	80 95       	com	r24
    5676:	70 95       	com	r23
    5678:	61 95       	neg	r22
    567a:	7f 4f       	sbci	r23, 0xFF	; 255
    567c:	8f 4f       	sbci	r24, 0xFF	; 255
    567e:	9f 4f       	sbci	r25, 0xFF	; 255
    5680:	08 95       	ret

00005682 <__udivmodhi4>:
    5682:	aa 1b       	sub	r26, r26
    5684:	bb 1b       	sub	r27, r27
    5686:	51 e1       	ldi	r21, 0x11	; 17
    5688:	07 c0       	rjmp	.+14     	; 0x5698 <__udivmodhi4_ep>

0000568a <__udivmodhi4_loop>:
    568a:	aa 1f       	adc	r26, r26
    568c:	bb 1f       	adc	r27, r27
    568e:	a6 17       	cp	r26, r22
    5690:	b7 07       	cpc	r27, r23
    5692:	10 f0       	brcs	.+4      	; 0x5698 <__udivmodhi4_ep>
    5694:	a6 1b       	sub	r26, r22
    5696:	b7 0b       	sbc	r27, r23

00005698 <__udivmodhi4_ep>:
    5698:	88 1f       	adc	r24, r24
    569a:	99 1f       	adc	r25, r25
    569c:	5a 95       	dec	r21
    569e:	a9 f7       	brne	.-22     	; 0x568a <__udivmodhi4_loop>
    56a0:	80 95       	com	r24
    56a2:	90 95       	com	r25
    56a4:	bc 01       	movw	r22, r24
    56a6:	cd 01       	movw	r24, r26
    56a8:	08 95       	ret

000056aa <__prologue_saves__>:
    56aa:	2f 92       	push	r2
    56ac:	3f 92       	push	r3
    56ae:	4f 92       	push	r4
    56b0:	5f 92       	push	r5
    56b2:	6f 92       	push	r6
    56b4:	7f 92       	push	r7
    56b6:	8f 92       	push	r8
    56b8:	9f 92       	push	r9
    56ba:	af 92       	push	r10
    56bc:	bf 92       	push	r11
    56be:	cf 92       	push	r12
    56c0:	df 92       	push	r13
    56c2:	ef 92       	push	r14
    56c4:	ff 92       	push	r15
    56c6:	0f 93       	push	r16
    56c8:	1f 93       	push	r17
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    56d2:	ca 1b       	sub	r28, r26
    56d4:	db 0b       	sbc	r29, r27
    56d6:	0f b6       	in	r0, 0x3f	; 63
    56d8:	f8 94       	cli
    56da:	de bf       	out	0x3e, r29	; 62
    56dc:	0f be       	out	0x3f, r0	; 63
    56de:	cd bf       	out	0x3d, r28	; 61
    56e0:	09 94       	ijmp

000056e2 <__epilogue_restores__>:
    56e2:	2a 88       	ldd	r2, Y+18	; 0x12
    56e4:	39 88       	ldd	r3, Y+17	; 0x11
    56e6:	48 88       	ldd	r4, Y+16	; 0x10
    56e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    56ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    56ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    56ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    56f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    56f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    56f4:	b9 84       	ldd	r11, Y+9	; 0x09
    56f6:	c8 84       	ldd	r12, Y+8	; 0x08
    56f8:	df 80       	ldd	r13, Y+7	; 0x07
    56fa:	ee 80       	ldd	r14, Y+6	; 0x06
    56fc:	fd 80       	ldd	r15, Y+5	; 0x05
    56fe:	0c 81       	ldd	r16, Y+4	; 0x04
    5700:	1b 81       	ldd	r17, Y+3	; 0x03
    5702:	aa 81       	ldd	r26, Y+2	; 0x02
    5704:	b9 81       	ldd	r27, Y+1	; 0x01
    5706:	ce 0f       	add	r28, r30
    5708:	d1 1d       	adc	r29, r1
    570a:	0f b6       	in	r0, 0x3f	; 63
    570c:	f8 94       	cli
    570e:	de bf       	out	0x3e, r29	; 62
    5710:	0f be       	out	0x3f, r0	; 63
    5712:	cd bf       	out	0x3d, r28	; 61
    5714:	ed 01       	movw	r28, r26
    5716:	08 95       	ret

00005718 <_exit>:
    5718:	f8 94       	cli

0000571a <__stop_program>:
    571a:	ff cf       	rjmp	.-2      	; 0x571a <__stop_program>
