
Smart_Home_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ac8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00003ac8  00003b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000029c4  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c48  00000000  00000000  000065b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000074a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000090f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000ad8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000aeec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b947  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 84 10 	call	0x2108	; 0x2108 <main>
      7a:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 ef       	ldi	r26, 0xF7	; 247
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 ef       	ldi	r24, 0xF7	; 247
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
#include "ADC_config.h"
#include "ADC_private.h"
#include "ADC_interface.h"

void ADC_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/*choosind the reference voltage*/
#if VOLTAGR_REF == AREF
	CLR_BIT(ADMUX, REFS1);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS0);
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 7b       	andi	r24, 0xBF	; 191
     b58:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS1);
	SET_BIT(ADMUX, REFS0);
#endif
	
	/*setting the bits for Left adjust*/
	SET_BIT(ADMUX, ADCLAR);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	8c 93       	st	X, r24
	
	/*set ADC as single conversion*/
	CLR_BIT(ADCSRA, ADATE);
     b68:	a6 e2       	ldi	r26, 0x26	; 38
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e6 e2       	ldi	r30, 0x26	; 38
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 7d       	andi	r24, 0xDF	; 223
     b74:	8c 93       	st	X, r24
	
	/*disable interrupt*/
	CLR_BIT(ADCSRA, ADIE);
     b76:	a6 e2       	ldi	r26, 0x26	; 38
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	87 7f       	andi	r24, 0xF7	; 247
     b82:	8c 93       	st	X, r24
	
	/*choosing the prescaler*/
	CLR_BIT(ADCSRA,ADPS2);
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8d 7f       	andi	r24, 0xFD	; 253
     b9e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS0);
     ba0:	a6 e2       	ldi	r26, 0x26	; 38
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 e2       	ldi	r30, 0x26	; 38
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8e 7f       	andi	r24, 0xFE	; 254
     bac:	8c 93       	st	X, r24
	ADCSRA |=ADC_PRESCALER;
     bae:	a6 e2       	ldi	r26, 0x26	; 38
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e6 e2       	ldi	r30, 0x26	; 38
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	87 60       	ori	r24, 0x07	; 7
     bba:	8c 93       	st	X, r24
	/*enable ADC*/
	SET_BIT(ADCSRA, ADEN);
     bbc:	a6 e2       	ldi	r26, 0x26	; 38
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e6 e2       	ldi	r30, 0x26	; 38
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	8c 93       	st	X, r24
}
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <ADC_StartConversion>:

uint8 ADC_StartConversion(uint8 copy_channel)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
	/*choosing the ADC channel*/
	ADMUX &= 0b11100000;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24
	ADMUX |= copy_channel;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADSC);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24
	
	while(!GET_BIT(ADCSRA,ADIF));
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	8f 70       	andi	r24, 0x0F	; 15
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	a9 f3       	breq	.-22     	; 0xc08 <ADC_StartConversion+0x38>
	
	/*clearing the flag*/
	SET_BIT(ADCSRA,ADIF);
     c1e:	a6 e2       	ldi	r26, 0x26	; 38
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e6 e2       	ldi	r30, 0x26	; 38
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	80 61       	ori	r24, 0x10	; 16
     c2a:	8c 93       	st	X, r24
	return ADCH;
     c2c:	e5 e2       	ldi	r30, 0x25	; 37
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
}
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <setPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Register.h"

uint8 setPinDirection(uint8  Copy_Port ,  uint8 Copy_Pin ,  uint8 Copy_Direction)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	28 97       	sbiw	r28, 0x08	; 8
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	8a 83       	std	Y+2, r24	; 0x02
     c50:	6b 83       	std	Y+3, r22	; 0x03
     c52:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
     c54:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 30       	cpi	r24, 0x08	; 8
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <setPinDirection+0x24>
     c5c:	f3 c0       	rjmp	.+486    	; 0xe44 <setPinDirection+0x20a>
	{
		if(Copy_Direction == OUTPUT)
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <setPinDirection+0x2c>
     c64:	72 c0       	rjmp	.+228    	; 0xd4a <setPinDirection+0x110>
		{
			switch(Copy_Port)
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	38 87       	std	Y+8, r19	; 0x08
     c6e:	2f 83       	std	Y+7, r18	; 0x07
     c70:	8f 81       	ldd	r24, Y+7	; 0x07
     c72:	98 85       	ldd	r25, Y+8	; 0x08
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	91 05       	cpc	r25, r1
     c78:	49 f1       	breq	.+82     	; 0xccc <setPinDirection+0x92>
     c7a:	2f 81       	ldd	r18, Y+7	; 0x07
     c7c:	38 85       	ldd	r19, Y+8	; 0x08
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	2c f4       	brge	.+10     	; 0xc8e <setPinDirection+0x54>
     c84:	8f 81       	ldd	r24, Y+7	; 0x07
     c86:	98 85       	ldd	r25, Y+8	; 0x08
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	61 f0       	breq	.+24     	; 0xca4 <setPinDirection+0x6a>
     c8c:	5b c0       	rjmp	.+182    	; 0xd44 <setPinDirection+0x10a>
     c8e:	2f 81       	ldd	r18, Y+7	; 0x07
     c90:	38 85       	ldd	r19, Y+8	; 0x08
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	71 f1       	breq	.+92     	; 0xcf4 <setPinDirection+0xba>
     c98:	8f 81       	ldd	r24, Y+7	; 0x07
     c9a:	98 85       	ldd	r25, Y+8	; 0x08
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	91 05       	cpc	r25, r1
     ca0:	e9 f1       	breq	.+122    	; 0xd1c <setPinDirection+0xe2>
     ca2:	50 c0       	rjmp	.+160    	; 0xd44 <setPinDirection+0x10a>
			{
				case DIO_PORTA:
					SETBIT(DDRA,Copy_Pin);
     ca4:	aa e3       	ldi	r26, 0x3A	; 58
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <setPinDirection+0x88>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <setPinDirection+0x84>
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	bc c0       	rjmp	.+376    	; 0xe44 <setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					SETBIT(DDRB,Copy_Pin);
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <setPinDirection+0xb0>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <setPinDirection+0xac>
     cee:	84 2b       	or	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	a8 c0       	rjmp	.+336    	; 0xe44 <setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					SETBIT(DDRC,Copy_Pin);
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <setPinDirection+0xd8>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <setPinDirection+0xd4>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	94 c0       	rjmp	.+296    	; 0xe44 <setPinDirection+0x20a>
						break;
				case DIO_PORTD:
					SETBIT(DDRD,Copy_Pin);
     d1c:	a1 e3       	ldi	r26, 0x31	; 49
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <setPinDirection+0x100>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <setPinDirection+0xfc>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	80 c0       	rjmp	.+256    	; 0xe44 <setPinDirection+0x20a>
					break;
				default:
					local_ErrorStatus=1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	7d c0       	rjmp	.+250    	; 0xe44 <setPinDirection+0x20a>
					break;
			}
		}
		else if (Copy_Direction == INPUT)
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	88 23       	and	r24, r24
     d4e:	09 f0       	breq	.+2      	; 0xd52 <setPinDirection+0x118>
     d50:	77 c0       	rjmp	.+238    	; 0xe40 <setPinDirection+0x206>
		{
			switch(Copy_Port)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	3e 83       	std	Y+6, r19	; 0x06
     d5a:	2d 83       	std	Y+5, r18	; 0x05
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	91 05       	cpc	r25, r1
     d64:	59 f1       	breq	.+86     	; 0xdbc <setPinDirection+0x182>
     d66:	2d 81       	ldd	r18, Y+5	; 0x05
     d68:	3e 81       	ldd	r19, Y+6	; 0x06
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	31 05       	cpc	r19, r1
     d6e:	2c f4       	brge	.+10     	; 0xd7a <setPinDirection+0x140>
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f0       	breq	.+26     	; 0xd92 <setPinDirection+0x158>
     d78:	60 c0       	rjmp	.+192    	; 0xe3a <setPinDirection+0x200>
     d7a:	2d 81       	ldd	r18, Y+5	; 0x05
     d7c:	3e 81       	ldd	r19, Y+6	; 0x06
     d7e:	22 30       	cpi	r18, 0x02	; 2
     d80:	31 05       	cpc	r19, r1
     d82:	89 f1       	breq	.+98     	; 0xde6 <setPinDirection+0x1ac>
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <setPinDirection+0x156>
     d8e:	40 c0       	rjmp	.+128    	; 0xe10 <setPinDirection+0x1d6>
     d90:	54 c0       	rjmp	.+168    	; 0xe3a <setPinDirection+0x200>
			{
				case DIO_PORTA:
					CLEARBIT(DDRA,Copy_Pin);
     d92:	aa e3       	ldi	r26, 0x3A	; 58
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ea e3       	ldi	r30, 0x3A	; 58
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <setPinDirection+0x176>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <setPinDirection+0x172>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	44 c0       	rjmp	.+136    	; 0xe44 <setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					CLEARBIT(DDRB,Copy_Pin);
     dbc:	a7 e3       	ldi	r26, 0x37	; 55
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <setPinDirection+0x1a0>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <setPinDirection+0x19c>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	2f c0       	rjmp	.+94     	; 0xe44 <setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					CLEARBIT(DDRC,Copy_Pin);
     de6:	a4 e3       	ldi	r26, 0x34	; 52
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e4 e3       	ldi	r30, 0x34	; 52
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <setPinDirection+0x1ca>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <setPinDirection+0x1c6>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	1a c0       	rjmp	.+52     	; 0xe44 <setPinDirection+0x20a>
						break;
				case DIO_PORTD:
					CLEARBIT(DDRD,Copy_Pin);
     e10:	a1 e3       	ldi	r26, 0x31	; 49
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e1 e3       	ldi	r30, 0x31	; 49
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <setPinDirection+0x1f4>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <setPinDirection+0x1f0>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <setPinDirection+0x20a>
					break;
				default:
					local_ErrorStatus=1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <setPinDirection+0x20a>
			}
		}

		else
		{
			local_ErrorStatus=1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return local_ErrorStatus;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
}
     e46:	28 96       	adiw	r28, 0x08	; 8
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <setPinVAlue>:

uint8 setPinVAlue(uint8  Copy_Port ,  uint8 Copy_Pin ,  uint8 Copy_Status)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	28 97       	sbiw	r28, 0x08	; 8
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	8a 83       	std	Y+2, r24	; 0x02
     e6e:	6b 83       	std	Y+3, r22	; 0x03
     e70:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
     e72:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	88 30       	cpi	r24, 0x08	; 8
     e78:	08 f0       	brcs	.+2      	; 0xe7c <setPinVAlue+0x24>
     e7a:	f3 c0       	rjmp	.+486    	; 0x1062 <setPinVAlue+0x20a>
	{
		if(Copy_Status == OUTPUT_HIGH)
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	09 f0       	breq	.+2      	; 0xe84 <setPinVAlue+0x2c>
     e82:	72 c0       	rjmp	.+228    	; 0xf68 <setPinVAlue+0x110>
		{
			switch(Copy_Port)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	38 87       	std	Y+8, r19	; 0x08
     e8c:	2f 83       	std	Y+7, r18	; 0x07
     e8e:	8f 81       	ldd	r24, Y+7	; 0x07
     e90:	98 85       	ldd	r25, Y+8	; 0x08
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	49 f1       	breq	.+82     	; 0xeea <setPinVAlue+0x92>
     e98:	2f 81       	ldd	r18, Y+7	; 0x07
     e9a:	38 85       	ldd	r19, Y+8	; 0x08
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	2c f4       	brge	.+10     	; 0xeac <setPinVAlue+0x54>
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	61 f0       	breq	.+24     	; 0xec2 <setPinVAlue+0x6a>
     eaa:	5b c0       	rjmp	.+182    	; 0xf62 <setPinVAlue+0x10a>
     eac:	2f 81       	ldd	r18, Y+7	; 0x07
     eae:	38 85       	ldd	r19, Y+8	; 0x08
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	71 f1       	breq	.+92     	; 0xf12 <setPinVAlue+0xba>
     eb6:	8f 81       	ldd	r24, Y+7	; 0x07
     eb8:	98 85       	ldd	r25, Y+8	; 0x08
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	e9 f1       	breq	.+122    	; 0xf3a <setPinVAlue+0xe2>
     ec0:	50 c0       	rjmp	.+160    	; 0xf62 <setPinVAlue+0x10a>
			{
				case DIO_PORTA:
					SETBIT(PORTA,Copy_Pin);
     ec2:	ab e3       	ldi	r26, 0x3B	; 59
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e3       	ldi	r30, 0x3B	; 59
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <setPinVAlue+0x88>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <setPinVAlue+0x84>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	bc c0       	rjmp	.+376    	; 0x1062 <setPinVAlue+0x20a>
					break;
				case DIO_PORTB:
					SETBIT(PORTB,Copy_Pin);
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <setPinVAlue+0xb0>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <setPinVAlue+0xac>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	a8 c0       	rjmp	.+336    	; 0x1062 <setPinVAlue+0x20a>
					break;
				case DIO_PORTC:
					SETBIT(PORTC,Copy_Pin);
     f12:	a5 e3       	ldi	r26, 0x35	; 53
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e3       	ldi	r30, 0x35	; 53
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <setPinVAlue+0xd8>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <setPinVAlue+0xd4>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	94 c0       	rjmp	.+296    	; 0x1062 <setPinVAlue+0x20a>
						break;
				case DIO_PORTD:
					SETBIT(PORTD,Copy_Pin);
     f3a:	a2 e3       	ldi	r26, 0x32	; 50
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e2 e3       	ldi	r30, 0x32	; 50
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <setPinVAlue+0x100>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <setPinVAlue+0xfc>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	80 c0       	rjmp	.+256    	; 0x1062 <setPinVAlue+0x20a>
					break;
				default:
					local_ErrorStatus=1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	7d c0       	rjmp	.+250    	; 0x1062 <setPinVAlue+0x20a>
					break;
			}
		}
		else if (Copy_Status == OUTPUT_LOW)
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <setPinVAlue+0x118>
     f6e:	77 c0       	rjmp	.+238    	; 0x105e <setPinVAlue+0x206>
		{
			switch(Copy_Port)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3e 83       	std	Y+6, r19	; 0x06
     f78:	2d 83       	std	Y+5, r18	; 0x05
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	59 f1       	breq	.+86     	; 0xfda <setPinVAlue+0x182>
     f84:	2d 81       	ldd	r18, Y+5	; 0x05
     f86:	3e 81       	ldd	r19, Y+6	; 0x06
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <setPinVAlue+0x140>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	69 f0       	breq	.+26     	; 0xfb0 <setPinVAlue+0x158>
     f96:	60 c0       	rjmp	.+192    	; 0x1058 <setPinVAlue+0x200>
     f98:	2d 81       	ldd	r18, Y+5	; 0x05
     f9a:	3e 81       	ldd	r19, Y+6	; 0x06
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	89 f1       	breq	.+98     	; 0x1004 <setPinVAlue+0x1ac>
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <setPinVAlue+0x156>
     fac:	40 c0       	rjmp	.+128    	; 0x102e <setPinVAlue+0x1d6>
     fae:	54 c0       	rjmp	.+168    	; 0x1058 <setPinVAlue+0x200>
			{
				case DIO_PORTA:
					CLEARBIT(PORTA,Copy_Pin);
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <setPinVAlue+0x176>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <setPinVAlue+0x172>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	44 c0       	rjmp	.+136    	; 0x1062 <setPinVAlue+0x20a>
					break;
				case DIO_PORTB:
					CLEARBIT(PORTB,Copy_Pin);
     fda:	a8 e3       	ldi	r26, 0x38	; 56
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e8 e3       	ldi	r30, 0x38	; 56
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <setPinVAlue+0x1a0>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <setPinVAlue+0x19c>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	2f c0       	rjmp	.+94     	; 0x1062 <setPinVAlue+0x20a>
					break;
				case DIO_PORTC:
					CLEARBIT(PORTC,Copy_Pin);
    1004:	a5 e3       	ldi	r26, 0x35	; 53
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e3       	ldi	r30, 0x35	; 53
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <setPinVAlue+0x1ca>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <setPinVAlue+0x1c6>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	1a c0       	rjmp	.+52     	; 0x1062 <setPinVAlue+0x20a>
						break;
				case DIO_PORTD:
					CLEARBIT(PORTD,Copy_Pin);
    102e:	a2 e3       	ldi	r26, 0x32	; 50
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e2 e3       	ldi	r30, 0x32	; 50
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <setPinVAlue+0x1f4>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <setPinVAlue+0x1f0>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <setPinVAlue+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <setPinVAlue+0x20a>
			}
		}

		else
		{
			local_ErrorStatus=1;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return local_ErrorStatus;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
}
    1064:	28 96       	adiw	r28, 0x08	; 8
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_SetPortDirection>:

uint8 DIO_SetPortDirection (uint8 Copy_Port, uint8 Copy_Direction )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <DIO_SetPortDirection+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_SetPortDirection+0x8>
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    1088:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_Port)
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3d 83       	std	Y+5, r19	; 0x05
    1092:	2c 83       	std	Y+4, r18	; 0x04
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	91 05       	cpc	r25, r1
    109c:	d1 f0       	breq	.+52     	; 0x10d2 <DIO_SetPortDirection+0x5c>
    109e:	2c 81       	ldd	r18, Y+4	; 0x04
    10a0:	3d 81       	ldd	r19, Y+5	; 0x05
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	2c f4       	brge	.+10     	; 0x10b2 <DIO_SetPortDirection+0x3c>
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	61 f0       	breq	.+24     	; 0x10c8 <DIO_SetPortDirection+0x52>
    10b0:	1f c0       	rjmp	.+62     	; 0x10f0 <DIO_SetPortDirection+0x7a>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	81 f0       	breq	.+32     	; 0x10dc <DIO_SetPortDirection+0x66>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	81 f0       	breq	.+32     	; 0x10e6 <DIO_SetPortDirection+0x70>
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <DIO_SetPortDirection+0x7a>
					{
						case DIO_PORTA:
							DDRA= Copy_Direction;
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	80 83       	st	Z, r24
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <DIO_SetPortDirection+0x7e>
							break;
						case DIO_PORTB:
							DDRB=Copy_Direction;
    10d2:	e7 e3       	ldi	r30, 0x37	; 55
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	80 83       	st	Z, r24
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <DIO_SetPortDirection+0x7e>
							break;
						case DIO_PORTC:
							DDRC=Copy_Direction;
    10dc:	e4 e3       	ldi	r30, 0x34	; 52
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	80 83       	st	Z, r24
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <DIO_SetPortDirection+0x7e>
								break;
						case DIO_PORTD:
							DDRD=Copy_Direction;
    10e6:	e1 e3       	ldi	r30, 0x31	; 49
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	80 83       	st	Z, r24
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_SetPortDirection+0x7e>
							break;
						default:
							local_ErrorStatus=1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	89 83       	std	Y+1, r24	; 0x01
							break;
					}

		return local_ErrorStatus;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <DIO_SetPortValue>:


uint8 DIO_SetPortValue  (uint8 Copy_Port ,   uint8 Copy_Value )

{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <DIO_SetPortValue+0x6>
    110c:	00 d0       	rcall	.+0      	; 0x110e <DIO_SetPortValue+0x8>
    110e:	0f 92       	push	r0
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	8a 83       	std	Y+2, r24	; 0x02
    1116:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    1118:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_Port)
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3d 83       	std	Y+5, r19	; 0x05
    1122:	2c 83       	std	Y+4, r18	; 0x04
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	d1 f0       	breq	.+52     	; 0x1162 <DIO_SetPortValue+0x5c>
    112e:	2c 81       	ldd	r18, Y+4	; 0x04
    1130:	3d 81       	ldd	r19, Y+5	; 0x05
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <DIO_SetPortValue+0x3c>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <DIO_SetPortValue+0x52>
    1140:	1f c0       	rjmp	.+62     	; 0x1180 <DIO_SetPortValue+0x7a>
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	3d 81       	ldd	r19, Y+5	; 0x05
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	81 f0       	breq	.+32     	; 0x116c <DIO_SetPortValue+0x66>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	81 f0       	breq	.+32     	; 0x1176 <DIO_SetPortValue+0x70>
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <DIO_SetPortValue+0x7a>
					{
						case DIO_PORTA:
							PORTA=Copy_Value;
    1158:	eb e3       	ldi	r30, 0x3B	; 59
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	80 83       	st	Z, r24
    1160:	11 c0       	rjmp	.+34     	; 0x1184 <DIO_SetPortValue+0x7e>
							break;
						case DIO_PORTB:
							PORTB=Copy_Value;
    1162:	e8 e3       	ldi	r30, 0x38	; 56
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	80 83       	st	Z, r24
    116a:	0c c0       	rjmp	.+24     	; 0x1184 <DIO_SetPortValue+0x7e>
							break;
						case DIO_PORTC:
							PORTC=Copy_Value;
    116c:	e5 e3       	ldi	r30, 0x35	; 53
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	80 83       	st	Z, r24
    1174:	07 c0       	rjmp	.+14     	; 0x1184 <DIO_SetPortValue+0x7e>
								break;
						case DIO_PORTD:
							PORTD=Copy_Value;
    1176:	e2 e3       	ldi	r30, 0x32	; 50
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	80 83       	st	Z, r24
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_SetPortValue+0x7e>
							break;
						default:
							local_ErrorStatus=1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
							break;
					}


	return local_ErrorStatus;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_GetPinValue>:

uint8 DIO_GetPinValue (uint8 Copy_uint8_Port , uint8 Copy_uint8_Pin , uint8* Copy_uint8_Value)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	27 97       	sbiw	r28, 0x07	; 7
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	6b 83       	std	Y+3, r22	; 0x03
    11ae:	5d 83       	std	Y+5, r21	; 0x05
    11b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    11b2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_uint8_Value!=NULL &&Copy_uint8_Pin <=7 )
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	09 f4       	brne	.+2      	; 0x11be <DIO_GetPinValue+0x28>
    11bc:	78 c0       	rjmp	.+240    	; 0x12ae <DIO_GetPinValue+0x118>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 30       	cpi	r24, 0x08	; 8
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <DIO_GetPinValue+0x30>
    11c4:	74 c0       	rjmp	.+232    	; 0x12ae <DIO_GetPinValue+0x118>
	{

		switch(Copy_uint8_Port)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3f 83       	std	Y+7, r19	; 0x07
    11ce:	2e 83       	std	Y+6, r18	; 0x06
    11d0:	4e 81       	ldd	r20, Y+6	; 0x06
    11d2:	5f 81       	ldd	r21, Y+7	; 0x07
    11d4:	41 30       	cpi	r20, 0x01	; 1
    11d6:	51 05       	cpc	r21, r1
    11d8:	59 f1       	breq	.+86     	; 0x1230 <DIO_GetPinValue+0x9a>
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	91 05       	cpc	r25, r1
    11e2:	34 f4       	brge	.+12     	; 0x11f0 <DIO_GetPinValue+0x5a>
    11e4:	2e 81       	ldd	r18, Y+6	; 0x06
    11e6:	3f 81       	ldd	r19, Y+7	; 0x07
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	69 f0       	breq	.+26     	; 0x1208 <DIO_GetPinValue+0x72>
    11ee:	5c c0       	rjmp	.+184    	; 0x12a8 <DIO_GetPinValue+0x112>
    11f0:	4e 81       	ldd	r20, Y+6	; 0x06
    11f2:	5f 81       	ldd	r21, Y+7	; 0x07
    11f4:	42 30       	cpi	r20, 0x02	; 2
    11f6:	51 05       	cpc	r21, r1
    11f8:	79 f1       	breq	.+94     	; 0x1258 <DIO_GetPinValue+0xc2>
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	9f 81       	ldd	r25, Y+7	; 0x07
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <DIO_GetPinValue+0x70>
    1204:	3d c0       	rjmp	.+122    	; 0x1280 <DIO_GetPinValue+0xea>
    1206:	50 c0       	rjmp	.+160    	; 0x12a8 <DIO_GetPinValue+0x112>
		{
			case DIO_PORTA:
				*Copy_uint8_Value = GETBIT(PINA , Copy_uint8_Pin);
    1208:	e9 e3       	ldi	r30, 0x39	; 57
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_GetPinValue+0x8a>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_GetPinValue+0x86>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	ec 81       	ldd	r30, Y+4	; 0x04
    122a:	fd 81       	ldd	r31, Y+5	; 0x05
    122c:	80 83       	st	Z, r24
    122e:	41 c0       	rjmp	.+130    	; 0x12b2 <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTB:
				*Copy_uint8_Value = GETBIT(PINB , Copy_uint8_Pin);
    1230:	e6 e3       	ldi	r30, 0x36	; 54
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_GetPinValue+0xb2>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_GetPinValue+0xae>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	ec 81       	ldd	r30, Y+4	; 0x04
    1252:	fd 81       	ldd	r31, Y+5	; 0x05
    1254:	80 83       	st	Z, r24
    1256:	2d c0       	rjmp	.+90     	; 0x12b2 <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTC:
				*Copy_uint8_Value = GETBIT(PINC , Copy_uint8_Pin);
    1258:	e3 e3       	ldi	r30, 0x33	; 51
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_GetPinValue+0xda>
    126c:	55 95       	asr	r21
    126e:	47 95       	ror	r20
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_GetPinValue+0xd6>
    1274:	ca 01       	movw	r24, r20
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	ec 81       	ldd	r30, Y+4	; 0x04
    127a:	fd 81       	ldd	r31, Y+5	; 0x05
    127c:	80 83       	st	Z, r24
    127e:	19 c0       	rjmp	.+50     	; 0x12b2 <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTD:
				*Copy_uint8_Value = GETBIT(PIND , Copy_uint8_Pin);
    1280:	e0 e3       	ldi	r30, 0x30	; 48
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_GetPinValue+0x102>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_GetPinValue+0xfe>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	ec 81       	ldd	r30, Y+4	; 0x04
    12a2:	fd 81       	ldd	r31, Y+5	; 0x05
    12a4:	80 83       	st	Z, r24
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <DIO_GetPinValue+0x11c>
				break;
			default:
				local_ErrorStatus=1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_GetPinValue+0x11c>
				break;
		}
	}
	else
	{
		local_ErrorStatus=1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_ErrorStatus;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b4:	27 96       	adiw	r28, 0x07	; 7
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <DIO_setInternalPullUp>:

uint8 DIO_setInternalPullUp(uint8  Copy_Port ,  uint8 Copy_Pin)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_setInternalPullUp+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_setInternalPullUp+0x8>
    12ce:	0f 92       	push	r0
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    12d8:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <DIO_setInternalPullUp+0x1c>
    12e0:	c0 c0       	rjmp	.+384    	; 0x1462 <DIO_setInternalPullUp+0x19c>
	{
			switch(Copy_Port)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	2c 83       	std	Y+4, r18	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <DIO_setInternalPullUp+0x32>
    12f6:	3e c0       	rjmp	.+124    	; 0x1374 <DIO_setInternalPullUp+0xae>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <DIO_setInternalPullUp+0x46>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	71 f0       	breq	.+28     	; 0x1326 <DIO_setInternalPullUp+0x60>
    130a:	a9 c0       	rjmp	.+338    	; 0x145e <DIO_setInternalPullUp+0x198>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <DIO_setInternalPullUp+0x52>
    1316:	55 c0       	rjmp	.+170    	; 0x13c2 <DIO_setInternalPullUp+0xfc>
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <DIO_setInternalPullUp+0x5e>
    1322:	76 c0       	rjmp	.+236    	; 0x1410 <DIO_setInternalPullUp+0x14a>
    1324:	9c c0       	rjmp	.+312    	; 0x145e <DIO_setInternalPullUp+0x198>
			{
				case DIO_PORTA:
					CLEARBIT(DDRA, Copy_Pin);
    1326:	aa e3       	ldi	r26, 0x3A	; 58
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	ea e3       	ldi	r30, 0x3A	; 58
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_setInternalPullUp+0x7c>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	2a 95       	dec	r18
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_setInternalPullUp+0x78>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
					SETBIT(PORTA, Copy_Pin);
    134c:	ab e3       	ldi	r26, 0x3B	; 59
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e3       	ldi	r30, 0x3B	; 59
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_setInternalPullUp+0xa4>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_setInternalPullUp+0xa0>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	77 c0       	rjmp	.+238    	; 0x1462 <DIO_setInternalPullUp+0x19c>
					break;
				case DIO_PORTB:
					CLEARBIT(DDRB,Copy_Pin);
    1374:	a7 e3       	ldi	r26, 0x37	; 55
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e7 e3       	ldi	r30, 0x37	; 55
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_setInternalPullUp+0xca>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	2a 95       	dec	r18
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_setInternalPullUp+0xc6>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
					SETBIT(PORTB, Copy_Pin);
    139a:	a8 e3       	ldi	r26, 0x38	; 56
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_setInternalPullUp+0xf2>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_setInternalPullUp+0xee>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	50 c0       	rjmp	.+160    	; 0x1462 <DIO_setInternalPullUp+0x19c>
					break;
				case DIO_PORTC:
					CLEARBIT(DDRC,Copy_Pin);
    13c2:	a4 e3       	ldi	r26, 0x34	; 52
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e4 e3       	ldi	r30, 0x34	; 52
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_setInternalPullUp+0x118>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	2a 95       	dec	r18
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_setInternalPullUp+0x114>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
					SETBIT(PORTC, Copy_Pin);
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_setInternalPullUp+0x140>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_setInternalPullUp+0x13c>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	29 c0       	rjmp	.+82     	; 0x1462 <DIO_setInternalPullUp+0x19c>
						break;
				case DIO_PORTD:
					CLEARBIT(DDRD,Copy_Pin);
    1410:	a1 e3       	ldi	r26, 0x31	; 49
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_setInternalPullUp+0x166>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	2a 95       	dec	r18
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_setInternalPullUp+0x162>
    1430:	80 95       	com	r24
    1432:	84 23       	and	r24, r20
    1434:	8c 93       	st	X, r24
					SETBIT(PORTD, Copy_Pin);
    1436:	a2 e3       	ldi	r26, 0x32	; 50
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e2 e3       	ldi	r30, 0x32	; 50
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_setInternalPullUp+0x18e>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_setInternalPullUp+0x18a>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_setInternalPullUp+0x19c>
					break;
				default:
					local_ErrorStatus=1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
	}

	return local_ErrorStatus;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <get_button_pressed>:
#include "LCD_Interface.h"
#include "Keypad_config.h"
#include "Keypad_Interface.h"

uint8 get_button_pressed(void)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	6a 97       	sbiw	r28, 0x1a	; 26
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
	uint8 row=0,column=0;
    1488:	1b 82       	std	Y+3, r1	; 0x03
    148a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 buttonStatus=0xff;
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	8c 83       	std	Y+4, r24	; 0x04
	uint8 buttonPressed = 0xff;
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	89 83       	std	Y+1, r24	; 0x01
	uint8 buttonArray[ROW_NUM][COL_NUM]={{'7','8','9','/'},
										 {'4','5','6','*'},
										 {'1','2','3','-'},
										 {'C','0','=','+'}};
    1494:	ce 01       	movw	r24, r28
    1496:	05 96       	adiw	r24, 0x05	; 5
    1498:	9f 8b       	std	Y+23, r25	; 0x17
    149a:	8e 8b       	std	Y+22, r24	; 0x16
    149c:	ef ef       	ldi	r30, 0xFF	; 255
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	f9 8f       	std	Y+25, r31	; 0x19
    14a2:	e8 8f       	std	Y+24, r30	; 0x18
    14a4:	f0 e1       	ldi	r31, 0x10	; 16
    14a6:	fa 8f       	std	Y+26, r31	; 0x1a
    14a8:	e8 8d       	ldd	r30, Y+24	; 0x18
    14aa:	f9 8d       	ldd	r31, Y+25	; 0x19
    14ac:	00 80       	ld	r0, Z
    14ae:	88 8d       	ldd	r24, Y+24	; 0x18
    14b0:	99 8d       	ldd	r25, Y+25	; 0x19
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	99 8f       	std	Y+25, r25	; 0x19
    14b6:	88 8f       	std	Y+24, r24	; 0x18
    14b8:	ee 89       	ldd	r30, Y+22	; 0x16
    14ba:	ff 89       	ldd	r31, Y+23	; 0x17
    14bc:	00 82       	st	Z, r0
    14be:	8e 89       	ldd	r24, Y+22	; 0x16
    14c0:	9f 89       	ldd	r25, Y+23	; 0x17
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	9f 8b       	std	Y+23, r25	; 0x17
    14c6:	8e 8b       	std	Y+22, r24	; 0x16
    14c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14ca:	91 50       	subi	r25, 0x01	; 1
    14cc:	9a 8f       	std	Y+26, r25	; 0x1a
    14ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14d0:	ee 23       	and	r30, r30
    14d2:	51 f7       	brne	.-44     	; 0x14a8 <get_button_pressed+0x34>

	for(column=4;column<8;column++)
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	4b c0       	rjmp	.+150    	; 0x1570 <get_button_pressed+0xfc>
	{
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_LOW);
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	6a 81       	ldd	r22, Y+2	; 0x02
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
		for(row=0;row<4;row++)
    14e4:	1b 82       	std	Y+3, r1	; 0x03
    14e6:	39 c0       	rjmp	.+114    	; 0x155a <get_button_pressed+0xe6>
		{
			DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
    14e8:	9e 01       	movw	r18, r28
    14ea:	2c 5f       	subi	r18, 0xFC	; 252
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	6b 81       	ldd	r22, Y+3	; 0x03
    14f2:	a9 01       	movw	r20, r18
    14f4:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_GetPinValue>
			if(buttonStatus==LOW)
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	88 23       	and	r24, r24
    14fc:	59 f5       	brne	.+86     	; 0x1554 <get_button_pressed+0xe0>
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <get_button_pressed+0x9c>
			{
				while(buttonStatus==LOW)
				{
					DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
    1500:	9e 01       	movw	r18, r28
    1502:	2c 5f       	subi	r18, 0xFC	; 252
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	6b 81       	ldd	r22, Y+3	; 0x03
    150a:	a9 01       	movw	r20, r18
    150c:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_GetPinValue>
		for(row=0;row<4;row++)
		{
			DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
			if(buttonStatus==LOW)
			{
				while(buttonStatus==LOW)
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	88 23       	and	r24, r24
    1514:	a9 f3       	breq	.-22     	; 0x1500 <get_button_pressed+0x8c>
				{
					DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
				}
				setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	6a 81       	ldd	r22, Y+2	; 0x02
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
				buttonPressed= buttonArray[row][column-4];
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	ac 01       	movw	r20, r24
    152e:	44 50       	subi	r20, 0x04	; 4
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	22 0f       	add	r18, r18
    1534:	33 1f       	adc	r19, r19
    1536:	22 0f       	add	r18, r18
    1538:	33 1f       	adc	r19, r19
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	84 0f       	add	r24, r20
    1544:	95 1f       	adc	r25, r21
    1546:	fc 01       	movw	r30, r24
    1548:	34 96       	adiw	r30, 0x04	; 4
    154a:	80 81       	ld	r24, Z
    154c:	89 83       	std	Y+1, r24	; 0x01
				return buttonPressed;
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	fd 8b       	std	Y+21, r31	; 0x15
    1552:	14 c0       	rjmp	.+40     	; 0x157c <get_button_pressed+0x108>
										 {'C','0','=','+'}};

	for(column=4;column<8;column++)
	{
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_LOW);
		for(row=0;row<4;row++)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8b 83       	std	Y+3, r24	; 0x03
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	20 f2       	brcs	.-120    	; 0x14e8 <get_button_pressed+0x74>
				setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
				buttonPressed= buttonArray[row][column-4];
				return buttonPressed;
			}
		}
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	6a 81       	ldd	r22, Y+2	; 0x02
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
	uint8 buttonArray[ROW_NUM][COL_NUM]={{'7','8','9','/'},
										 {'4','5','6','*'},
										 {'1','2','3','-'},
										 {'C','0','=','+'}};

	for(column=4;column<8;column++)
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 30       	cpi	r24, 0x08	; 8
    1574:	08 f4       	brcc	.+2      	; 0x1578 <get_button_pressed+0x104>
    1576:	b1 cf       	rjmp	.-158    	; 0x14da <get_button_pressed+0x66>
			}
		}
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
	}

	return buttonPressed;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	8d 8b       	std	Y+21, r24	; 0x15
    157c:	8d 89       	ldd	r24, Y+21	; 0x15
}
    157e:	6a 96       	adiw	r28, 0x1a	; 26
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <LCD_init>:
#define MODE MODE_8BITS // <-- Enter choice : ( MODE_4BITS or MODE_8BITS)

#if(MODE==MODE_8BITS)

void LCD_init(void)
{
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	c6 54       	subi	r28, 0x46	; 70
    159e:	d0 40       	sbci	r29, 0x00	; 0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	fe 01       	movw	r30, r28
    15ac:	ed 5b       	subi	r30, 0xBD	; 189
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 ea       	ldi	r26, 0xA0	; 160
    15b6:	b1 e4       	ldi	r27, 0x41	; 65
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	8e 01       	movw	r16, r28
    15c2:	01 5c       	subi	r16, 0xC1	; 193
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	fe 01       	movw	r30, r28
    15c8:	ed 5b       	subi	r30, 0xBD	; 189
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a e7       	ldi	r20, 0x7A	; 122
    15da:	55 e4       	ldi	r21, 0x45	; 69
    15dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ee:	fe 01       	movw	r30, r28
    15f0:	ff 96       	adiw	r30, 0x3f	; 63
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <LCD_init+0x84>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e af       	std	Y+62, r25	; 0x3e
    1610:	8d af       	std	Y+61, r24	; 0x3d
    1612:	46 c0       	rjmp	.+140    	; 0x16a0 <LCD_init+0x110>
	else if (__tmp > 65535)
    1614:	fe 01       	movw	r30, r28
    1616:	ff 96       	adiw	r30, 0x3f	; 63
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	3f ef       	ldi	r19, 0xFF	; 255
    1624:	4f e7       	ldi	r20, 0x7F	; 127
    1626:	57 e4       	ldi	r21, 0x47	; 71
    1628:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    162c:	18 16       	cp	r1, r24
    162e:	64 f5       	brge	.+88     	; 0x1688 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1630:	fe 01       	movw	r30, r28
    1632:	ed 5b       	subi	r30, 0xBD	; 189
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e af       	std	Y+62, r25	; 0x3e
    165c:	8d af       	std	Y+61, r24	; 0x3d
    165e:	0f c0       	rjmp	.+30     	; 0x167e <LCD_init+0xee>
    1660:	80 e9       	ldi	r24, 0x90	; 144
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	9c af       	std	Y+60, r25	; 0x3c
    1666:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1668:	8b ad       	ldd	r24, Y+59	; 0x3b
    166a:	9c ad       	ldd	r25, Y+60	; 0x3c
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_init+0xdc>
    1670:	9c af       	std	Y+60, r25	; 0x3c
    1672:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	8d ad       	ldd	r24, Y+61	; 0x3d
    1676:	9e ad       	ldd	r25, Y+62	; 0x3e
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9e af       	std	Y+62, r25	; 0x3e
    167c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1680:	9e ad       	ldd	r25, Y+62	; 0x3e
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	69 f7       	brne	.-38     	; 0x1660 <LCD_init+0xd0>
    1686:	16 c0       	rjmp	.+44     	; 0x16b4 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	fe 01       	movw	r30, r28
    168a:	ff 96       	adiw	r30, 0x3f	; 63
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e af       	std	Y+62, r25	; 0x3e
    169e:	8d af       	std	Y+61, r24	; 0x3d
    16a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a4:	9a af       	std	Y+58, r25	; 0x3a
    16a6:	89 af       	std	Y+57, r24	; 0x39
    16a8:	89 ad       	ldd	r24, Y+57	; 0x39
    16aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <LCD_init+0x11c>
    16b0:	9a af       	std	Y+58, r25	; 0x3a
    16b2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_cmd(0x38); //Function set
    16b4:	88 e3       	ldi	r24, 0x38	; 56
    16b6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	bf e3       	ldi	r27, 0x3F	; 63
    16c2:	8d ab       	std	Y+53, r24	; 0x35
    16c4:	9e ab       	std	Y+54, r25	; 0x36
    16c6:	af ab       	std	Y+55, r26	; 0x37
    16c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	7e a9       	ldd	r23, Y+54	; 0x36
    16ce:	8f a9       	ldd	r24, Y+55	; 0x37
    16d0:	98 ad       	ldd	r25, Y+56	; 0x38
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a e7       	ldi	r20, 0x7A	; 122
    16d8:	55 e4       	ldi	r21, 0x45	; 69
    16da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	89 ab       	std	Y+49, r24	; 0x31
    16e4:	9a ab       	std	Y+50, r25	; 0x32
    16e6:	ab ab       	std	Y+51, r26	; 0x33
    16e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ea:	69 a9       	ldd	r22, Y+49	; 0x31
    16ec:	7a a9       	ldd	r23, Y+50	; 0x32
    16ee:	8b a9       	ldd	r24, Y+51	; 0x33
    16f0:	9c a9       	ldd	r25, Y+52	; 0x34
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <LCD_init+0x17c>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	98 ab       	std	Y+48, r25	; 0x30
    1708:	8f a7       	std	Y+47, r24	; 0x2f
    170a:	3f c0       	rjmp	.+126    	; 0x178a <LCD_init+0x1fa>
	else if (__tmp > 65535)
    170c:	69 a9       	ldd	r22, Y+49	; 0x31
    170e:	7a a9       	ldd	r23, Y+50	; 0x32
    1710:	8b a9       	ldd	r24, Y+51	; 0x33
    1712:	9c a9       	ldd	r25, Y+52	; 0x34
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <LCD_init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6d a9       	ldd	r22, Y+53	; 0x35
    1726:	7e a9       	ldd	r23, Y+54	; 0x36
    1728:	8f a9       	ldd	r24, Y+55	; 0x37
    172a:	98 ad       	ldd	r25, Y+56	; 0x38
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
    174c:	0f c0       	rjmp	.+30     	; 0x176c <LCD_init+0x1dc>
    174e:	80 e9       	ldi	r24, 0x90	; 144
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	9e a7       	std	Y+46, r25	; 0x2e
    1754:	8d a7       	std	Y+45, r24	; 0x2d
    1756:	8d a5       	ldd	r24, Y+45	; 0x2d
    1758:	9e a5       	ldd	r25, Y+46	; 0x2e
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <LCD_init+0x1ca>
    175e:	9e a7       	std	Y+46, r25	; 0x2e
    1760:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8f a5       	ldd	r24, Y+47	; 0x2f
    1764:	98 a9       	ldd	r25, Y+48	; 0x30
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8f a5       	ldd	r24, Y+47	; 0x2f
    176e:	98 a9       	ldd	r25, Y+48	; 0x30
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <LCD_init+0x1be>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <LCD_init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	69 a9       	ldd	r22, Y+49	; 0x31
    1778:	7a a9       	ldd	r23, Y+50	; 0x32
    177a:	8b a9       	ldd	r24, Y+51	; 0x33
    177c:	9c a9       	ldd	r25, Y+52	; 0x34
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	98 ab       	std	Y+48, r25	; 0x30
    1788:	8f a7       	std	Y+47, r24	; 0x2f
    178a:	8f a5       	ldd	r24, Y+47	; 0x2f
    178c:	98 a9       	ldd	r25, Y+48	; 0x30
    178e:	9c a7       	std	Y+44, r25	; 0x2c
    1790:	8b a7       	std	Y+43, r24	; 0x2b
    1792:	8b a5       	ldd	r24, Y+43	; 0x2b
    1794:	9c a5       	ldd	r25, Y+44	; 0x2c
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_init+0x206>
    179a:	9c a7       	std	Y+44, r25	; 0x2c
    179c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_cmd(0x0c);//Display on/off control
    179e:	8c e0       	ldi	r24, 0x0C	; 12
    17a0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e8       	ldi	r26, 0x80	; 128
    17aa:	bf e3       	ldi	r27, 0x3F	; 63
    17ac:	8f a3       	std	Y+39, r24	; 0x27
    17ae:	98 a7       	std	Y+40, r25	; 0x28
    17b0:	a9 a7       	std	Y+41, r26	; 0x29
    17b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6f a1       	ldd	r22, Y+39	; 0x27
    17b6:	78 a5       	ldd	r23, Y+40	; 0x28
    17b8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	55 e4       	ldi	r21, 0x45	; 69
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8b a3       	std	Y+35, r24	; 0x23
    17ce:	9c a3       	std	Y+36, r25	; 0x24
    17d0:	ad a3       	std	Y+37, r26	; 0x25
    17d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d4:	6b a1       	ldd	r22, Y+35	; 0x23
    17d6:	7c a1       	ldd	r23, Y+36	; 0x24
    17d8:	8d a1       	ldd	r24, Y+37	; 0x25
    17da:	9e a1       	ldd	r25, Y+38	; 0x26
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <LCD_init+0x266>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9a a3       	std	Y+34, r25	; 0x22
    17f2:	89 a3       	std	Y+33, r24	; 0x21
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <LCD_init+0x2e4>
	else if (__tmp > 65535)
    17f6:	6b a1       	ldd	r22, Y+35	; 0x23
    17f8:	7c a1       	ldd	r23, Y+36	; 0x24
    17fa:	8d a1       	ldd	r24, Y+37	; 0x25
    17fc:	9e a1       	ldd	r25, Y+38	; 0x26
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <LCD_init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6f a1       	ldd	r22, Y+39	; 0x27
    1810:	78 a5       	ldd	r23, Y+40	; 0x28
    1812:	89 a5       	ldd	r24, Y+41	; 0x29
    1814:	9a a5       	ldd	r25, Y+42	; 0x2a
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9a a3       	std	Y+34, r25	; 0x22
    1834:	89 a3       	std	Y+33, r24	; 0x21
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <LCD_init+0x2c6>
    1838:	80 e9       	ldi	r24, 0x90	; 144
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	98 a3       	std	Y+32, r25	; 0x20
    183e:	8f 8f       	std	Y+31, r24	; 0x1f
    1840:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1842:	98 a1       	ldd	r25, Y+32	; 0x20
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_init+0x2b4>
    1848:	98 a3       	std	Y+32, r25	; 0x20
    184a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9a a3       	std	Y+34, r25	; 0x22
    1854:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <LCD_init+0x2a8>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <LCD_init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6b a1       	ldd	r22, Y+35	; 0x23
    1862:	7c a1       	ldd	r23, Y+36	; 0x24
    1864:	8d a1       	ldd	r24, Y+37	; 0x25
    1866:	9e a1       	ldd	r25, Y+38	; 0x26
    1868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9a a3       	std	Y+34, r25	; 0x22
    1872:	89 a3       	std	Y+33, r24	; 0x21
    1874:	89 a1       	ldd	r24, Y+33	; 0x21
    1876:	9a a1       	ldd	r25, Y+34	; 0x22
    1878:	9e 8f       	std	Y+30, r25	; 0x1e
    187a:	8d 8f       	std	Y+29, r24	; 0x1d
    187c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    187e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_init+0x2f0>
    1884:	9e 8f       	std	Y+30, r25	; 0x1e
    1886:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_cmd(0x01);// Display clear
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>
    188e:	8a e0       	ldi	r24, 0x0A	; 10
    1890:	97 ed       	ldi	r25, 0xD7	; 215
    1892:	a3 ec       	ldi	r26, 0xC3	; 195
    1894:	bf e3       	ldi	r27, 0x3F	; 63
    1896:	89 8f       	std	Y+25, r24	; 0x19
    1898:	9a 8f       	std	Y+26, r25	; 0x1a
    189a:	ab 8f       	std	Y+27, r26	; 0x1b
    189c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	69 8d       	ldd	r22, Y+25	; 0x19
    18a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a e7       	ldi	r20, 0x7A	; 122
    18ac:	55 e4       	ldi	r21, 0x45	; 69
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8d 8b       	std	Y+21, r24	; 0x15
    18b8:	9e 8b       	std	Y+22, r25	; 0x16
    18ba:	af 8b       	std	Y+23, r26	; 0x17
    18bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18be:	6d 89       	ldd	r22, Y+21	; 0x15
    18c0:	7e 89       	ldd	r23, Y+22	; 0x16
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <LCD_init+0x350>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9c 8b       	std	Y+20, r25	; 0x14
    18dc:	8b 8b       	std	Y+19, r24	; 0x13
    18de:	3f c0       	rjmp	.+126    	; 0x195e <LCD_init+0x3ce>
	else if (__tmp > 65535)
    18e0:	6d 89       	ldd	r22, Y+21	; 0x15
    18e2:	7e 89       	ldd	r23, Y+22	; 0x16
    18e4:	8f 89       	ldd	r24, Y+23	; 0x17
    18e6:	98 8d       	ldd	r25, Y+24	; 0x18
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <LCD_init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	69 8d       	ldd	r22, Y+25	; 0x19
    18fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9c 8b       	std	Y+20, r25	; 0x14
    191e:	8b 8b       	std	Y+19, r24	; 0x13
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_init+0x3b0>
    1922:	80 e9       	ldi	r24, 0x90	; 144
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	9a 8b       	std	Y+18, r25	; 0x12
    1928:	89 8b       	std	Y+17, r24	; 0x11
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	9a 89       	ldd	r25, Y+18	; 0x12
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_init+0x39e>
    1932:	9a 8b       	std	Y+18, r25	; 0x12
    1934:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8b 89       	ldd	r24, Y+19	; 0x13
    1938:	9c 89       	ldd	r25, Y+20	; 0x14
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_init+0x392>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <LCD_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9c 8b       	std	Y+20, r25	; 0x14
    195c:	8b 8b       	std	Y+19, r24	; 0x13
    195e:	8b 89       	ldd	r24, Y+19	; 0x13
    1960:	9c 89       	ldd	r25, Y+20	; 0x14
    1962:	98 8b       	std	Y+16, r25	; 0x10
    1964:	8f 87       	std	Y+15, r24	; 0x0f
    1966:	8f 85       	ldd	r24, Y+15	; 0x0f
    1968:	98 89       	ldd	r25, Y+16	; 0x10
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_init+0x3da>
    196e:	98 8b       	std	Y+16, r25	; 0x10
    1970:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1.53);
	LCD_cmd(0x06); //Entry mode set   06
    1972:	86 e0       	ldi	r24, 0x06	; 6
    1974:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e8       	ldi	r26, 0x80	; 128
    197e:	bf e3       	ldi	r27, 0x3F	; 63
    1980:	8b 87       	std	Y+11, r24	; 0x0b
    1982:	9c 87       	std	Y+12, r25	; 0x0c
    1984:	ad 87       	std	Y+13, r26	; 0x0d
    1986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6b 85       	ldd	r22, Y+11	; 0x0b
    198a:	7c 85       	ldd	r23, Y+12	; 0x0c
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a e7       	ldi	r20, 0x7A	; 122
    1996:	55 e4       	ldi	r21, 0x45	; 69
    1998:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8f 83       	std	Y+7, r24	; 0x07
    19a2:	98 87       	std	Y+8, r25	; 0x08
    19a4:	a9 87       	std	Y+9, r26	; 0x09
    19a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_init+0x43a>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_init+0x4b8>
	else if (__tmp > 65535)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_init+0x49a>
    1a0c:	80 e9       	ldi	r24, 0x90	; 144
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_init+0x488>
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_init+0x47c>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <LCD_init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_init+0x4c4>
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a5c:	ca 5b       	subi	r28, 0xBA	; 186
    1a5e:	df 4f       	sbci	r29, 0xFF	; 255
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <LCD_cmd>:


void LCD_cmd(uint8 cmd)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	2f 97       	sbiw	r28, 0x0f	; 15
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DATA =cmd; //Data lines are set to send command - PORTB=LCD_DATA
    1a8a:	e8 e3       	ldi	r30, 0x38	; 56
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a90:	80 83       	st	Z, r24
	setPinVAlue(LCD_CONTROL,RS,OUTPUT_LOW); //RS =0 to send instruction code
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	67 e0       	ldi	r22, 0x07	; 7
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
	setPinVAlue(LCD_CONTROL,RW,OUTPUT_LOW); //RW =0 to write
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	66 e0       	ldi	r22, 0x06	; 6
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
	// to write data, EN needs negative edge
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_HIGH);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	65 e0       	ldi	r22, 0x05	; 5
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e4       	ldi	r27, 0x40	; 64
    1ab8:	8b 87       	std	Y+11, r24	; 0x0b
    1aba:	9c 87       	std	Y+12, r25	; 0x0c
    1abc:	ad 87       	std	Y+13, r26	; 0x0d
    1abe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a e7       	ldi	r20, 0x7A	; 122
    1ace:	55 e4       	ldi	r21, 0x45	; 69
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
    1ada:	98 87       	std	Y+8, r25	; 0x08
    1adc:	a9 87       	std	Y+9, r26	; 0x09
    1ade:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <LCD_cmd+0x8e>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <LCD_cmd+0x10c>
	else if (__tmp > 65535)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <LCD_cmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <LCD_cmd+0xee>
    1b44:	80 e9       	ldi	r24, 0x90	; 144
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_cmd+0xdc>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <LCD_cmd+0xd0>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <LCD_cmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_cmd+0x118>
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	65 e0       	ldi	r22, 0x05	; 5
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
}
    1b9e:	2f 96       	adiw	r28, 0x0f	; 15
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <LCD_Write_data>:

void LCD_Write_data(uint8 data)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	2f 97       	sbiw	r28, 0x0f	; 15
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DATA =data; //data lines are set to send data - PORTB=LCD_DATA
    1bc6:	e8 e3       	ldi	r30, 0x38	; 56
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bcc:	80 83       	st	Z, r24
	setPinVAlue(LCD_CONTROL,RS,OUTPUT_HIGH); //RS =1 to display data
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	67 e0       	ldi	r22, 0x07	; 7
    1bd2:	41 e0       	ldi	r20, 0x01	; 1
    1bd4:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
	setPinVAlue(LCD_CONTROL,RW,OUTPUT_LOW); //RW =0 to write
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	66 e0       	ldi	r22, 0x06	; 6
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
	// to write data, EN needs negative edge
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_HIGH);
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	65 e0       	ldi	r22, 0x05	; 5
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e4       	ldi	r27, 0x40	; 64
    1bf4:	8b 87       	std	Y+11, r24	; 0x0b
    1bf6:	9c 87       	std	Y+12, r25	; 0x0c
    1bf8:	ad 87       	std	Y+13, r26	; 0x0d
    1bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	55 e4       	ldi	r21, 0x45	; 69
    1c0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	98 87       	std	Y+8, r25	; 0x08
    1c18:	a9 87       	std	Y+9, r26	; 0x09
    1c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <LCD_Write_data+0x8e>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <LCD_Write_data+0x10c>
	else if (__tmp > 65535)
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <LCD_Write_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <LCD_Write_data+0xee>
    1c80:	80 e9       	ldi	r24, 0x90	; 144
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_Write_data+0xdc>
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <LCD_Write_data+0xd0>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <LCD_Write_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_Write_data+0x118>
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	65 e0       	ldi	r22, 0x05	; 5
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
}
    1cda:	2f 96       	adiw	r28, 0x0f	; 15
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_GoToXY>:
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
}
#endif

void LCD_GoToXY(uint8 copy_xPosition, uint8 copy_yPosition)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <LCD_GoToXY+0x6>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_xPosition==FirstLine)
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	88 23       	and	r24, r24
    1cfe:	29 f4       	brne	.+10     	; 0x1d0a <LCD_GoToXY+0x1e>
	{
		LCD_cmd(0x80 + copy_yPosition);
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	80 58       	subi	r24, 0x80	; 128
    1d04:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>
    1d08:	07 c0       	rjmp	.+14     	; 0x1d18 <LCD_GoToXY+0x2c>
	}
	else if(copy_xPosition==SecondLine)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <LCD_GoToXY+0x2c>
	{
		LCD_cmd(0xc0 + copy_yPosition);
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	80 54       	subi	r24, 0x40	; 64
    1d14:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>

	}
	else{}
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <LCD_SendString>:
void LCD_SendString(const char *copy_string)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <LCD_SendString+0x6>
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_iterator=0;
    1d32:	19 82       	std	Y+1, r1	; 0x01
    1d34:	27 c0       	rjmp	.+78     	; 0x1d84 <LCD_SendString+0x62>
		while(copy_string[local_iterator]!='\0')
		{
			if(local_iterator<16)
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	80 31       	cpi	r24, 0x10	; 16
    1d3a:	78 f4       	brcc	.+30     	; 0x1d5a <LCD_SendString+0x38>
			{
				LCD_Write_data(copy_string[local_iterator]);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
				local_iterator++;
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	15 c0       	rjmp	.+42     	; 0x1d84 <LCD_SendString+0x62>
			}
			else{
				LCD_GoToXY(SecondLine,local_iterator-16);
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	90 51       	subi	r25, 0x10	; 16
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	69 2f       	mov	r22, r25
    1d64:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
				LCD_Write_data(copy_string[local_iterator]);
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	9b 81       	ldd	r25, Y+3	; 0x03
    1d72:	fc 01       	movw	r30, r24
    1d74:	e2 0f       	add	r30, r18
    1d76:	f3 1f       	adc	r31, r19
    1d78:	80 81       	ld	r24, Z
    1d7a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
				local_iterator++;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	89 83       	std	Y+1, r24	; 0x01
	else{}
}
void LCD_SendString(const char *copy_string)
{
	uint8 local_iterator=0;
		while(copy_string[local_iterator]!='\0')
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e2 0f       	add	r30, r18
    1d92:	f3 1f       	adc	r31, r19
    1d94:	80 81       	ld	r24, Z
    1d96:	88 23       	and	r24, r24
    1d98:	71 f6       	brne	.-100    	; 0x1d36 <LCD_SendString+0x14>
				LCD_GoToXY(SecondLine,local_iterator-16);
				LCD_Write_data(copy_string[local_iterator]);
				local_iterator++;
			}
		}
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	LCD_cmd(0x01);// Display clear
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_cmd>

}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <LCD_uint8_WriteNumber>:
void LCD_uint8_WriteNumber(uint8 copy_number)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	ab 97       	sbiw	r28, 0x2b	; 43
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	8b a7       	std	Y+43, r24	; 0x2b
	if(copy_number<10)
    1dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd2:	8a 30       	cpi	r24, 0x0A	; 10
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <LCD_uint8_WriteNumber+0x1e>
    1dd6:	77 c0       	rjmp	.+238    	; 0x1ec6 <LCD_uint8_WriteNumber+0x10c>
	{
		LCD_Write_data(copy_number+'0');
    1dd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dda:	80 5d       	subi	r24, 0xD0	; 208
    1ddc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	aa e7       	ldi	r26, 0x7A	; 122
    1de6:	b4 e4       	ldi	r27, 0x44	; 68
    1de8:	8f a3       	std	Y+39, r24	; 0x27
    1dea:	98 a7       	std	Y+40, r25	; 0x28
    1dec:	a9 a7       	std	Y+41, r26	; 0x29
    1dee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6f a1       	ldd	r22, Y+39	; 0x27
    1df2:	78 a5       	ldd	r23, Y+40	; 0x28
    1df4:	89 a5       	ldd	r24, Y+41	; 0x29
    1df6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a e7       	ldi	r20, 0x7A	; 122
    1dfe:	55 e4       	ldi	r21, 0x45	; 69
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8b a3       	std	Y+35, r24	; 0x23
    1e0a:	9c a3       	std	Y+36, r25	; 0x24
    1e0c:	ad a3       	std	Y+37, r26	; 0x25
    1e0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e10:	6b a1       	ldd	r22, Y+35	; 0x23
    1e12:	7c a1       	ldd	r23, Y+36	; 0x24
    1e14:	8d a1       	ldd	r24, Y+37	; 0x25
    1e16:	9e a1       	ldd	r25, Y+38	; 0x26
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <LCD_uint8_WriteNumber+0x78>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9a a3       	std	Y+34, r25	; 0x22
    1e2e:	89 a3       	std	Y+33, r24	; 0x21
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <LCD_uint8_WriteNumber+0xf6>
	else if (__tmp > 65535)
    1e32:	6b a1       	ldd	r22, Y+35	; 0x23
    1e34:	7c a1       	ldd	r23, Y+36	; 0x24
    1e36:	8d a1       	ldd	r24, Y+37	; 0x25
    1e38:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <LCD_uint8_WriteNumber+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9a a3       	std	Y+34, r25	; 0x22
    1e70:	89 a3       	std	Y+33, r24	; 0x21
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_uint8_WriteNumber+0xd8>
    1e74:	80 e9       	ldi	r24, 0x90	; 144
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	98 a3       	std	Y+32, r25	; 0x20
    1e7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_uint8_WriteNumber+0xc6>
    1e84:	98 a3       	std	Y+32, r25	; 0x20
    1e86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9a a3       	std	Y+34, r25	; 0x22
    1e90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	89 a1       	ldd	r24, Y+33	; 0x21
    1e94:	9a a1       	ldd	r25, Y+34	; 0x22
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <LCD_uint8_WriteNumber+0xba>
    1e9a:	2d c1       	rjmp	.+602    	; 0x20f6 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9a a3       	std	Y+34, r25	; 0x22
    1eae:	89 a3       	std	Y+33, r24	; 0x21
    1eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_uint8_WriteNumber+0x102>
    1ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec4:	18 c1       	rjmp	.+560    	; 0x20f6 <LCD_uint8_WriteNumber+0x33c>
		_delay_ms(1000);
	}
	else if(copy_number<100)
    1ec6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec8:	84 36       	cpi	r24, 0x64	; 100
    1eca:	08 f0       	brcs	.+2      	; 0x1ece <LCD_uint8_WriteNumber+0x114>
    1ecc:	84 c0       	rjmp	.+264    	; 0x1fd6 <LCD_uint8_WriteNumber+0x21c>
	{
		LCD_Write_data(copy_number/10+'0');
    1ece:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed0:	9a e0       	ldi	r25, 0x0A	; 10
    1ed2:	69 2f       	mov	r22, r25
    1ed4:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodqi4>
    1ed8:	80 5d       	subi	r24, 0xD0	; 208
    1eda:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
		LCD_Write_data(copy_number%10+'0');
    1ede:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee0:	9a e0       	ldi	r25, 0x0A	; 10
    1ee2:	69 2f       	mov	r22, r25
    1ee4:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodqi4>
    1ee8:	89 2f       	mov	r24, r25
    1eea:	80 5d       	subi	r24, 0xD0	; 208
    1eec:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	aa e7       	ldi	r26, 0x7A	; 122
    1ef6:	b4 e4       	ldi	r27, 0x44	; 68
    1ef8:	89 8f       	std	Y+25, r24	; 0x19
    1efa:	9a 8f       	std	Y+26, r25	; 0x1a
    1efc:	ab 8f       	std	Y+27, r26	; 0x1b
    1efe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	69 8d       	ldd	r22, Y+25	; 0x19
    1f02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a e7       	ldi	r20, 0x7A	; 122
    1f0e:	55 e4       	ldi	r21, 0x45	; 69
    1f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8d 8b       	std	Y+21, r24	; 0x15
    1f1a:	9e 8b       	std	Y+22, r25	; 0x16
    1f1c:	af 8b       	std	Y+23, r26	; 0x17
    1f1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f20:	6d 89       	ldd	r22, Y+21	; 0x15
    1f22:	7e 89       	ldd	r23, Y+22	; 0x16
    1f24:	8f 89       	ldd	r24, Y+23	; 0x17
    1f26:	98 8d       	ldd	r25, Y+24	; 0x18
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_uint8_WriteNumber+0x188>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_uint8_WriteNumber+0x206>
	else if (__tmp > 65535)
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_uint8_WriteNumber+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_uint8_WriteNumber+0x1e8>
    1f84:	80 e9       	ldi	r24, 0x90	; 144
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	9a 8b       	std	Y+18, r25	; 0x12
    1f8a:	89 8b       	std	Y+17, r24	; 0x11
    1f8c:	89 89       	ldd	r24, Y+17	; 0x11
    1f8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_uint8_WriteNumber+0x1d6>
    1f94:	9a 8b       	std	Y+18, r25	; 0x12
    1f96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_uint8_WriteNumber+0x1ca>
    1faa:	a5 c0       	rjmp	.+330    	; 0x20f6 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6d 89       	ldd	r22, Y+21	; 0x15
    1fae:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc4:	98 8b       	std	Y+16, r25	; 0x10
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f
    1fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fca:	98 89       	ldd	r25, Y+16	; 0x10
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_uint8_WriteNumber+0x212>
    1fd0:	98 8b       	std	Y+16, r25	; 0x10
    1fd2:	8f 87       	std	Y+15, r24	; 0x0f
    1fd4:	90 c0       	rjmp	.+288    	; 0x20f6 <LCD_uint8_WriteNumber+0x33c>
		_delay_ms(1000);
	}
	else if (copy_number<1000)
	{
		LCD_Write_data(copy_number/100+'0');
    1fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd8:	94 e6       	ldi	r25, 0x64	; 100
    1fda:	69 2f       	mov	r22, r25
    1fdc:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodqi4>
    1fe0:	80 5d       	subi	r24, 0xD0	; 208
    1fe2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
		LCD_Write_data((copy_number%100)/10+'0');
    1fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe8:	94 e6       	ldi	r25, 0x64	; 100
    1fea:	69 2f       	mov	r22, r25
    1fec:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodqi4>
    1ff0:	89 2f       	mov	r24, r25
    1ff2:	9a e0       	ldi	r25, 0x0A	; 10
    1ff4:	69 2f       	mov	r22, r25
    1ff6:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodqi4>
    1ffa:	80 5d       	subi	r24, 0xD0	; 208
    1ffc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
		LCD_Write_data(copy_number%10+'0');
    2000:	8b a5       	ldd	r24, Y+43	; 0x2b
    2002:	9a e0       	ldi	r25, 0x0A	; 10
    2004:	69 2f       	mov	r22, r25
    2006:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodqi4>
    200a:	89 2f       	mov	r24, r25
    200c:	80 5d       	subi	r24, 0xD0	; 208
    200e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	aa e7       	ldi	r26, 0x7A	; 122
    2018:	b4 e4       	ldi	r27, 0x44	; 68
    201a:	8b 87       	std	Y+11, r24	; 0x0b
    201c:	9c 87       	std	Y+12, r25	; 0x0c
    201e:	ad 87       	std	Y+13, r26	; 0x0d
    2020:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	55 e4       	ldi	r21, 0x45	; 69
    2032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8f 83       	std	Y+7, r24	; 0x07
    203c:	98 87       	std	Y+8, r25	; 0x08
    203e:	a9 87       	std	Y+9, r26	; 0x09
    2040:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <LCD_uint8_WriteNumber+0x2aa>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <LCD_uint8_WriteNumber+0x328>
	else if (__tmp > 65535)
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <LCD_uint8_WriteNumber+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <LCD_uint8_WriteNumber+0x30a>
    20a6:	80 e9       	ldi	r24, 0x90	; 144
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	8b 83       	std	Y+3, r24	; 0x03
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_uint8_WriteNumber+0x2f8>
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <LCD_uint8_WriteNumber+0x2ec>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6f 81       	ldd	r22, Y+7	; 0x07
    20d0:	78 85       	ldd	r23, Y+8	; 0x08
    20d2:	89 85       	ldd	r24, Y+9	; 0x09
    20d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_uint8_WriteNumber+0x334>
    20f2:	9a 83       	std	Y+2, r25	; 0x02
    20f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
	else{}
}
    20f6:	ab 96       	adiw	r28, 0x2b	; 43
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <main>:
#include "Keypad_config.h"
static uint8 ComparePasswords(uint8 *pass1 , uint8 *pass2 );


int main (void)
{
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	c4 5f       	subi	r28, 0xF4	; 244
    2116:	d0 40       	sbci	r29, 0x00	; 0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
	//DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
	DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);//LCD data
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	6f ef       	ldi	r22, 0xFF	; 255
    2126:	0e 94 3b 08 	call	0x1076	; 0x1076 <DIO_SetPortDirection>
	setPinDirection(DIO_PORTA,PIN5,OUTPUT);// LCD EN
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	65 e0       	ldi	r22, 0x05	; 5
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 1d 06 	call	0xc3a	; 0xc3a <setPinDirection>
	setPinDirection(DIO_PORTA,PIN6,OUTPUT); // LCD R/W
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <setPinDirection>
	setPinDirection(DIO_PORTA,PIN7,OUTPUT); //LCD RS
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	67 e0       	ldi	r22, 0x07	; 7
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 1d 06 	call	0xc3a	; 0xc3a <setPinDirection>
	DIO_SetPortDirection(DIO_PORTC, KEYPAD_Direction);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	60 ef       	ldi	r22, 0xF0	; 240
    214c:	0e 94 3b 08 	call	0x1076	; 0x1076 <DIO_SetPortDirection>
	DIO_SetPortValue(DIO_PORTC,KEYPAD_Value);
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	6f ef       	ldi	r22, 0xFF	; 255
    2154:	0e 94 83 08 	call	0x1106	; 0x1106 <DIO_SetPortValue>
	setPinDirection(DIO_PORTD,PIN7,OUTPUT);//Lights
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	67 e0       	ldi	r22, 0x07	; 7
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <setPinDirection>
	setPinDirection(DIO_PORTD,PIN5,OUTPUT);//Fan
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	65 e0       	ldi	r22, 0x05	; 5
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 1d 06 	call	0xc3a	; 0xc3a <setPinDirection>
	ADC_init();
    216c:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>
	LCD_init();
    2170:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_init>
	uint8 valueADC=0;
    2174:	fe 01       	movw	r30, r28
    2176:	e6 51       	subi	r30, 0x16	; 22
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	10 82       	st	Z, r1
	uint32 analogue=0;
    217c:	fe 01       	movw	r30, r28
    217e:	ea 51       	subi	r30, 0x1A	; 26
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	10 82       	st	Z, r1
    2184:	11 82       	std	Z+1, r1	; 0x01
    2186:	12 82       	std	Z+2, r1	; 0x02
    2188:	13 82       	std	Z+3, r1	; 0x03
	uint8 temprature=0;
    218a:	fe 01       	movw	r30, r28
    218c:	eb 51       	subi	r30, 0x1B	; 27
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	10 82       	st	Z, r1
	uint8 passReal[4]={'4','3','2','1'};
    2192:	fe 01       	movw	r30, r28
    2194:	e5 51       	subi	r30, 0x15	; 21
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	84 e3       	ldi	r24, 0x34	; 52
    219a:	80 83       	st	Z, r24
    219c:	fe 01       	movw	r30, r28
    219e:	e5 51       	subi	r30, 0x15	; 21
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	83 e3       	ldi	r24, 0x33	; 51
    21a4:	81 83       	std	Z+1, r24	; 0x01
    21a6:	fe 01       	movw	r30, r28
    21a8:	e5 51       	subi	r30, 0x15	; 21
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	82 e3       	ldi	r24, 0x32	; 50
    21ae:	82 83       	std	Z+2, r24	; 0x02
    21b0:	fe 01       	movw	r30, r28
    21b2:	e5 51       	subi	r30, 0x15	; 21
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	81 e3       	ldi	r24, 0x31	; 49
    21b8:	83 83       	std	Z+3, r24	; 0x03
	uint8 passArr[4];
	uint8 passStatus=2;
    21ba:	fe 01       	movw	r30, r28
    21bc:	ec 51       	subi	r30, 0x1C	; 28
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	80 83       	st	Z, r24
	uint8 iterator=0;
    21c4:	fe 01       	movw	r30, r28
    21c6:	ed 51       	subi	r30, 0x1D	; 29
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	10 82       	st	Z, r1
	uint8 choosenOption =0;
    21cc:	fe 01       	movw	r30, r28
    21ce:	ee 51       	subi	r30, 0x1E	; 30
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	10 82       	st	Z, r1
	uint8 trials=0;
    21d4:	fe 01       	movw	r30, r28
    21d6:	ef 51       	subi	r30, 0x1F	; 31
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	10 82       	st	Z, r1
	LCD_SendString("Welcome To SMART HOME");
    21dc:	80 e6       	ldi	r24, 0x60	; 96
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 52       	subi	r30, 0x23	; 35
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e8       	ldi	r25, 0x80	; 128
    21ee:	ab eb       	ldi	r26, 0xBB	; 187
    21f0:	b4 e4       	ldi	r27, 0x44	; 68
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	8e 01       	movw	r16, r28
    21fc:	07 52       	subi	r16, 0x27	; 39
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e3 52       	subi	r30, 0x23	; 35
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	55 e4       	ldi	r21, 0x45	; 69
    2216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	a2 83       	std	Z+2, r26	; 0x02
    2226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2228:	fe 01       	movw	r30, r28
    222a:	e7 52       	subi	r30, 0x27	; 39
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	44 f4       	brge	.+16     	; 0x2256 <main+0x14e>
		__ticks = 1;
    2246:	fe 01       	movw	r30, r28
    2248:	e9 52       	subi	r30, 0x29	; 41
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	64 c0       	rjmp	.+200    	; 0x231e <main+0x216>
	else if (__tmp > 65535)
    2256:	fe 01       	movw	r30, r28
    2258:	e7 52       	subi	r30, 0x27	; 39
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	0c f0       	brlt	.+2      	; 0x2276 <main+0x16e>
    2274:	43 c0       	rjmp	.+134    	; 0x22fc <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	fe 01       	movw	r30, r28
    2278:	e3 52       	subi	r30, 0x23	; 35
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8e 01       	movw	r16, r28
    2296:	09 52       	subi	r16, 0x29	; 41
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	1f c0       	rjmp	.+62     	; 0x22ec <main+0x1e4>
    22ae:	fe 01       	movw	r30, r28
    22b0:	eb 52       	subi	r30, 0x2B	; 43
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 e9       	ldi	r24, 0x90	; 144
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 52       	subi	r30, 0x2B	; 43
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <main+0x1be>
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 52       	subi	r30, 0x2B	; 43
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	de 01       	movw	r26, r28
    22d6:	a9 52       	subi	r26, 0x29	; 41
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	e9 52       	subi	r30, 0x29	; 41
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	9c 93       	st	X, r25
    22ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	fe 01       	movw	r30, r28
    22ee:	e9 52       	subi	r30, 0x29	; 41
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	d1 f6       	brne	.-76     	; 0x22ae <main+0x1a6>
    22fa:	27 c0       	rjmp	.+78     	; 0x234a <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	8e 01       	movw	r16, r28
    22fe:	09 52       	subi	r16, 0x29	; 41
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	e7 52       	subi	r30, 0x27	; 39
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	de 01       	movw	r26, r28
    2320:	ad 52       	subi	r26, 0x2D	; 45
    2322:	bf 4f       	sbci	r27, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	e9 52       	subi	r30, 0x29	; 41
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	8d 93       	st	X+, r24
    2330:	9c 93       	st	X, r25
    2332:	fe 01       	movw	r30, r28
    2334:	ed 52       	subi	r30, 0x2D	; 45
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <main+0x234>
    2340:	fe 01       	movw	r30, r28
    2342:	ed 52       	subi	r30, 0x2D	; 45
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCD_ClearDisplay();
    234a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    234e:	fe 01       	movw	r30, r28
    2350:	e1 53       	subi	r30, 0x31	; 49
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e0       	ldi	r26, 0x00	; 0
    235a:	b0 e4       	ldi	r27, 0x40	; 64
    235c:	80 83       	st	Z, r24
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	a2 83       	std	Z+2, r26	; 0x02
    2362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	8e 01       	movw	r16, r28
    2366:	05 53       	subi	r16, 0x35	; 53
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e1 53       	subi	r30, 0x31	; 49
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	55 e4       	ldi	r21, 0x45	; 69
    2380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	80 83       	st	Z, r24
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	a2 83       	std	Z+2, r26	; 0x02
    2390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2392:	fe 01       	movw	r30, r28
    2394:	e5 53       	subi	r30, 0x35	; 53
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	44 f4       	brge	.+16     	; 0x23c0 <main+0x2b8>
		__ticks = 1;
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 53       	subi	r30, 0x37	; 55
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
    23be:	64 c0       	rjmp	.+200    	; 0x2488 <main+0x380>
	else if (__tmp > 65535)
    23c0:	fe 01       	movw	r30, r28
    23c2:	e5 53       	subi	r30, 0x35	; 53
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <main+0x2d8>
    23de:	43 c0       	rjmp	.+134    	; 0x2466 <main+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	fe 01       	movw	r30, r28
    23e2:	e1 53       	subi	r30, 0x31	; 49
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8e 01       	movw	r16, r28
    2400:	07 53       	subi	r16, 0x37	; 55
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	f8 01       	movw	r30, r16
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	1f c0       	rjmp	.+62     	; 0x2456 <main+0x34e>
    2418:	fe 01       	movw	r30, r28
    241a:	e9 53       	subi	r30, 0x39	; 57
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 e9       	ldi	r24, 0x90	; 144
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	fe 01       	movw	r30, r28
    2428:	e9 53       	subi	r30, 0x39	; 57
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <main+0x328>
    2434:	fe 01       	movw	r30, r28
    2436:	e9 53       	subi	r30, 0x39	; 57
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	de 01       	movw	r26, r28
    2440:	a7 53       	subi	r26, 0x37	; 55
    2442:	bf 4f       	sbci	r27, 0xFF	; 255
    2444:	fe 01       	movw	r30, r28
    2446:	e7 53       	subi	r30, 0x37	; 55
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	11 96       	adiw	r26, 0x01	; 1
    2452:	9c 93       	st	X, r25
    2454:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	fe 01       	movw	r30, r28
    2458:	e7 53       	subi	r30, 0x37	; 55
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	d1 f6       	brne	.-76     	; 0x2418 <main+0x310>
    2464:	27 c0       	rjmp	.+78     	; 0x24b4 <main+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	8e 01       	movw	r16, r28
    2468:	07 53       	subi	r16, 0x37	; 55
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	fe 01       	movw	r30, r28
    246e:	e5 53       	subi	r30, 0x35	; 53
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	f8 01       	movw	r30, r16
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	80 83       	st	Z, r24
    2488:	de 01       	movw	r26, r28
    248a:	ab 53       	subi	r26, 0x3B	; 59
    248c:	bf 4f       	sbci	r27, 0xFF	; 255
    248e:	fe 01       	movw	r30, r28
    2490:	e7 53       	subi	r30, 0x37	; 55
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	8d 93       	st	X+, r24
    249a:	9c 93       	st	X, r25
    249c:	fe 01       	movw	r30, r28
    249e:	eb 53       	subi	r30, 0x3B	; 59
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <main+0x39e>
    24aa:	fe 01       	movw	r30, r28
    24ac:	eb 53       	subi	r30, 0x3B	; 59
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_SendString("Enter Password");
    24b4:	86 e7       	ldi	r24, 0x76	; 118
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
	LCD_GoToXY(SecondLine, 0);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
    24c4:	2b c0       	rjmp	.+86     	; 0x251c <main+0x414>
	while(iterator<4)
	{
		do
		{
			passArr[iterator]=get_button_pressed();
    24c6:	fe 01       	movw	r30, r28
    24c8:	ed 51       	subi	r30, 0x1D	; 29
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	08 2f       	mov	r16, r24
    24d0:	10 e0       	ldi	r17, 0x00	; 0
    24d2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <get_button_pressed>
    24d6:	28 2f       	mov	r18, r24
    24d8:	ce 01       	movw	r24, r28
    24da:	81 51       	subi	r24, 0x11	; 17
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	fc 01       	movw	r30, r24
    24e0:	e0 0f       	add	r30, r16
    24e2:	f1 1f       	adc	r31, r17
    24e4:	20 83       	st	Z, r18

		}while(passArr[iterator]==0xff);
    24e6:	fe 01       	movw	r30, r28
    24e8:	ed 51       	subi	r30, 0x1D	; 29
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	ce 01       	movw	r24, r28
    24f4:	81 51       	subi	r24, 0x11	; 17
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	80 81       	ld	r24, Z
    2500:	8f 3f       	cpi	r24, 0xFF	; 255
    2502:	09 f3       	breq	.-62     	; 0x24c6 <main+0x3be>
		LCD_Write_data('*');
    2504:	8a e2       	ldi	r24, 0x2A	; 42
    2506:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
		iterator++;
    250a:	de 01       	movw	r26, r28
    250c:	ad 51       	subi	r26, 0x1D	; 29
    250e:	bf 4f       	sbci	r27, 0xFF	; 255
    2510:	fe 01       	movw	r30, r28
    2512:	ed 51       	subi	r30, 0x1D	; 29
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	8c 93       	st	X, r24
	_delay_ms(1500);
	LCD_ClearDisplay();
	_delay_ms(2);
	LCD_SendString("Enter Password");
	LCD_GoToXY(SecondLine, 0);
	while(iterator<4)
    251c:	fe 01       	movw	r30, r28
    251e:	ed 51       	subi	r30, 0x1D	; 29
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	84 30       	cpi	r24, 0x04	; 4
    2526:	78 f2       	brcs	.-98     	; 0x24c6 <main+0x3be>
    2528:	fe 01       	movw	r30, r28
    252a:	ef 53       	subi	r30, 0x3F	; 63
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	aa ef       	ldi	r26, 0xFA	; 250
    2534:	b3 e4       	ldi	r27, 0x43	; 67
    2536:	80 83       	st	Z, r24
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	a2 83       	std	Z+2, r26	; 0x02
    253c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	8e 01       	movw	r16, r28
    2540:	03 54       	subi	r16, 0x43	; 67
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	fe 01       	movw	r30, r28
    2546:	ef 53       	subi	r30, 0x3F	; 63
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a e7       	ldi	r20, 0x7A	; 122
    2558:	55 e4       	ldi	r21, 0x45	; 69
    255a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	f8 01       	movw	r30, r16
    2564:	80 83       	st	Z, r24
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	a2 83       	std	Z+2, r26	; 0x02
    256a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    256c:	fe 01       	movw	r30, r28
    256e:	e3 54       	subi	r30, 0x43	; 67
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2586:	88 23       	and	r24, r24
    2588:	44 f4       	brge	.+16     	; 0x259a <main+0x492>
		__ticks = 1;
    258a:	fe 01       	movw	r30, r28
    258c:	e5 54       	subi	r30, 0x45	; 69
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
    2598:	64 c0       	rjmp	.+200    	; 0x2662 <main+0x55a>
	else if (__tmp > 65535)
    259a:	fe 01       	movw	r30, r28
    259c:	e3 54       	subi	r30, 0x43	; 67
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	3f ef       	ldi	r19, 0xFF	; 255
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	57 e4       	ldi	r21, 0x47	; 71
    25b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25b4:	18 16       	cp	r1, r24
    25b6:	0c f0       	brlt	.+2      	; 0x25ba <main+0x4b2>
    25b8:	43 c0       	rjmp	.+134    	; 0x2640 <main+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ba:	fe 01       	movw	r30, r28
    25bc:	ef 53       	subi	r30, 0x3F	; 63
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	8e 01       	movw	r16, r28
    25da:	05 54       	subi	r16, 0x45	; 69
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	f8 01       	movw	r30, r16
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	1f c0       	rjmp	.+62     	; 0x2630 <main+0x528>
    25f2:	fe 01       	movw	r30, r28
    25f4:	e7 54       	subi	r30, 0x47	; 71
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 e9       	ldi	r24, 0x90	; 144
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	fe 01       	movw	r30, r28
    2602:	e7 54       	subi	r30, 0x47	; 71
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <main+0x502>
    260e:	fe 01       	movw	r30, r28
    2610:	e7 54       	subi	r30, 0x47	; 71
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2618:	de 01       	movw	r26, r28
    261a:	a5 54       	subi	r26, 0x45	; 69
    261c:	bf 4f       	sbci	r27, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	e5 54       	subi	r30, 0x45	; 69
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	9c 93       	st	X, r25
    262e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	fe 01       	movw	r30, r28
    2632:	e5 54       	subi	r30, 0x45	; 69
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	d1 f6       	brne	.-76     	; 0x25f2 <main+0x4ea>
    263e:	27 c0       	rjmp	.+78     	; 0x268e <main+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	8e 01       	movw	r16, r28
    2642:	05 54       	subi	r16, 0x45	; 69
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	fe 01       	movw	r30, r28
    2648:	e3 54       	subi	r30, 0x43	; 67
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	f8 01       	movw	r30, r16
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	de 01       	movw	r26, r28
    2664:	a9 54       	subi	r26, 0x49	; 73
    2666:	bf 4f       	sbci	r27, 0xFF	; 255
    2668:	fe 01       	movw	r30, r28
    266a:	e5 54       	subi	r30, 0x45	; 69
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	8d 93       	st	X+, r24
    2674:	9c 93       	st	X, r25
    2676:	fe 01       	movw	r30, r28
    2678:	e9 54       	subi	r30, 0x49	; 73
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <main+0x578>
    2684:	fe 01       	movw	r30, r28
    2686:	e9 54       	subi	r30, 0x49	; 73
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
		}while(passArr[iterator]==0xff);
		LCD_Write_data('*');
		iterator++;
	}
	_delay_ms(500);
	LCD_ClearDisplay();
    268e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    2692:	fe 01       	movw	r30, r28
    2694:	ed 54       	subi	r30, 0x4D	; 77
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a0 e0       	ldi	r26, 0x00	; 0
    269e:	b0 e4       	ldi	r27, 0x40	; 64
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	8e 01       	movw	r16, r28
    26aa:	01 55       	subi	r16, 0x51	; 81
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	ed 54       	subi	r30, 0x4D	; 77
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a e7       	ldi	r20, 0x7A	; 122
    26c2:	55 e4       	ldi	r21, 0x45	; 69
    26c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	80 83       	st	Z, r24
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	a2 83       	std	Z+2, r26	; 0x02
    26d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d6:	fe 01       	movw	r30, r28
    26d8:	e1 55       	subi	r30, 0x51	; 81
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	44 f4       	brge	.+16     	; 0x2704 <main+0x5fc>
		__ticks = 1;
    26f4:	fe 01       	movw	r30, r28
    26f6:	e3 55       	subi	r30, 0x53	; 83
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	64 c0       	rjmp	.+200    	; 0x27cc <main+0x6c4>
	else if (__tmp > 65535)
    2704:	fe 01       	movw	r30, r28
    2706:	e1 55       	subi	r30, 0x51	; 81
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	0c f0       	brlt	.+2      	; 0x2724 <main+0x61c>
    2722:	43 c0       	rjmp	.+134    	; 0x27aa <main+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	fe 01       	movw	r30, r28
    2726:	ed 54       	subi	r30, 0x4D	; 77
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8e 01       	movw	r16, r28
    2744:	03 55       	subi	r16, 0x53	; 83
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	1f c0       	rjmp	.+62     	; 0x279a <main+0x692>
    275c:	fe 01       	movw	r30, r28
    275e:	e5 55       	subi	r30, 0x55	; 85
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 e9       	ldi	r24, 0x90	; 144
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	fe 01       	movw	r30, r28
    276c:	e5 55       	subi	r30, 0x55	; 85
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <main+0x66c>
    2778:	fe 01       	movw	r30, r28
    277a:	e5 55       	subi	r30, 0x55	; 85
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	de 01       	movw	r26, r28
    2784:	a3 55       	subi	r26, 0x53	; 83
    2786:	bf 4f       	sbci	r27, 0xFF	; 255
    2788:	fe 01       	movw	r30, r28
    278a:	e3 55       	subi	r30, 0x53	; 83
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	11 96       	adiw	r26, 0x01	; 1
    2796:	9c 93       	st	X, r25
    2798:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	fe 01       	movw	r30, r28
    279c:	e3 55       	subi	r30, 0x53	; 83
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	d1 f6       	brne	.-76     	; 0x275c <main+0x654>
    27a8:	27 c0       	rjmp	.+78     	; 0x27f8 <main+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	8e 01       	movw	r16, r28
    27ac:	03 55       	subi	r16, 0x53	; 83
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	fe 01       	movw	r30, r28
    27b2:	e1 55       	subi	r30, 0x51	; 81
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	f8 01       	movw	r30, r16
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	de 01       	movw	r26, r28
    27ce:	a7 55       	subi	r26, 0x57	; 87
    27d0:	bf 4f       	sbci	r27, 0xFF	; 255
    27d2:	fe 01       	movw	r30, r28
    27d4:	e3 55       	subi	r30, 0x53	; 83
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	8d 93       	st	X+, r24
    27de:	9c 93       	st	X, r25
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 55       	subi	r30, 0x57	; 87
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <main+0x6e2>
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 55       	subi	r30, 0x57	; 87
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
	_delay_ms(2);

	while(1)
	{
		passStatus = ComparePasswords(passReal,passArr);
    27f8:	ce 01       	movw	r24, r28
    27fa:	85 51       	subi	r24, 0x15	; 21
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	9e 01       	movw	r18, r28
    2800:	21 51       	subi	r18, 0x11	; 17
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
    2804:	b9 01       	movw	r22, r18
    2806:	0e 94 9a 1c 	call	0x3934	; 0x3934 <ComparePasswords>
    280a:	fe 01       	movw	r30, r28
    280c:	ec 51       	subi	r30, 0x1C	; 28
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 83       	st	Z, r24
		if(passStatus==FALSE)
    2812:	fe 01       	movw	r30, r28
    2814:	ec 51       	subi	r30, 0x1C	; 28
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	88 23       	and	r24, r24
    281c:	09 f0       	breq	.+2      	; 0x2820 <main+0x718>
    281e:	25 c3       	rjmp	.+1610   	; 0x2e6a <main+0xd62>
		{
			trials++;
    2820:	de 01       	movw	r26, r28
    2822:	af 51       	subi	r26, 0x1F	; 31
    2824:	bf 4f       	sbci	r27, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	ef 51       	subi	r30, 0x1F	; 31
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	8c 93       	st	X, r24
			if(trials==3)
    2832:	fe 01       	movw	r30, r28
    2834:	ef 51       	subi	r30, 0x1F	; 31
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	83 30       	cpi	r24, 0x03	; 3
    283c:	11 f4       	brne	.+4      	; 0x2842 <main+0x73a>
    283e:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <main+0x1810>
			{
				break;
			}
			LCD_SendString("Wrong Password");
    2842:	85 e8       	ldi	r24, 0x85	; 133
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
    284a:	fe 01       	movw	r30, r28
    284c:	eb 55       	subi	r30, 0x5B	; 91
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	aa e7       	ldi	r26, 0x7A	; 122
    2856:	b4 e4       	ldi	r27, 0x44	; 68
    2858:	80 83       	st	Z, r24
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	a2 83       	std	Z+2, r26	; 0x02
    285e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2860:	8e 01       	movw	r16, r28
    2862:	0f 55       	subi	r16, 0x5F	; 95
    2864:	1f 4f       	sbci	r17, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	eb 55       	subi	r30, 0x5B	; 91
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a e7       	ldi	r20, 0x7A	; 122
    287a:	55 e4       	ldi	r21, 0x45	; 69
    287c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	f8 01       	movw	r30, r16
    2886:	80 83       	st	Z, r24
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	a2 83       	std	Z+2, r26	; 0x02
    288c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    288e:	fe 01       	movw	r30, r28
    2890:	ef 55       	subi	r30, 0x5F	; 95
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	44 f4       	brge	.+16     	; 0x28bc <main+0x7b4>
		__ticks = 1;
    28ac:	fe 01       	movw	r30, r28
    28ae:	e1 56       	subi	r30, 0x61	; 97
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	64 c0       	rjmp	.+200    	; 0x2984 <main+0x87c>
	else if (__tmp > 65535)
    28bc:	fe 01       	movw	r30, r28
    28be:	ef 55       	subi	r30, 0x5F	; 95
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	0c f0       	brlt	.+2      	; 0x28dc <main+0x7d4>
    28da:	43 c0       	rjmp	.+134    	; 0x2962 <main+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28dc:	fe 01       	movw	r30, r28
    28de:	eb 55       	subi	r30, 0x5B	; 91
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8e 01       	movw	r16, r28
    28fc:	01 56       	subi	r16, 0x61	; 97
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	1f c0       	rjmp	.+62     	; 0x2952 <main+0x84a>
    2914:	fe 01       	movw	r30, r28
    2916:	e3 56       	subi	r30, 0x63	; 99
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 e9       	ldi	r24, 0x90	; 144
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
    2922:	fe 01       	movw	r30, r28
    2924:	e3 56       	subi	r30, 0x63	; 99
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <main+0x824>
    2930:	fe 01       	movw	r30, r28
    2932:	e3 56       	subi	r30, 0x63	; 99
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293a:	de 01       	movw	r26, r28
    293c:	a1 56       	subi	r26, 0x61	; 97
    293e:	bf 4f       	sbci	r27, 0xFF	; 255
    2940:	fe 01       	movw	r30, r28
    2942:	e1 56       	subi	r30, 0x61	; 97
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	11 96       	adiw	r26, 0x01	; 1
    294e:	9c 93       	st	X, r25
    2950:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2952:	fe 01       	movw	r30, r28
    2954:	e1 56       	subi	r30, 0x61	; 97
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	d1 f6       	brne	.-76     	; 0x2914 <main+0x80c>
    2960:	27 c0       	rjmp	.+78     	; 0x29b0 <main+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2962:	8e 01       	movw	r16, r28
    2964:	01 56       	subi	r16, 0x61	; 97
    2966:	1f 4f       	sbci	r17, 0xFF	; 255
    2968:	fe 01       	movw	r30, r28
    296a:	ef 55       	subi	r30, 0x5F	; 95
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	60 81       	ld	r22, Z
    2970:	71 81       	ldd	r23, Z+1	; 0x01
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	f8 01       	movw	r30, r16
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
    2984:	de 01       	movw	r26, r28
    2986:	a5 56       	subi	r26, 0x65	; 101
    2988:	bf 4f       	sbci	r27, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	e1 56       	subi	r30, 0x61	; 97
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	8d 93       	st	X+, r24
    2996:	9c 93       	st	X, r25
    2998:	fe 01       	movw	r30, r28
    299a:	e5 56       	subi	r30, 0x65	; 101
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <main+0x89a>
    29a6:	fe 01       	movw	r30, r28
    29a8:	e5 56       	subi	r30, 0x65	; 101
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_ClearDisplay();
    29b0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    29b4:	fe 01       	movw	r30, r28
    29b6:	e9 56       	subi	r30, 0x69	; 105
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	a0 e0       	ldi	r26, 0x00	; 0
    29c0:	b0 e4       	ldi	r27, 0x40	; 64
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	a2 83       	std	Z+2, r26	; 0x02
    29c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	8e 01       	movw	r16, r28
    29cc:	0d 56       	subi	r16, 0x6D	; 109
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	e9 56       	subi	r30, 0x69	; 105
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a e7       	ldi	r20, 0x7A	; 122
    29e4:	55 e4       	ldi	r21, 0x45	; 69
    29e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	80 83       	st	Z, r24
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	a2 83       	std	Z+2, r26	; 0x02
    29f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 56       	subi	r30, 0x6D	; 109
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	44 f4       	brge	.+16     	; 0x2a26 <main+0x91e>
		__ticks = 1;
    2a16:	fe 01       	movw	r30, r28
    2a18:	ef 56       	subi	r30, 0x6F	; 111
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
    2a24:	64 c0       	rjmp	.+200    	; 0x2aee <main+0x9e6>
	else if (__tmp > 65535)
    2a26:	fe 01       	movw	r30, r28
    2a28:	ed 56       	subi	r30, 0x6D	; 109
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <main+0x93e>
    2a44:	43 c0       	rjmp	.+134    	; 0x2acc <main+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	fe 01       	movw	r30, r28
    2a48:	e9 56       	subi	r30, 0x69	; 105
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	8e 01       	movw	r16, r28
    2a66:	0f 56       	subi	r16, 0x6F	; 111
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	f8 01       	movw	r30, r16
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
    2a7c:	1f c0       	rjmp	.+62     	; 0x2abc <main+0x9b4>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e1 57       	subi	r30, 0x71	; 113
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 e9       	ldi	r24, 0x90	; 144
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e1 57       	subi	r30, 0x71	; 113
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <main+0x98e>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e1 57       	subi	r30, 0x71	; 113
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	de 01       	movw	r26, r28
    2aa6:	af 56       	subi	r26, 0x6F	; 111
    2aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ef 56       	subi	r30, 0x6F	; 111
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	11 96       	adiw	r26, 0x01	; 1
    2ab8:	9c 93       	st	X, r25
    2aba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	fe 01       	movw	r30, r28
    2abe:	ef 56       	subi	r30, 0x6F	; 111
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	d1 f6       	brne	.-76     	; 0x2a7e <main+0x976>
    2aca:	27 c0       	rjmp	.+78     	; 0x2b1a <main+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2acc:	8e 01       	movw	r16, r28
    2ace:	0f 56       	subi	r16, 0x6F	; 111
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 56       	subi	r30, 0x6D	; 109
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	de 01       	movw	r26, r28
    2af0:	a3 57       	subi	r26, 0x73	; 115
    2af2:	bf 4f       	sbci	r27, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	ef 56       	subi	r30, 0x6F	; 111
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	8d 93       	st	X+, r24
    2b00:	9c 93       	st	X, r25
    2b02:	fe 01       	movw	r30, r28
    2b04:	e3 57       	subi	r30, 0x73	; 115
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <main+0xa04>
    2b10:	fe 01       	movw	r30, r28
    2b12:	e3 57       	subi	r30, 0x73	; 115
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("Enter Pass Again");
    2b1a:	84 e9       	ldi	r24, 0x94	; 148
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
			LCD_GoToXY(SecondLine, 3);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	63 e0       	ldi	r22, 0x03	; 3
    2b26:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
			iterator=0;
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ed 51       	subi	r30, 0x1D	; 29
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	10 82       	st	Z, r1
    2b32:	2b c0       	rjmp	.+86     	; 0x2b8a <main+0xa82>
			while(iterator<4)
			{
				do
				{
					passArr[iterator]=get_button_pressed();
    2b34:	fe 01       	movw	r30, r28
    2b36:	ed 51       	subi	r30, 0x1D	; 29
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	08 2f       	mov	r16, r24
    2b3e:	10 e0       	ldi	r17, 0x00	; 0
    2b40:	0e 94 3a 0a 	call	0x1474	; 0x1474 <get_button_pressed>
    2b44:	28 2f       	mov	r18, r24
    2b46:	ce 01       	movw	r24, r28
    2b48:	81 51       	subi	r24, 0x11	; 17
    2b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e0 0f       	add	r30, r16
    2b50:	f1 1f       	adc	r31, r17
    2b52:	20 83       	st	Z, r18
				}while(passArr[iterator]==0xff);
    2b54:	fe 01       	movw	r30, r28
    2b56:	ed 51       	subi	r30, 0x1D	; 29
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	ce 01       	movw	r24, r28
    2b62:	81 51       	subi	r24, 0x11	; 17
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	fc 01       	movw	r30, r24
    2b68:	e2 0f       	add	r30, r18
    2b6a:	f3 1f       	adc	r31, r19
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b70:	09 f3       	breq	.-62     	; 0x2b34 <main+0xa2c>
				LCD_Write_data('*');
    2b72:	8a e2       	ldi	r24, 0x2A	; 42
    2b74:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Write_data>
				iterator++;
    2b78:	de 01       	movw	r26, r28
    2b7a:	ad 51       	subi	r26, 0x1D	; 29
    2b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ed 51       	subi	r30, 0x1D	; 29
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 5f       	subi	r24, 0xFF	; 255
    2b88:	8c 93       	st	X, r24
			LCD_ClearDisplay();
			_delay_ms(2);
			LCD_SendString("Enter Pass Again");
			LCD_GoToXY(SecondLine, 3);
			iterator=0;
			while(iterator<4)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ed 51       	subi	r30, 0x1D	; 29
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	84 30       	cpi	r24, 0x04	; 4
    2b94:	78 f2       	brcs	.-98     	; 0x2b34 <main+0xa2c>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 57       	subi	r30, 0x77	; 119
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	aa e7       	ldi	r26, 0x7A	; 122
    2ba2:	b4 e4       	ldi	r27, 0x44	; 68
    2ba4:	80 83       	st	Z, r24
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	a2 83       	std	Z+2, r26	; 0x02
    2baa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bac:	8e 01       	movw	r16, r28
    2bae:	0b 57       	subi	r16, 0x7B	; 123
    2bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e7 57       	subi	r30, 0x77	; 119
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a e7       	ldi	r20, 0x7A	; 122
    2bc6:	55 e4       	ldi	r21, 0x45	; 69
    2bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	80 83       	st	Z, r24
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	a2 83       	std	Z+2, r26	; 0x02
    2bd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bda:	fe 01       	movw	r30, r28
    2bdc:	eb 57       	subi	r30, 0x7B	; 123
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	44 f4       	brge	.+16     	; 0x2c08 <main+0xb00>
		__ticks = 1;
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ed 57       	subi	r30, 0x7D	; 125
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	64 c0       	rjmp	.+200    	; 0x2cd0 <main+0xbc8>
	else if (__tmp > 65535)
    2c08:	fe 01       	movw	r30, r28
    2c0a:	eb 57       	subi	r30, 0x7B	; 123
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	0c f0       	brlt	.+2      	; 0x2c28 <main+0xb20>
    2c26:	43 c0       	rjmp	.+134    	; 0x2cae <main+0xba6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e7 57       	subi	r30, 0x77	; 119
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
    2c34:	93 81       	ldd	r25, Z+3	; 0x03
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e2       	ldi	r20, 0x20	; 32
    2c3c:	51 e4       	ldi	r21, 0x41	; 65
    2c3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8e 01       	movw	r16, r28
    2c48:	0d 57       	subi	r16, 0x7D	; 125
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	f8 01       	movw	r30, r16
    2c5a:	91 83       	std	Z+1, r25	; 0x01
    2c5c:	80 83       	st	Z, r24
    2c5e:	1f c0       	rjmp	.+62     	; 0x2c9e <main+0xb96>
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 57       	subi	r30, 0x7F	; 127
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 e9       	ldi	r24, 0x90	; 144
    2c68:	91 e0       	ldi	r25, 0x01	; 1
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ef 57       	subi	r30, 0x7F	; 127
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <main+0xb70>
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ef 57       	subi	r30, 0x7F	; 127
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	de 01       	movw	r26, r28
    2c88:	ad 57       	subi	r26, 0x7D	; 125
    2c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 57       	subi	r30, 0x7D	; 125
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	11 96       	adiw	r26, 0x01	; 1
    2c9a:	9c 93       	st	X, r25
    2c9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ed 57       	subi	r30, 0x7D	; 125
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	d1 f6       	brne	.-76     	; 0x2c60 <main+0xb58>
    2cac:	27 c0       	rjmp	.+78     	; 0x2cfc <main+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	8e 01       	movw	r16, r28
    2cb0:	0d 57       	subi	r16, 0x7D	; 125
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	eb 57       	subi	r30, 0x7B	; 123
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	f8 01       	movw	r30, r16
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	de 01       	movw	r26, r28
    2cd2:	a1 58       	subi	r26, 0x81	; 129
    2cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 57       	subi	r30, 0x7D	; 125
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	8d 93       	st	X+, r24
    2ce2:	9c 93       	st	X, r25
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e1 58       	subi	r30, 0x81	; 129
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	91 81       	ldd	r25, Z+1	; 0x01
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <main+0xbe6>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e1 58       	subi	r30, 0x81	; 129
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
				}while(passArr[iterator]==0xff);
				LCD_Write_data('*');
				iterator++;
			}
			_delay_ms(1000);
			LCD_ClearDisplay();
    2cfc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    2d00:	fe 01       	movw	r30, r28
    2d02:	e5 58       	subi	r30, 0x85	; 133
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e0       	ldi	r26, 0x00	; 0
    2d0c:	b0 e4       	ldi	r27, 0x40	; 64
    2d0e:	80 83       	st	Z, r24
    2d10:	91 83       	std	Z+1, r25	; 0x01
    2d12:	a2 83       	std	Z+2, r26	; 0x02
    2d14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d16:	8e 01       	movw	r16, r28
    2d18:	09 58       	subi	r16, 0x89	; 137
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e5 58       	subi	r30, 0x85	; 133
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	4a e7       	ldi	r20, 0x7A	; 122
    2d30:	55 e4       	ldi	r21, 0x45	; 69
    2d32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	80 83       	st	Z, r24
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	a2 83       	std	Z+2, r26	; 0x02
    2d42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d44:	fe 01       	movw	r30, r28
    2d46:	e9 58       	subi	r30, 0x89	; 137
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	5f e3       	ldi	r21, 0x3F	; 63
    2d5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	44 f4       	brge	.+16     	; 0x2d72 <main+0xc6a>
		__ticks = 1;
    2d62:	fe 01       	movw	r30, r28
    2d64:	eb 58       	subi	r30, 0x8B	; 139
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
    2d70:	64 c0       	rjmp	.+200    	; 0x2e3a <main+0xd32>
	else if (__tmp > 65535)
    2d72:	fe 01       	movw	r30, r28
    2d74:	e9 58       	subi	r30, 0x89	; 137
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	3f ef       	ldi	r19, 0xFF	; 255
    2d84:	4f e7       	ldi	r20, 0x7F	; 127
    2d86:	57 e4       	ldi	r21, 0x47	; 71
    2d88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d8c:	18 16       	cp	r1, r24
    2d8e:	0c f0       	brlt	.+2      	; 0x2d92 <main+0xc8a>
    2d90:	43 c0       	rjmp	.+134    	; 0x2e18 <main+0xd10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	fe 01       	movw	r30, r28
    2d94:	e5 58       	subi	r30, 0x85	; 133
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	8e 01       	movw	r16, r28
    2db2:	0b 58       	subi	r16, 0x8B	; 139
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	bc 01       	movw	r22, r24
    2db8:	cd 01       	movw	r24, r26
    2dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
    2dc8:	1f c0       	rjmp	.+62     	; 0x2e08 <main+0xd00>
    2dca:	fe 01       	movw	r30, r28
    2dcc:	ed 58       	subi	r30, 0x8D	; 141
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 e9       	ldi	r24, 0x90	; 144
    2dd2:	91 e0       	ldi	r25, 0x01	; 1
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ed 58       	subi	r30, 0x8D	; 141
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <main+0xcda>
    2de6:	fe 01       	movw	r30, r28
    2de8:	ed 58       	subi	r30, 0x8D	; 141
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	de 01       	movw	r26, r28
    2df2:	ab 58       	subi	r26, 0x8B	; 139
    2df4:	bf 4f       	sbci	r27, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	eb 58       	subi	r30, 0x8B	; 139
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	11 96       	adiw	r26, 0x01	; 1
    2e04:	9c 93       	st	X, r25
    2e06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	eb 58       	subi	r30, 0x8B	; 139
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	d1 f6       	brne	.-76     	; 0x2dca <main+0xcc2>
    2e16:	f0 cc       	rjmp	.-1568   	; 0x27f8 <main+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e18:	8e 01       	movw	r16, r28
    2e1a:	0b 58       	subi	r16, 0x8B	; 139
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e9 58       	subi	r30, 0x89	; 137
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	f8 01       	movw	r30, r16
    2e36:	91 83       	std	Z+1, r25	; 0x01
    2e38:	80 83       	st	Z, r24
    2e3a:	de 01       	movw	r26, r28
    2e3c:	af 58       	subi	r26, 0x8F	; 143
    2e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e40:	fe 01       	movw	r30, r28
    2e42:	eb 58       	subi	r30, 0x8B	; 139
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 81       	ld	r24, Z
    2e48:	91 81       	ldd	r25, Z+1	; 0x01
    2e4a:	11 96       	adiw	r26, 0x01	; 1
    2e4c:	9c 93       	st	X, r25
    2e4e:	8e 93       	st	-X, r24
    2e50:	fe 01       	movw	r30, r28
    2e52:	ef 58       	subi	r30, 0x8F	; 143
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <main+0xd52>
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ef 58       	subi	r30, 0x8F	; 143
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	91 83       	std	Z+1, r25	; 0x01
    2e66:	80 83       	st	Z, r24
    2e68:	c7 cc       	rjmp	.-1650   	; 0x27f8 <main+0x6f0>
			_delay_ms(2);

		}
		else if(passStatus==TRUE)
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ec 51       	subi	r30, 0x1C	; 28
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	81 30       	cpi	r24, 0x01	; 1
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <main+0xd70>
    2e76:	c0 cc       	rjmp	.-1664   	; 0x27f8 <main+0x6f0>
		{
			LCD_SendString("Options:");
    2e78:	85 ea       	ldi	r24, 0xA5	; 165
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
			LCD_SendString("1-Display Temp");
    2e88:	8e ea       	ldi	r24, 0xAE	; 174
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
    2e90:	fe 01       	movw	r30, r28
    2e92:	e3 59       	subi	r30, 0x93	; 147
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e8       	ldi	r25, 0x80	; 128
    2e9a:	ab eb       	ldi	r26, 0xBB	; 187
    2e9c:	b4 e4       	ldi	r27, 0x44	; 68
    2e9e:	80 83       	st	Z, r24
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	a2 83       	std	Z+2, r26	; 0x02
    2ea4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea6:	8e 01       	movw	r16, r28
    2ea8:	07 59       	subi	r16, 0x97	; 151
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	fe 01       	movw	r30, r28
    2eae:	e3 59       	subi	r30, 0x93	; 147
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	4a e7       	ldi	r20, 0x7A	; 122
    2ec0:	55 e4       	ldi	r21, 0x45	; 69
    2ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	80 83       	st	Z, r24
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	a2 83       	std	Z+2, r26	; 0x02
    2ed2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e7 59       	subi	r30, 0x97	; 151
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	60 81       	ld	r22, Z
    2edc:	71 81       	ldd	r23, Z+1	; 0x01
    2ede:	82 81       	ldd	r24, Z+2	; 0x02
    2ee0:	93 81       	ldd	r25, Z+3	; 0x03
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e8       	ldi	r20, 0x80	; 128
    2ee8:	5f e3       	ldi	r21, 0x3F	; 63
    2eea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2eee:	88 23       	and	r24, r24
    2ef0:	44 f4       	brge	.+16     	; 0x2f02 <main+0xdfa>
		__ticks = 1;
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e9 59       	subi	r30, 0x99	; 153
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
    2f00:	64 c0       	rjmp	.+200    	; 0x2fca <main+0xec2>
	else if (__tmp > 65535)
    2f02:	fe 01       	movw	r30, r28
    2f04:	e7 59       	subi	r30, 0x97	; 151
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	60 81       	ld	r22, Z
    2f0a:	71 81       	ldd	r23, Z+1	; 0x01
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	0c f0       	brlt	.+2      	; 0x2f22 <main+0xe1a>
    2f20:	43 c0       	rjmp	.+134    	; 0x2fa8 <main+0xea0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	fe 01       	movw	r30, r28
    2f24:	e3 59       	subi	r30, 0x93	; 147
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	82 81       	ldd	r24, Z+2	; 0x02
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e2       	ldi	r20, 0x20	; 32
    2f36:	51 e4       	ldi	r21, 0x41	; 65
    2f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8e 01       	movw	r16, r28
    2f42:	09 59       	subi	r16, 0x99	; 153
    2f44:	1f 4f       	sbci	r17, 0xFF	; 255
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	f8 01       	movw	r30, r16
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	80 83       	st	Z, r24
    2f58:	1f c0       	rjmp	.+62     	; 0x2f98 <main+0xe90>
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	eb 59       	subi	r30, 0x9B	; 155
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 e9       	ldi	r24, 0x90	; 144
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	80 83       	st	Z, r24
    2f68:	fe 01       	movw	r30, r28
    2f6a:	eb 59       	subi	r30, 0x9B	; 155
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <main+0xe6a>
    2f76:	fe 01       	movw	r30, r28
    2f78:	eb 59       	subi	r30, 0x9B	; 155
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f80:	de 01       	movw	r26, r28
    2f82:	a9 59       	subi	r26, 0x99	; 153
    2f84:	bf 4f       	sbci	r27, 0xFF	; 255
    2f86:	fe 01       	movw	r30, r28
    2f88:	e9 59       	subi	r30, 0x99	; 153
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	11 96       	adiw	r26, 0x01	; 1
    2f94:	9c 93       	st	X, r25
    2f96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e9 59       	subi	r30, 0x99	; 153
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	d1 f6       	brne	.-76     	; 0x2f5a <main+0xe52>
    2fa6:	27 c0       	rjmp	.+78     	; 0x2ff6 <main+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	8e 01       	movw	r16, r28
    2faa:	09 59       	subi	r16, 0x99	; 153
    2fac:	1f 4f       	sbci	r17, 0xFF	; 255
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e7 59       	subi	r30, 0x97	; 151
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    2fca:	de 01       	movw	r26, r28
    2fcc:	ad 59       	subi	r26, 0x9D	; 157
    2fce:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e9 59       	subi	r30, 0x99	; 153
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 81       	ld	r24, Z
    2fd8:	91 81       	ldd	r25, Z+1	; 0x01
    2fda:	8d 93       	st	X+, r24
    2fdc:	9c 93       	st	X, r25
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ed 59       	subi	r30, 0x9D	; 157
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <main+0xee0>
    2fec:	fe 01       	movw	r30, r28
    2fee:	ed 59       	subi	r30, 0x9D	; 157
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	91 83       	std	Z+1, r25	; 0x01
    2ff4:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    2ff6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e1 5a       	subi	r30, 0xA1	; 161
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a0 e0       	ldi	r26, 0x00	; 0
    3006:	b0 e4       	ldi	r27, 0x40	; 64
    3008:	80 83       	st	Z, r24
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	a2 83       	std	Z+2, r26	; 0x02
    300e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3010:	8e 01       	movw	r16, r28
    3012:	05 5a       	subi	r16, 0xA5	; 165
    3014:	1f 4f       	sbci	r17, 0xFF	; 255
    3016:	fe 01       	movw	r30, r28
    3018:	e1 5a       	subi	r30, 0xA1	; 161
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	4a e7       	ldi	r20, 0x7A	; 122
    302a:	55 e4       	ldi	r21, 0x45	; 69
    302c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	f8 01       	movw	r30, r16
    3036:	80 83       	st	Z, r24
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	a2 83       	std	Z+2, r26	; 0x02
    303c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    303e:	fe 01       	movw	r30, r28
    3040:	e5 5a       	subi	r30, 0xA5	; 165
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e8       	ldi	r20, 0x80	; 128
    3052:	5f e3       	ldi	r21, 0x3F	; 63
    3054:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3058:	88 23       	and	r24, r24
    305a:	44 f4       	brge	.+16     	; 0x306c <main+0xf64>
		__ticks = 1;
    305c:	fe 01       	movw	r30, r28
    305e:	e7 5a       	subi	r30, 0xA7	; 167
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	64 c0       	rjmp	.+200    	; 0x3134 <main+0x102c>
	else if (__tmp > 65535)
    306c:	fe 01       	movw	r30, r28
    306e:	e5 5a       	subi	r30, 0xA5	; 165
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	4f e7       	ldi	r20, 0x7F	; 127
    3080:	57 e4       	ldi	r21, 0x47	; 71
    3082:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3086:	18 16       	cp	r1, r24
    3088:	0c f0       	brlt	.+2      	; 0x308c <main+0xf84>
    308a:	43 c0       	rjmp	.+134    	; 0x3112 <main+0x100a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308c:	fe 01       	movw	r30, r28
    308e:	e1 5a       	subi	r30, 0xA1	; 161
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	60 81       	ld	r22, Z
    3094:	71 81       	ldd	r23, Z+1	; 0x01
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e2       	ldi	r20, 0x20	; 32
    30a0:	51 e4       	ldi	r21, 0x41	; 65
    30a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	8e 01       	movw	r16, r28
    30ac:	07 5a       	subi	r16, 0xA7	; 167
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
    30c2:	1f c0       	rjmp	.+62     	; 0x3102 <main+0xffa>
    30c4:	fe 01       	movw	r30, r28
    30c6:	e9 5a       	subi	r30, 0xA9	; 169
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 e9       	ldi	r24, 0x90	; 144
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	80 83       	st	Z, r24
    30d2:	fe 01       	movw	r30, r28
    30d4:	e9 5a       	subi	r30, 0xA9	; 169
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <main+0xfd4>
    30e0:	fe 01       	movw	r30, r28
    30e2:	e9 5a       	subi	r30, 0xA9	; 169
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ea:	de 01       	movw	r26, r28
    30ec:	a7 5a       	subi	r26, 0xA7	; 167
    30ee:	bf 4f       	sbci	r27, 0xFF	; 255
    30f0:	fe 01       	movw	r30, r28
    30f2:	e7 5a       	subi	r30, 0xA7	; 167
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	11 96       	adiw	r26, 0x01	; 1
    30fe:	9c 93       	st	X, r25
    3100:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3102:	fe 01       	movw	r30, r28
    3104:	e7 5a       	subi	r30, 0xA7	; 167
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	d1 f6       	brne	.-76     	; 0x30c4 <main+0xfbc>
    3110:	27 c0       	rjmp	.+78     	; 0x3160 <main+0x1058>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	8e 01       	movw	r16, r28
    3114:	07 5a       	subi	r16, 0xA7	; 167
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	fe 01       	movw	r30, r28
    311a:	e5 5a       	subi	r30, 0xA5	; 165
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	60 81       	ld	r22, Z
    3120:	71 81       	ldd	r23, Z+1	; 0x01
    3122:	82 81       	ldd	r24, Z+2	; 0x02
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	f8 01       	movw	r30, r16
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	80 83       	st	Z, r24
    3134:	de 01       	movw	r26, r28
    3136:	ab 5a       	subi	r26, 0xAB	; 171
    3138:	bf 4f       	sbci	r27, 0xFF	; 255
    313a:	fe 01       	movw	r30, r28
    313c:	e7 5a       	subi	r30, 0xA7	; 167
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	8d 93       	st	X+, r24
    3146:	9c 93       	st	X, r25
    3148:	fe 01       	movw	r30, r28
    314a:	eb 5a       	subi	r30, 0xAB	; 171
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <main+0x104a>
    3156:	fe 01       	movw	r30, r28
    3158:	eb 5a       	subi	r30, 0xAB	; 171
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("2- Fan ON");
    3160:	8d eb       	ldi	r24, 0xBD	; 189
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
			LCD_SendString("3- Fan OFF");
    3170:	87 ec       	ldi	r24, 0xC7	; 199
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
    3178:	fe 01       	movw	r30, r28
    317a:	ef 5a       	subi	r30, 0xAF	; 175
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e8       	ldi	r25, 0x80	; 128
    3182:	ab eb       	ldi	r26, 0xBB	; 187
    3184:	b4 e4       	ldi	r27, 0x44	; 68
    3186:	80 83       	st	Z, r24
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	a2 83       	std	Z+2, r26	; 0x02
    318c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318e:	8e 01       	movw	r16, r28
    3190:	03 5b       	subi	r16, 0xB3	; 179
    3192:	1f 4f       	sbci	r17, 0xFF	; 255
    3194:	fe 01       	movw	r30, r28
    3196:	ef 5a       	subi	r30, 0xAF	; 175
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4a e7       	ldi	r20, 0x7A	; 122
    31a8:	55 e4       	ldi	r21, 0x45	; 69
    31aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	f8 01       	movw	r30, r16
    31b4:	80 83       	st	Z, r24
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	a2 83       	std	Z+2, r26	; 0x02
    31ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31bc:	fe 01       	movw	r30, r28
    31be:	e3 5b       	subi	r30, 0xB3	; 179
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	44 f4       	brge	.+16     	; 0x31ea <main+0x10e2>
		__ticks = 1;
    31da:	fe 01       	movw	r30, r28
    31dc:	e5 5b       	subi	r30, 0xB5	; 181
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	91 83       	std	Z+1, r25	; 0x01
    31e6:	80 83       	st	Z, r24
    31e8:	64 c0       	rjmp	.+200    	; 0x32b2 <main+0x11aa>
	else if (__tmp > 65535)
    31ea:	fe 01       	movw	r30, r28
    31ec:	e3 5b       	subi	r30, 0xB3	; 179
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	60 81       	ld	r22, Z
    31f2:	71 81       	ldd	r23, Z+1	; 0x01
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	93 81       	ldd	r25, Z+3	; 0x03
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	3f ef       	ldi	r19, 0xFF	; 255
    31fc:	4f e7       	ldi	r20, 0x7F	; 127
    31fe:	57 e4       	ldi	r21, 0x47	; 71
    3200:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3204:	18 16       	cp	r1, r24
    3206:	0c f0       	brlt	.+2      	; 0x320a <main+0x1102>
    3208:	43 c0       	rjmp	.+134    	; 0x3290 <main+0x1188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320a:	fe 01       	movw	r30, r28
    320c:	ef 5a       	subi	r30, 0xAF	; 175
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	8e 01       	movw	r16, r28
    322a:	05 5b       	subi	r16, 0xB5	; 181
    322c:	1f 4f       	sbci	r17, 0xFF	; 255
    322e:	bc 01       	movw	r22, r24
    3230:	cd 01       	movw	r24, r26
    3232:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	f8 01       	movw	r30, r16
    323c:	91 83       	std	Z+1, r25	; 0x01
    323e:	80 83       	st	Z, r24
    3240:	1f c0       	rjmp	.+62     	; 0x3280 <main+0x1178>
    3242:	fe 01       	movw	r30, r28
    3244:	e7 5b       	subi	r30, 0xB7	; 183
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 e9       	ldi	r24, 0x90	; 144
    324a:	91 e0       	ldi	r25, 0x01	; 1
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	fe 01       	movw	r30, r28
    3252:	e7 5b       	subi	r30, 0xB7	; 183
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <main+0x1152>
    325e:	fe 01       	movw	r30, r28
    3260:	e7 5b       	subi	r30, 0xB7	; 183
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3268:	de 01       	movw	r26, r28
    326a:	a5 5b       	subi	r26, 0xB5	; 181
    326c:	bf 4f       	sbci	r27, 0xFF	; 255
    326e:	fe 01       	movw	r30, r28
    3270:	e5 5b       	subi	r30, 0xB5	; 181
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	11 96       	adiw	r26, 0x01	; 1
    327c:	9c 93       	st	X, r25
    327e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3280:	fe 01       	movw	r30, r28
    3282:	e5 5b       	subi	r30, 0xB5	; 181
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	d1 f6       	brne	.-76     	; 0x3242 <main+0x113a>
    328e:	27 c0       	rjmp	.+78     	; 0x32de <main+0x11d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3290:	8e 01       	movw	r16, r28
    3292:	05 5b       	subi	r16, 0xB5	; 181
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	fe 01       	movw	r30, r28
    3298:	e3 5b       	subi	r30, 0xB3	; 179
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	f8 01       	movw	r30, r16
    32ae:	91 83       	std	Z+1, r25	; 0x01
    32b0:	80 83       	st	Z, r24
    32b2:	de 01       	movw	r26, r28
    32b4:	a9 5b       	subi	r26, 0xB9	; 185
    32b6:	bf 4f       	sbci	r27, 0xFF	; 255
    32b8:	fe 01       	movw	r30, r28
    32ba:	e5 5b       	subi	r30, 0xB5	; 181
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	80 81       	ld	r24, Z
    32c0:	91 81       	ldd	r25, Z+1	; 0x01
    32c2:	8d 93       	st	X+, r24
    32c4:	9c 93       	st	X, r25
    32c6:	fe 01       	movw	r30, r28
    32c8:	e9 5b       	subi	r30, 0xB9	; 185
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <main+0x11c8>
    32d4:	fe 01       	movw	r30, r28
    32d6:	e9 5b       	subi	r30, 0xB9	; 185
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	91 83       	std	Z+1, r25	; 0x01
    32dc:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    32de:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    32e2:	fe 01       	movw	r30, r28
    32e4:	ed 5b       	subi	r30, 0xBD	; 189
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e4       	ldi	r27, 0x40	; 64
    32f0:	80 83       	st	Z, r24
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	a2 83       	std	Z+2, r26	; 0x02
    32f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f8:	8e 01       	movw	r16, r28
    32fa:	01 5c       	subi	r16, 0xC1	; 193
    32fc:	1f 4f       	sbci	r17, 0xFF	; 255
    32fe:	fe 01       	movw	r30, r28
    3300:	ed 5b       	subi	r30, 0xBD	; 189
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	4a e7       	ldi	r20, 0x7A	; 122
    3312:	55 e4       	ldi	r21, 0x45	; 69
    3314:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	f8 01       	movw	r30, r16
    331e:	80 83       	st	Z, r24
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	a2 83       	std	Z+2, r26	; 0x02
    3324:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3326:	fe 01       	movw	r30, r28
    3328:	ff 96       	adiw	r30, 0x3f	; 63
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	40 e8       	ldi	r20, 0x80	; 128
    3338:	5f e3       	ldi	r21, 0x3F	; 63
    333a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    333e:	88 23       	and	r24, r24
    3340:	2c f4       	brge	.+10     	; 0x334c <main+0x1244>
		__ticks = 1;
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	9e af       	std	Y+62, r25	; 0x3e
    3348:	8d af       	std	Y+61, r24	; 0x3d
    334a:	46 c0       	rjmp	.+140    	; 0x33d8 <main+0x12d0>
	else if (__tmp > 65535)
    334c:	fe 01       	movw	r30, r28
    334e:	ff 96       	adiw	r30, 0x3f	; 63
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	64 f5       	brge	.+88     	; 0x33c0 <main+0x12b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3368:	fe 01       	movw	r30, r28
    336a:	ed 5b       	subi	r30, 0xBD	; 189
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	60 81       	ld	r22, Z
    3370:	71 81       	ldd	r23, Z+1	; 0x01
    3372:	82 81       	ldd	r24, Z+2	; 0x02
    3374:	93 81       	ldd	r25, Z+3	; 0x03
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e2       	ldi	r20, 0x20	; 32
    337c:	51 e4       	ldi	r21, 0x41	; 65
    337e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9e af       	std	Y+62, r25	; 0x3e
    3394:	8d af       	std	Y+61, r24	; 0x3d
    3396:	0f c0       	rjmp	.+30     	; 0x33b6 <main+0x12ae>
    3398:	80 e9       	ldi	r24, 0x90	; 144
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	9c af       	std	Y+60, r25	; 0x3c
    339e:	8b af       	std	Y+59, r24	; 0x3b
    33a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    33a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <main+0x129c>
    33a8:	9c af       	std	Y+60, r25	; 0x3c
    33aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    33ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	9e af       	std	Y+62, r25	; 0x3e
    33b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    33b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	69 f7       	brne	.-38     	; 0x3398 <main+0x1290>
    33be:	16 c0       	rjmp	.+44     	; 0x33ec <main+0x12e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c0:	fe 01       	movw	r30, r28
    33c2:	ff 96       	adiw	r30, 0x3f	; 63
    33c4:	60 81       	ld	r22, Z
    33c6:	71 81       	ldd	r23, Z+1	; 0x01
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9e af       	std	Y+62, r25	; 0x3e
    33d6:	8d af       	std	Y+61, r24	; 0x3d
    33d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    33da:	9e ad       	ldd	r25, Y+62	; 0x3e
    33dc:	9a af       	std	Y+58, r25	; 0x3a
    33de:	89 af       	std	Y+57, r24	; 0x39
    33e0:	89 ad       	ldd	r24, Y+57	; 0x39
    33e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <main+0x12dc>
    33e8:	9a af       	std	Y+58, r25	; 0x3a
    33ea:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			LCD_SendString("4- Lights ON");
    33ec:	82 ed       	ldi	r24, 0xD2	; 210
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
			LCD_SendString("5- Lights OFF");
    33fc:	8f ed       	ldi	r24, 0xDF	; 223
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e8       	ldi	r25, 0x80	; 128
    3408:	ab eb       	ldi	r26, 0xBB	; 187
    340a:	b4 e4       	ldi	r27, 0x44	; 68
    340c:	8d ab       	std	Y+53, r24	; 0x35
    340e:	9e ab       	std	Y+54, r25	; 0x36
    3410:	af ab       	std	Y+55, r26	; 0x37
    3412:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3414:	6d a9       	ldd	r22, Y+53	; 0x35
    3416:	7e a9       	ldd	r23, Y+54	; 0x36
    3418:	8f a9       	ldd	r24, Y+55	; 0x37
    341a:	98 ad       	ldd	r25, Y+56	; 0x38
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a e7       	ldi	r20, 0x7A	; 122
    3422:	55 e4       	ldi	r21, 0x45	; 69
    3424:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	89 ab       	std	Y+49, r24	; 0x31
    342e:	9a ab       	std	Y+50, r25	; 0x32
    3430:	ab ab       	std	Y+51, r26	; 0x33
    3432:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3434:	69 a9       	ldd	r22, Y+49	; 0x31
    3436:	7a a9       	ldd	r23, Y+50	; 0x32
    3438:	8b a9       	ldd	r24, Y+51	; 0x33
    343a:	9c a9       	ldd	r25, Y+52	; 0x34
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	5f e3       	ldi	r21, 0x3F	; 63
    3444:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3448:	88 23       	and	r24, r24
    344a:	2c f4       	brge	.+10     	; 0x3456 <main+0x134e>
		__ticks = 1;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	98 ab       	std	Y+48, r25	; 0x30
    3452:	8f a7       	std	Y+47, r24	; 0x2f
    3454:	3f c0       	rjmp	.+126    	; 0x34d4 <main+0x13cc>
	else if (__tmp > 65535)
    3456:	69 a9       	ldd	r22, Y+49	; 0x31
    3458:	7a a9       	ldd	r23, Y+50	; 0x32
    345a:	8b a9       	ldd	r24, Y+51	; 0x33
    345c:	9c a9       	ldd	r25, Y+52	; 0x34
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	3f ef       	ldi	r19, 0xFF	; 255
    3462:	4f e7       	ldi	r20, 0x7F	; 127
    3464:	57 e4       	ldi	r21, 0x47	; 71
    3466:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    346a:	18 16       	cp	r1, r24
    346c:	4c f5       	brge	.+82     	; 0x34c0 <main+0x13b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346e:	6d a9       	ldd	r22, Y+53	; 0x35
    3470:	7e a9       	ldd	r23, Y+54	; 0x36
    3472:	8f a9       	ldd	r24, Y+55	; 0x37
    3474:	98 ad       	ldd	r25, Y+56	; 0x38
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e2       	ldi	r20, 0x20	; 32
    347c:	51 e4       	ldi	r21, 0x41	; 65
    347e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	98 ab       	std	Y+48, r25	; 0x30
    3494:	8f a7       	std	Y+47, r24	; 0x2f
    3496:	0f c0       	rjmp	.+30     	; 0x34b6 <main+0x13ae>
    3498:	80 e9       	ldi	r24, 0x90	; 144
    349a:	91 e0       	ldi	r25, 0x01	; 1
    349c:	9e a7       	std	Y+46, r25	; 0x2e
    349e:	8d a7       	std	Y+45, r24	; 0x2d
    34a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    34a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <main+0x139c>
    34a8:	9e a7       	std	Y+46, r25	; 0x2e
    34aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ae:	98 a9       	ldd	r25, Y+48	; 0x30
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	98 ab       	std	Y+48, r25	; 0x30
    34b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b8:	98 a9       	ldd	r25, Y+48	; 0x30
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	69 f7       	brne	.-38     	; 0x3498 <main+0x1390>
    34be:	14 c0       	rjmp	.+40     	; 0x34e8 <main+0x13e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c0:	69 a9       	ldd	r22, Y+49	; 0x31
    34c2:	7a a9       	ldd	r23, Y+50	; 0x32
    34c4:	8b a9       	ldd	r24, Y+51	; 0x33
    34c6:	9c a9       	ldd	r25, Y+52	; 0x34
    34c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	98 ab       	std	Y+48, r25	; 0x30
    34d2:	8f a7       	std	Y+47, r24	; 0x2f
    34d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d6:	98 a9       	ldd	r25, Y+48	; 0x30
    34d8:	9c a7       	std	Y+44, r25	; 0x2c
    34da:	8b a7       	std	Y+43, r24	; 0x2b
    34dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    34de:	9c a5       	ldd	r25, Y+44	; 0x2c
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	f1 f7       	brne	.-4      	; 0x34e0 <main+0x13d8>
    34e4:	9c a7       	std	Y+44, r25	; 0x2c
    34e6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1500);
			LCD_ClearDisplay();
    34e8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a0 e0       	ldi	r26, 0x00	; 0
    34f2:	b0 e4       	ldi	r27, 0x40	; 64
    34f4:	8f a3       	std	Y+39, r24	; 0x27
    34f6:	98 a7       	std	Y+40, r25	; 0x28
    34f8:	a9 a7       	std	Y+41, r26	; 0x29
    34fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6f a1       	ldd	r22, Y+39	; 0x27
    34fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3500:	89 a5       	ldd	r24, Y+41	; 0x29
    3502:	9a a5       	ldd	r25, Y+42	; 0x2a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a e7       	ldi	r20, 0x7A	; 122
    350a:	55 e4       	ldi	r21, 0x45	; 69
    350c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8b a3       	std	Y+35, r24	; 0x23
    3516:	9c a3       	std	Y+36, r25	; 0x24
    3518:	ad a3       	std	Y+37, r26	; 0x25
    351a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    351c:	6b a1       	ldd	r22, Y+35	; 0x23
    351e:	7c a1       	ldd	r23, Y+36	; 0x24
    3520:	8d a1       	ldd	r24, Y+37	; 0x25
    3522:	9e a1       	ldd	r25, Y+38	; 0x26
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <main+0x1436>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <main+0x14b4>
	else if (__tmp > 65535)
    353e:	6b a1       	ldd	r22, Y+35	; 0x23
    3540:	7c a1       	ldd	r23, Y+36	; 0x24
    3542:	8d a1       	ldd	r24, Y+37	; 0x25
    3544:	9e a1       	ldd	r25, Y+38	; 0x26
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <main+0x14a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6f a1       	ldd	r22, Y+39	; 0x27
    3558:	78 a5       	ldd	r23, Y+40	; 0x28
    355a:	89 a5       	ldd	r24, Y+41	; 0x29
    355c:	9a a5       	ldd	r25, Y+42	; 0x2a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9a a3       	std	Y+34, r25	; 0x22
    357c:	89 a3       	std	Y+33, r24	; 0x21
    357e:	0f c0       	rjmp	.+30     	; 0x359e <main+0x1496>
    3580:	80 e9       	ldi	r24, 0x90	; 144
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	98 a3       	std	Y+32, r25	; 0x20
    3586:	8f 8f       	std	Y+31, r24	; 0x1f
    3588:	8f 8d       	ldd	r24, Y+31	; 0x1f
    358a:	98 a1       	ldd	r25, Y+32	; 0x20
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <main+0x1484>
    3590:	98 a3       	std	Y+32, r25	; 0x20
    3592:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	9a a3       	std	Y+34, r25	; 0x22
    359c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	89 a1       	ldd	r24, Y+33	; 0x21
    35a0:	9a a1       	ldd	r25, Y+34	; 0x22
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <main+0x1478>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <main+0x14c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	6b a1       	ldd	r22, Y+35	; 0x23
    35aa:	7c a1       	ldd	r23, Y+36	; 0x24
    35ac:	8d a1       	ldd	r24, Y+37	; 0x25
    35ae:	9e a1       	ldd	r25, Y+38	; 0x26
    35b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9a a3       	std	Y+34, r25	; 0x22
    35ba:	89 a3       	std	Y+33, r24	; 0x21
    35bc:	89 a1       	ldd	r24, Y+33	; 0x21
    35be:	9a a1       	ldd	r25, Y+34	; 0x22
    35c0:	9e 8f       	std	Y+30, r25	; 0x1e
    35c2:	8d 8f       	std	Y+29, r24	; 0x1d
    35c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <main+0x14c0>
    35cc:	9e 8f       	std	Y+30, r25	; 0x1e
    35ce:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			do
			{
				choosenOption=get_button_pressed();
    35d0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <get_button_pressed>
    35d4:	fe 01       	movw	r30, r28
    35d6:	ee 51       	subi	r30, 0x1E	; 30
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 83       	st	Z, r24

			}while(choosenOption==0xff);
    35dc:	fe 01       	movw	r30, r28
    35de:	ee 51       	subi	r30, 0x1E	; 30
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 81       	ld	r24, Z
    35e4:	8f 3f       	cpi	r24, 0xFF	; 255
    35e6:	a1 f3       	breq	.-24     	; 0x35d0 <main+0x14c8>

			switch(choosenOption)
    35e8:	fe 01       	movw	r30, r28
    35ea:	ee 51       	subi	r30, 0x1E	; 30
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	cd 50       	subi	r28, 0x0D	; 13
    35f6:	df 4f       	sbci	r29, 0xFF	; 255
    35f8:	39 83       	std	Y+1, r19	; 0x01
    35fa:	28 83       	st	Y, r18
    35fc:	c3 5f       	subi	r28, 0xF3	; 243
    35fe:	d0 40       	sbci	r29, 0x00	; 0
    3600:	cd 50       	subi	r28, 0x0D	; 13
    3602:	df 4f       	sbci	r29, 0xFF	; 255
    3604:	88 81       	ld	r24, Y
    3606:	99 81       	ldd	r25, Y+1	; 0x01
    3608:	c3 5f       	subi	r28, 0xF3	; 243
    360a:	d0 40       	sbci	r29, 0x00	; 0
    360c:	83 33       	cpi	r24, 0x33	; 51
    360e:	91 05       	cpc	r25, r1
    3610:	09 f4       	brne	.+2      	; 0x3614 <main+0x150c>
    3612:	6d c1       	rjmp	.+730    	; 0x38ee <main+0x17e6>
    3614:	cd 50       	subi	r28, 0x0D	; 13
    3616:	df 4f       	sbci	r29, 0xFF	; 255
    3618:	e8 81       	ld	r30, Y
    361a:	f9 81       	ldd	r31, Y+1	; 0x01
    361c:	c3 5f       	subi	r28, 0xF3	; 243
    361e:	d0 40       	sbci	r29, 0x00	; 0
    3620:	e4 33       	cpi	r30, 0x34	; 52
    3622:	f1 05       	cpc	r31, r1
    3624:	a4 f4       	brge	.+40     	; 0x364e <main+0x1546>
    3626:	cd 50       	subi	r28, 0x0D	; 13
    3628:	df 4f       	sbci	r29, 0xFF	; 255
    362a:	28 81       	ld	r18, Y
    362c:	39 81       	ldd	r19, Y+1	; 0x01
    362e:	c3 5f       	subi	r28, 0xF3	; 243
    3630:	d0 40       	sbci	r29, 0x00	; 0
    3632:	21 33       	cpi	r18, 0x31	; 49
    3634:	31 05       	cpc	r19, r1
    3636:	01 f1       	breq	.+64     	; 0x3678 <main+0x1570>
    3638:	cd 50       	subi	r28, 0x0D	; 13
    363a:	df 4f       	sbci	r29, 0xFF	; 255
    363c:	88 81       	ld	r24, Y
    363e:	99 81       	ldd	r25, Y+1	; 0x01
    3640:	c3 5f       	subi	r28, 0xF3	; 243
    3642:	d0 40       	sbci	r29, 0x00	; 0
    3644:	82 33       	cpi	r24, 0x32	; 50
    3646:	91 05       	cpc	r25, r1
    3648:	09 f4       	brne	.+2      	; 0x364c <main+0x1544>
    364a:	4a c1       	rjmp	.+660    	; 0x38e0 <main+0x17d8>
    364c:	d5 c8       	rjmp	.-3670   	; 0x27f8 <main+0x6f0>
    364e:	cd 50       	subi	r28, 0x0D	; 13
    3650:	df 4f       	sbci	r29, 0xFF	; 255
    3652:	e8 81       	ld	r30, Y
    3654:	f9 81       	ldd	r31, Y+1	; 0x01
    3656:	c3 5f       	subi	r28, 0xF3	; 243
    3658:	d0 40       	sbci	r29, 0x00	; 0
    365a:	e4 33       	cpi	r30, 0x34	; 52
    365c:	f1 05       	cpc	r31, r1
    365e:	09 f4       	brne	.+2      	; 0x3662 <main+0x155a>
    3660:	4d c1       	rjmp	.+666    	; 0x38fc <main+0x17f4>
    3662:	cd 50       	subi	r28, 0x0D	; 13
    3664:	df 4f       	sbci	r29, 0xFF	; 255
    3666:	28 81       	ld	r18, Y
    3668:	39 81       	ldd	r19, Y+1	; 0x01
    366a:	c3 5f       	subi	r28, 0xF3	; 243
    366c:	d0 40       	sbci	r29, 0x00	; 0
    366e:	25 33       	cpi	r18, 0x35	; 53
    3670:	31 05       	cpc	r19, r1
    3672:	09 f4       	brne	.+2      	; 0x3676 <main+0x156e>
    3674:	4a c1       	rjmp	.+660    	; 0x390a <main+0x1802>
    3676:	c0 c8       	rjmp	.-3712   	; 0x27f8 <main+0x6f0>
			{
				case '1':
					valueADC= ADC_StartConversion(ADC1);
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <ADC_StartConversion>
    367e:	fe 01       	movw	r30, r28
    3680:	e6 51       	subi	r30, 0x16	; 22
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 83       	st	Z, r24
					analogue=(uint32)valueADC*5000UL/256UL; //in mV
    3686:	fe 01       	movw	r30, r28
    3688:	e6 51       	subi	r30, 0x16	; 22
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	88 2f       	mov	r24, r24
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	a0 e0       	ldi	r26, 0x00	; 0
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	28 e8       	ldi	r18, 0x88	; 136
    3698:	33 e1       	ldi	r19, 0x13	; 19
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__mulsi3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	fe 01       	movw	r30, r28
    36ac:	ea 51       	subi	r30, 0x1A	; 26
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	89 2f       	mov	r24, r25
    36b2:	9a 2f       	mov	r25, r26
    36b4:	ab 2f       	mov	r26, r27
    36b6:	bb 27       	eor	r27, r27
    36b8:	80 83       	st	Z, r24
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	a2 83       	std	Z+2, r26	; 0x02
    36be:	b3 83       	std	Z+3, r27	; 0x03
					temprature=analogue/10;
    36c0:	fe 01       	movw	r30, r28
    36c2:	ea 51       	subi	r30, 0x1A	; 26
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	a2 81       	ldd	r26, Z+2	; 0x02
    36cc:	b3 81       	ldd	r27, Z+3	; 0x03
    36ce:	2a e0       	ldi	r18, 0x0A	; 10
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__udivmodsi4>
    36de:	da 01       	movw	r26, r20
    36e0:	c9 01       	movw	r24, r18
    36e2:	fe 01       	movw	r30, r28
    36e4:	eb 51       	subi	r30, 0x1B	; 27
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 83       	st	Z, r24
					LCD_SendString("Temp=");
    36ea:	8d ee       	ldi	r24, 0xED	; 237
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
					LCD_GoToXY(FirstLine, 6);
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	66 e0       	ldi	r22, 0x06	; 6
    36f6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_GoToXY>
					LCD_uint8_WriteNumber(temprature);
    36fa:	fe 01       	movw	r30, r28
    36fc:	eb 51       	subi	r30, 0x1B	; 27
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	80 81       	ld	r24, Z
    3702:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_uint8_WriteNumber>
					LCD_SendString(" 'C");
    3706:	83 ef       	ldi	r24, 0xF3	; 243
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_SendString>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	90 e8       	ldi	r25, 0x80	; 128
    3712:	ab e3       	ldi	r26, 0x3B	; 59
    3714:	b5 e4       	ldi	r27, 0x45	; 69
    3716:	89 8f       	std	Y+25, r24	; 0x19
    3718:	9a 8f       	std	Y+26, r25	; 0x1a
    371a:	ab 8f       	std	Y+27, r26	; 0x1b
    371c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371e:	69 8d       	ldd	r22, Y+25	; 0x19
    3720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	4a e7       	ldi	r20, 0x7A	; 122
    372c:	55 e4       	ldi	r21, 0x45	; 69
    372e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	8d 8b       	std	Y+21, r24	; 0x15
    3738:	9e 8b       	std	Y+22, r25	; 0x16
    373a:	af 8b       	std	Y+23, r26	; 0x17
    373c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    373e:	6d 89       	ldd	r22, Y+21	; 0x15
    3740:	7e 89       	ldd	r23, Y+22	; 0x16
    3742:	8f 89       	ldd	r24, Y+23	; 0x17
    3744:	98 8d       	ldd	r25, Y+24	; 0x18
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e8       	ldi	r20, 0x80	; 128
    374c:	5f e3       	ldi	r21, 0x3F	; 63
    374e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3752:	88 23       	and	r24, r24
    3754:	2c f4       	brge	.+10     	; 0x3760 <main+0x1658>
		__ticks = 1;
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	9c 8b       	std	Y+20, r25	; 0x14
    375c:	8b 8b       	std	Y+19, r24	; 0x13
    375e:	3f c0       	rjmp	.+126    	; 0x37de <main+0x16d6>
	else if (__tmp > 65535)
    3760:	6d 89       	ldd	r22, Y+21	; 0x15
    3762:	7e 89       	ldd	r23, Y+22	; 0x16
    3764:	8f 89       	ldd	r24, Y+23	; 0x17
    3766:	98 8d       	ldd	r25, Y+24	; 0x18
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	3f ef       	ldi	r19, 0xFF	; 255
    376c:	4f e7       	ldi	r20, 0x7F	; 127
    376e:	57 e4       	ldi	r21, 0x47	; 71
    3770:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3774:	18 16       	cp	r1, r24
    3776:	4c f5       	brge	.+82     	; 0x37ca <main+0x16c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3778:	69 8d       	ldd	r22, Y+25	; 0x19
    377a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    377c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e2       	ldi	r20, 0x20	; 32
    3786:	51 e4       	ldi	r21, 0x41	; 65
    3788:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	bc 01       	movw	r22, r24
    3792:	cd 01       	movw	r24, r26
    3794:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	9c 8b       	std	Y+20, r25	; 0x14
    379e:	8b 8b       	std	Y+19, r24	; 0x13
    37a0:	0f c0       	rjmp	.+30     	; 0x37c0 <main+0x16b8>
    37a2:	80 e9       	ldi	r24, 0x90	; 144
    37a4:	91 e0       	ldi	r25, 0x01	; 1
    37a6:	9a 8b       	std	Y+18, r25	; 0x12
    37a8:	89 8b       	std	Y+17, r24	; 0x11
    37aa:	89 89       	ldd	r24, Y+17	; 0x11
    37ac:	9a 89       	ldd	r25, Y+18	; 0x12
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	f1 f7       	brne	.-4      	; 0x37ae <main+0x16a6>
    37b2:	9a 8b       	std	Y+18, r25	; 0x12
    37b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b6:	8b 89       	ldd	r24, Y+19	; 0x13
    37b8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	9c 8b       	std	Y+20, r25	; 0x14
    37be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c0:	8b 89       	ldd	r24, Y+19	; 0x13
    37c2:	9c 89       	ldd	r25, Y+20	; 0x14
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	69 f7       	brne	.-38     	; 0x37a2 <main+0x169a>
    37c8:	14 c0       	rjmp	.+40     	; 0x37f2 <main+0x16ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ca:	6d 89       	ldd	r22, Y+21	; 0x15
    37cc:	7e 89       	ldd	r23, Y+22	; 0x16
    37ce:	8f 89       	ldd	r24, Y+23	; 0x17
    37d0:	98 8d       	ldd	r25, Y+24	; 0x18
    37d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	9c 8b       	std	Y+20, r25	; 0x14
    37dc:	8b 8b       	std	Y+19, r24	; 0x13
    37de:	8b 89       	ldd	r24, Y+19	; 0x13
    37e0:	9c 89       	ldd	r25, Y+20	; 0x14
    37e2:	98 8b       	std	Y+16, r25	; 0x10
    37e4:	8f 87       	std	Y+15, r24	; 0x0f
    37e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e8:	98 89       	ldd	r25, Y+16	; 0x10
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <main+0x16e2>
    37ee:	98 8b       	std	Y+16, r25	; 0x10
    37f0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(3000);
					LCD_ClearDisplay();
    37f2:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_ClearDisplay>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	a0 e0       	ldi	r26, 0x00	; 0
    37fc:	b0 e4       	ldi	r27, 0x40	; 64
    37fe:	8b 87       	std	Y+11, r24	; 0x0b
    3800:	9c 87       	std	Y+12, r25	; 0x0c
    3802:	ad 87       	std	Y+13, r26	; 0x0d
    3804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3806:	6b 85       	ldd	r22, Y+11	; 0x0b
    3808:	7c 85       	ldd	r23, Y+12	; 0x0c
    380a:	8d 85       	ldd	r24, Y+13	; 0x0d
    380c:	9e 85       	ldd	r25, Y+14	; 0x0e
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	4a e7       	ldi	r20, 0x7A	; 122
    3814:	55 e4       	ldi	r21, 0x45	; 69
    3816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	8f 83       	std	Y+7, r24	; 0x07
    3820:	98 87       	std	Y+8, r25	; 0x08
    3822:	a9 87       	std	Y+9, r26	; 0x09
    3824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3826:	6f 81       	ldd	r22, Y+7	; 0x07
    3828:	78 85       	ldd	r23, Y+8	; 0x08
    382a:	89 85       	ldd	r24, Y+9	; 0x09
    382c:	9a 85       	ldd	r25, Y+10	; 0x0a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e8       	ldi	r20, 0x80	; 128
    3834:	5f e3       	ldi	r21, 0x3F	; 63
    3836:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    383a:	88 23       	and	r24, r24
    383c:	2c f4       	brge	.+10     	; 0x3848 <main+0x1740>
		__ticks = 1;
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9e 83       	std	Y+6, r25	; 0x06
    3844:	8d 83       	std	Y+5, r24	; 0x05
    3846:	40 c0       	rjmp	.+128    	; 0x38c8 <main+0x17c0>
	else if (__tmp > 65535)
    3848:	6f 81       	ldd	r22, Y+7	; 0x07
    384a:	78 85       	ldd	r23, Y+8	; 0x08
    384c:	89 85       	ldd	r24, Y+9	; 0x09
    384e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	3f ef       	ldi	r19, 0xFF	; 255
    3854:	4f e7       	ldi	r20, 0x7F	; 127
    3856:	57 e4       	ldi	r21, 0x47	; 71
    3858:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    385c:	18 16       	cp	r1, r24
    385e:	54 f5       	brge	.+84     	; 0x38b4 <main+0x17ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3860:	6b 85       	ldd	r22, Y+11	; 0x0b
    3862:	7c 85       	ldd	r23, Y+12	; 0x0c
    3864:	8d 85       	ldd	r24, Y+13	; 0x0d
    3866:	9e 85       	ldd	r25, Y+14	; 0x0e
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e2       	ldi	r20, 0x20	; 32
    386e:	51 e4       	ldi	r21, 0x41	; 65
    3870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	0f c0       	rjmp	.+30     	; 0x38a8 <main+0x17a0>
    388a:	80 e9       	ldi	r24, 0x90	; 144
    388c:	91 e0       	ldi	r25, 0x01	; 1
    388e:	9c 83       	std	Y+4, r25	; 0x04
    3890:	8b 83       	std	Y+3, r24	; 0x03
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	9c 81       	ldd	r25, Y+4	; 0x04
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <main+0x178e>
    389a:	9c 83       	std	Y+4, r25	; 0x04
    389c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389e:	8d 81       	ldd	r24, Y+5	; 0x05
    38a0:	9e 81       	ldd	r25, Y+6	; 0x06
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	9e 83       	std	Y+6, r25	; 0x06
    38a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a8:	8d 81       	ldd	r24, Y+5	; 0x05
    38aa:	9e 81       	ldd	r25, Y+6	; 0x06
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	69 f7       	brne	.-38     	; 0x388a <main+0x1782>
    38b0:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <main+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b4:	6f 81       	ldd	r22, Y+7	; 0x07
    38b6:	78 85       	ldd	r23, Y+8	; 0x08
    38b8:	89 85       	ldd	r24, Y+9	; 0x09
    38ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    38bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9e 83       	std	Y+6, r25	; 0x06
    38c6:	8d 83       	std	Y+5, r24	; 0x05
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <main+0x17cc>
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <main+0x6f0>
					_delay_ms(2);
					break;
				case '2':
					setPinVAlue(DIO_PORTD,PIN5,OUTPUT_HIGH);
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	65 e0       	ldi	r22, 0x05	; 5
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
    38ea:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <main+0x6f0>
					break;
				case '3':
					setPinVAlue(DIO_PORTD,PIN5,OUTPUT_LOW);
    38ee:	83 e0       	ldi	r24, 0x03	; 3
    38f0:	65 e0       	ldi	r22, 0x05	; 5
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
    38f8:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <main+0x6f0>
					break;
				case '4':
					setPinVAlue(DIO_PORTD,PIN7,OUTPUT_HIGH);
    38fc:	83 e0       	ldi	r24, 0x03	; 3
    38fe:	67 e0       	ldi	r22, 0x07	; 7
    3900:	41 e0       	ldi	r20, 0x01	; 1
    3902:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
    3906:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <main+0x6f0>
					break;
				case '5':
					setPinVAlue(DIO_PORTD,PIN7,OUTPUT_LOW);
    390a:	83 e0       	ldi	r24, 0x03	; 3
    390c:	67 e0       	ldi	r22, 0x07	; 7
    390e:	40 e0       	ldi	r20, 0x00	; 0
    3910:	0e 94 2c 07 	call	0xe58	; 0xe58 <setPinVAlue>
    3914:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <main+0x6f0>
				default:
					break;
			}
		}
	}
	return 0;
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
}
    391c:	cc 50       	subi	r28, 0x0C	; 12
    391e:	df 4f       	sbci	r29, 0xFF	; 255
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	cf 91       	pop	r28
    392c:	df 91       	pop	r29
    392e:	1f 91       	pop	r17
    3930:	0f 91       	pop	r16
    3932:	08 95       	ret

00003934 <ComparePasswords>:

static uint8 ComparePasswords(uint8 *pass1 , uint8 *pass2 )
{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	00 d0       	rcall	.+0      	; 0x393a <ComparePasswords+0x6>
    393a:	00 d0       	rcall	.+0      	; 0x393c <ComparePasswords+0x8>
    393c:	0f 92       	push	r0
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	9a 83       	std	Y+2, r25	; 0x02
    3944:	89 83       	std	Y+1, r24	; 0x01
    3946:	7c 83       	std	Y+4, r23	; 0x04
    3948:	6b 83       	std	Y+3, r22	; 0x03
	if(pass1[0]==pass2[3]&&pass1[1]==pass2[2]&&pass1[2]==pass2[1]&&pass1[3]==pass2[0])
    394a:	e9 81       	ldd	r30, Y+1	; 0x01
    394c:	fa 81       	ldd	r31, Y+2	; 0x02
    394e:	20 81       	ld	r18, Z
    3950:	8b 81       	ldd	r24, Y+3	; 0x03
    3952:	9c 81       	ldd	r25, Y+4	; 0x04
    3954:	fc 01       	movw	r30, r24
    3956:	33 96       	adiw	r30, 0x03	; 3
    3958:	80 81       	ld	r24, Z
    395a:	28 17       	cp	r18, r24
    395c:	29 f5       	brne	.+74     	; 0x39a8 <ComparePasswords+0x74>
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	9a 81       	ldd	r25, Y+2	; 0x02
    3962:	fc 01       	movw	r30, r24
    3964:	31 96       	adiw	r30, 0x01	; 1
    3966:	20 81       	ld	r18, Z
    3968:	8b 81       	ldd	r24, Y+3	; 0x03
    396a:	9c 81       	ldd	r25, Y+4	; 0x04
    396c:	fc 01       	movw	r30, r24
    396e:	32 96       	adiw	r30, 0x02	; 2
    3970:	80 81       	ld	r24, Z
    3972:	28 17       	cp	r18, r24
    3974:	c9 f4       	brne	.+50     	; 0x39a8 <ComparePasswords+0x74>
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	9a 81       	ldd	r25, Y+2	; 0x02
    397a:	fc 01       	movw	r30, r24
    397c:	32 96       	adiw	r30, 0x02	; 2
    397e:	20 81       	ld	r18, Z
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	9c 81       	ldd	r25, Y+4	; 0x04
    3984:	fc 01       	movw	r30, r24
    3986:	31 96       	adiw	r30, 0x01	; 1
    3988:	80 81       	ld	r24, Z
    398a:	28 17       	cp	r18, r24
    398c:	69 f4       	brne	.+26     	; 0x39a8 <ComparePasswords+0x74>
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	9a 81       	ldd	r25, Y+2	; 0x02
    3992:	fc 01       	movw	r30, r24
    3994:	33 96       	adiw	r30, 0x03	; 3
    3996:	90 81       	ld	r25, Z
    3998:	eb 81       	ldd	r30, Y+3	; 0x03
    399a:	fc 81       	ldd	r31, Y+4	; 0x04
    399c:	80 81       	ld	r24, Z
    399e:	98 17       	cp	r25, r24
    39a0:	19 f4       	brne	.+6      	; 0x39a8 <ComparePasswords+0x74>
	{
		return TRUE;
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	8d 83       	std	Y+5, r24	; 0x05
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <ComparePasswords+0x76>
	}
	else
	{
		return FALSE;
    39a8:	1d 82       	std	Y+5, r1	; 0x05
    39aa:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    39ac:	0f 90       	pop	r0
    39ae:	0f 90       	pop	r0
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <__mulsi3>:
    39bc:	62 9f       	mul	r22, r18
    39be:	d0 01       	movw	r26, r0
    39c0:	73 9f       	mul	r23, r19
    39c2:	f0 01       	movw	r30, r0
    39c4:	82 9f       	mul	r24, r18
    39c6:	e0 0d       	add	r30, r0
    39c8:	f1 1d       	adc	r31, r1
    39ca:	64 9f       	mul	r22, r20
    39cc:	e0 0d       	add	r30, r0
    39ce:	f1 1d       	adc	r31, r1
    39d0:	92 9f       	mul	r25, r18
    39d2:	f0 0d       	add	r31, r0
    39d4:	83 9f       	mul	r24, r19
    39d6:	f0 0d       	add	r31, r0
    39d8:	74 9f       	mul	r23, r20
    39da:	f0 0d       	add	r31, r0
    39dc:	65 9f       	mul	r22, r21
    39de:	f0 0d       	add	r31, r0
    39e0:	99 27       	eor	r25, r25
    39e2:	72 9f       	mul	r23, r18
    39e4:	b0 0d       	add	r27, r0
    39e6:	e1 1d       	adc	r30, r1
    39e8:	f9 1f       	adc	r31, r25
    39ea:	63 9f       	mul	r22, r19
    39ec:	b0 0d       	add	r27, r0
    39ee:	e1 1d       	adc	r30, r1
    39f0:	f9 1f       	adc	r31, r25
    39f2:	bd 01       	movw	r22, r26
    39f4:	cf 01       	movw	r24, r30
    39f6:	11 24       	eor	r1, r1
    39f8:	08 95       	ret

000039fa <__udivmodqi4>:
    39fa:	99 1b       	sub	r25, r25
    39fc:	79 e0       	ldi	r23, 0x09	; 9
    39fe:	04 c0       	rjmp	.+8      	; 0x3a08 <__udivmodqi4_ep>

00003a00 <__udivmodqi4_loop>:
    3a00:	99 1f       	adc	r25, r25
    3a02:	96 17       	cp	r25, r22
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <__udivmodqi4_ep>
    3a06:	96 1b       	sub	r25, r22

00003a08 <__udivmodqi4_ep>:
    3a08:	88 1f       	adc	r24, r24
    3a0a:	7a 95       	dec	r23
    3a0c:	c9 f7       	brne	.-14     	; 0x3a00 <__udivmodqi4_loop>
    3a0e:	80 95       	com	r24
    3a10:	08 95       	ret

00003a12 <__udivmodsi4>:
    3a12:	a1 e2       	ldi	r26, 0x21	; 33
    3a14:	1a 2e       	mov	r1, r26
    3a16:	aa 1b       	sub	r26, r26
    3a18:	bb 1b       	sub	r27, r27
    3a1a:	fd 01       	movw	r30, r26
    3a1c:	0d c0       	rjmp	.+26     	; 0x3a38 <__udivmodsi4_ep>

00003a1e <__udivmodsi4_loop>:
    3a1e:	aa 1f       	adc	r26, r26
    3a20:	bb 1f       	adc	r27, r27
    3a22:	ee 1f       	adc	r30, r30
    3a24:	ff 1f       	adc	r31, r31
    3a26:	a2 17       	cp	r26, r18
    3a28:	b3 07       	cpc	r27, r19
    3a2a:	e4 07       	cpc	r30, r20
    3a2c:	f5 07       	cpc	r31, r21
    3a2e:	20 f0       	brcs	.+8      	; 0x3a38 <__udivmodsi4_ep>
    3a30:	a2 1b       	sub	r26, r18
    3a32:	b3 0b       	sbc	r27, r19
    3a34:	e4 0b       	sbc	r30, r20
    3a36:	f5 0b       	sbc	r31, r21

00003a38 <__udivmodsi4_ep>:
    3a38:	66 1f       	adc	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	88 1f       	adc	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	1a 94       	dec	r1
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <__udivmodsi4_loop>
    3a44:	60 95       	com	r22
    3a46:	70 95       	com	r23
    3a48:	80 95       	com	r24
    3a4a:	90 95       	com	r25
    3a4c:	9b 01       	movw	r18, r22
    3a4e:	ac 01       	movw	r20, r24
    3a50:	bd 01       	movw	r22, r26
    3a52:	cf 01       	movw	r24, r30
    3a54:	08 95       	ret

00003a56 <__prologue_saves__>:
    3a56:	2f 92       	push	r2
    3a58:	3f 92       	push	r3
    3a5a:	4f 92       	push	r4
    3a5c:	5f 92       	push	r5
    3a5e:	6f 92       	push	r6
    3a60:	7f 92       	push	r7
    3a62:	8f 92       	push	r8
    3a64:	9f 92       	push	r9
    3a66:	af 92       	push	r10
    3a68:	bf 92       	push	r11
    3a6a:	cf 92       	push	r12
    3a6c:	df 92       	push	r13
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
    3a7e:	ca 1b       	sub	r28, r26
    3a80:	db 0b       	sbc	r29, r27
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	f8 94       	cli
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	cd bf       	out	0x3d, r28	; 61
    3a8c:	09 94       	ijmp

00003a8e <__epilogue_restores__>:
    3a8e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a90:	39 88       	ldd	r3, Y+17	; 0x11
    3a92:	48 88       	ldd	r4, Y+16	; 0x10
    3a94:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a96:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a98:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3aa0:	b9 84       	ldd	r11, Y+9	; 0x09
    3aa2:	c8 84       	ldd	r12, Y+8	; 0x08
    3aa4:	df 80       	ldd	r13, Y+7	; 0x07
    3aa6:	ee 80       	ldd	r14, Y+6	; 0x06
    3aa8:	fd 80       	ldd	r15, Y+5	; 0x05
    3aaa:	0c 81       	ldd	r16, Y+4	; 0x04
    3aac:	1b 81       	ldd	r17, Y+3	; 0x03
    3aae:	aa 81       	ldd	r26, Y+2	; 0x02
    3ab0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ab2:	ce 0f       	add	r28, r30
    3ab4:	d1 1d       	adc	r29, r1
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	ed 01       	movw	r28, r26
    3ac2:	08 95       	ret

00003ac4 <_exit>:
    3ac4:	f8 94       	cli

00003ac6 <__stop_program>:
    3ac6:	ff cf       	rjmp	.-2      	; 0x3ac6 <__stop_program>
