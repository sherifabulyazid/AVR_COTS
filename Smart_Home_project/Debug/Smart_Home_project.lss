
Smart_Home_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c2  00800060  000049d6  00004a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800222  00800222  00004c2c  2**0
                  ALLOC
  3 .stab         00003684  00000000  00000000  00004c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000107f  00000000  00000000  000082b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000932f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000094cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000096c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ce52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e028  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__vector_10>
      2c:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <main>
      8a:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 24 	jmp	0x497c	; 0x497c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 24 	jmp	0x497c	; 0x497c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e0       	ldi	r22, 0x04	; 4
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 24 	jmp	0x497c	; 0x497c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 24 	jmp	0x497c	; 0x497c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 24 	jmp	0x497c	; 0x497c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 5f       	subi	r30, 0xF4	; 244
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
uint8 ADC_uint8_BusyState = ADC_NOTBUSY;
/*global variable to set the ADC Asynch source*/
static uint8 ADC_uint8_ADCISRSource = STD_LOW;

void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*choosind the reference voltage*/
#if VOLTAGR_REF == AREF
	CLR_BIT(ADMUX, REFS1);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 77       	andi	r24, 0x7F	; 127
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS0);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
#endif

#if  ADC_RESOLUTION_MODE==ADC_RESOLUTION_8_BITS
	/*setting the bits for Left adjust*/
	SET_BIT(ADMUX, ADCLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#endif
	
#if ADC_CONVERSION_MODE	== ADC_SINGLE_CONVERSION_MODE

	/*set ADC as single conversion*/
	CLR_BIT(ADCSRA, ADATE);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24
	#endif
#endif

#if ADC_INTERRUPT_MODE == ADC_INTERRUPT_OFF
	/*disable interrupt*/
	CLR_BIT(ADCSRA, ADIE);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	8c 93       	st	X, r24
#elif ADC_INTERRUPT_MODE == ADC_INTERRUPT_ON
	SET_BIT(ADCSRA, ADIE);
#endif

	/*choosing the prescalar*/
	CLR_BIT(ADCSRA,ADPS2);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8b 7f       	andi	r24, 0xFB	; 251
     e88:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS0);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	8c 93       	st	X, r24
	ADCSRA |=ADC_PRESCALAR;
     ea6:	a6 e2       	ldi	r26, 0x26	; 38
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e2       	ldi	r30, 0x26	; 38
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	87 60       	ori	r24, 0x07	; 7
     eb2:	8c 93       	st	X, r24

	/*enable ADC*/
	SET_BIT(ADCSRA, ADEN);
     eb4:	a6 e2       	ldi	r26, 0x26	; 38
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e6 e2       	ldi	r30, 0x26	; 38
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 68       	ori	r24, 0x80	; 128
     ec0:	8c 93       	st	X, r24
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <ADC_StartConversion>:

uint8 ADC_StartConversion(uint8 copy_channel)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	/*choosing the ADC channel*/
	ADMUX &= 0b11100000;
     ed4:	a7 e2       	ldi	r26, 0x27	; 39
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e7 e2       	ldi	r30, 0x27	; 39
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 7e       	andi	r24, 0xE0	; 224
     ee0:	8c 93       	st	X, r24
	ADMUX |= copy_channel;
     ee2:	a7 e2       	ldi	r26, 0x27	; 39
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e7 e2       	ldi	r30, 0x27	; 39
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	90 81       	ld	r25, Z
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	89 2b       	or	r24, r25
     ef0:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADSC);
     ef2:	a6 e2       	ldi	r26, 0x26	; 38
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e6 e2       	ldi	r30, 0x26	; 38
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
	
	while(!GET_BIT(ADCSRA,ADIF));
     f00:	e6 e2       	ldi	r30, 0x26	; 38
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	82 95       	swap	r24
     f08:	8f 70       	andi	r24, 0x0F	; 15
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	90 70       	andi	r25, 0x00	; 0
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	a9 f3       	breq	.-22     	; 0xf00 <ADC_StartConversion+0x38>
	
	/*clearing the flag*/
	SET_BIT(ADCSRA,ADIF);
     f16:	a6 e2       	ldi	r26, 0x26	; 38
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	8c 93       	st	X, r24
	return ADCH;
     f24:	e5 e2       	ldi	r30, 0x25	; 37
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
}
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <ADC_uint8_StartConversionSynch>:
uint8 ADC_uint8_StartConversionSynch(uint8 copy_uint8_channel, uint8* copy_puint8_reading)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	28 97       	sbiw	r28, 0x08	; 8
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	8e 83       	std	Y+6, r24	; 0x06
     f48:	78 87       	std	Y+8, r23	; 0x08
     f4a:	6f 83       	std	Y+7, r22	; 0x07
	uint8 localError=TRUE;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	8d 83       	std	Y+5, r24	; 0x05
	uint32 localTimeOutCounter=0;
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	1a 82       	std	Y+2, r1	; 0x02
     f54:	1b 82       	std	Y+3, r1	; 0x03
     f56:	1c 82       	std	Y+4, r1	; 0x04
	if (ADC_uint8_BusyState == ADC_NOTBUSY)
     f58:	80 91 0c 02 	lds	r24, 0x020C
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <ADC_uint8_StartConversionSynch+0x30>
     f60:	68 c0       	rjmp	.+208    	; 0x1032 <ADC_uint8_StartConversionSynch+0x100>
	{
		ADC_uint8_BusyState=ADC_BUSY;
     f62:	10 92 0c 02 	sts	0x020C, r1
		/*choosing the ADC channel*/
		ADMUX &= ADMUX_CLEAR;
     f66:	a7 e2       	ldi	r26, 0x27	; 39
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e7 e2       	ldi	r30, 0x27	; 39
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 7e       	andi	r24, 0xE0	; 224
     f72:	8c 93       	st	X, r24
		ADMUX |= copy_uint8_channel;
     f74:	a7 e2       	ldi	r26, 0x27	; 39
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e7 e2       	ldi	r30, 0x27	; 39
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	90 81       	ld	r25, Z
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	89 2b       	or	r24, r25
     f82:	8c 93       	st	X, r24
		/*start conversion*/
		SET_BIT(ADCSRA,ADSC);
     f84:	a6 e2       	ldi	r26, 0x26	; 38
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e6 e2       	ldi	r30, 0x26	; 38
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	8c 93       	st	X, r24
     f92:	0b c0       	rjmp	.+22     	; 0xfaa <ADC_uint8_StartConversionSynch+0x78>
		/*Polling (busy waiting) until the conversion complete flag is set or counter reach timeout value*/
		while(GET_BIT(ADCSRA,ADIF)==FALSE &&localTimeOutCounter!= ADC_uint32_TIMEOUT)
		{
			localTimeOutCounter++;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	ab 81       	ldd	r26, Y+3	; 0x03
     f9a:	bc 81       	ldd	r27, Y+4	; 0x04
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	a1 1d       	adc	r26, r1
     fa0:	b1 1d       	adc	r27, r1
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	ab 83       	std	Y+3, r26	; 0x03
     fa8:	bc 83       	std	Y+4, r27	; 0x04
		ADMUX &= ADMUX_CLEAR;
		ADMUX |= copy_uint8_channel;
		/*start conversion*/
		SET_BIT(ADCSRA,ADSC);
		/*Polling (busy waiting) until the conversion complete flag is set or counter reach timeout value*/
		while(GET_BIT(ADCSRA,ADIF)==FALSE &&localTimeOutCounter!= ADC_uint32_TIMEOUT)
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	82 95       	swap	r24
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	61 f4       	brne	.+24     	; 0xfd8 <ADC_uint8_StartConversionSynch+0xa6>
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	ab 81       	ldd	r26, Y+3	; 0x03
     fc6:	bc 81       	ldd	r27, Y+4	; 0x04
     fc8:	80 35       	cpi	r24, 0x50	; 80
     fca:	23 ec       	ldi	r18, 0xC3	; 195
     fcc:	92 07       	cpc	r25, r18
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	a2 07       	cpc	r26, r18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	b2 07       	cpc	r27, r18
     fd6:	f1 f6       	brne	.-68     	; 0xf94 <ADC_uint8_StartConversionSynch+0x62>
		{
			localTimeOutCounter++;
		}
		if(GET_BIT(ADCSRA,ADIF)==TRUE)
     fd8:	e6 e2       	ldi	r30, 0x26	; 38
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	82 95       	swap	r24
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	81 70       	andi	r24, 0x01	; 1
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	88 23       	and	r24, r24
     fec:	89 f0       	breq	.+34     	; 0x1010 <ADC_uint8_StartConversionSynch+0xde>
		{
			/*clearing the flag*/
			SET_BIT(ADCSRA,ADIF);
     fee:	a6 e2       	ldi	r26, 0x26	; 38
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e6 e2       	ldi	r30, 0x26	; 38
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 61       	ori	r24, 0x10	; 16
     ffa:	8c 93       	st	X, r24
			/*assigning digital value */
			*copy_puint8_reading = ADCH;
     ffc:	e5 e2       	ldi	r30, 0x25	; 37
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	ef 81       	ldd	r30, Y+7	; 0x07
    1004:	f8 85       	ldd	r31, Y+8	; 0x08
    1006:	80 83       	st	Z, r24
			ADC_uint8_BusyState = ADC_NOTBUSY;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 0c 02 	sts	0x020C, r24
    100e:	12 c0       	rjmp	.+36     	; 0x1034 <ADC_uint8_StartConversionSynch+0x102>
		}
		else if(localTimeOutCounter== ADC_uint32_TIMEOUT)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	ab 81       	ldd	r26, Y+3	; 0x03
    1016:	bc 81       	ldd	r27, Y+4	; 0x04
    1018:	80 35       	cpi	r24, 0x50	; 80
    101a:	23 ec       	ldi	r18, 0xC3	; 195
    101c:	92 07       	cpc	r25, r18
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	a2 07       	cpc	r26, r18
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	b2 07       	cpc	r27, r18
    1026:	31 f4       	brne	.+12     	; 0x1034 <ADC_uint8_StartConversionSynch+0x102>
		{
			localError=FALSE;
    1028:	1d 82       	std	Y+5, r1	; 0x05
			ADC_uint8_BusyState = ADC_NOTBUSY;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 0c 02 	sts	0x020C, r24
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <ADC_uint8_StartConversionSynch+0x102>


	}
	else
	{
		localError=FALSE;
    1032:	1d 82       	std	Y+5, r1	; 0x05
	}
	return localError;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1036:	28 96       	adiw	r28, 0x08	; 8
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <ADC_uint8_StartConversionAsynch>:
uint8 ADC_uint8_StartConversionAsynch(uint8 copy_uint8_channel, uint8* copy_puint8_reading, void (*copy_pv_NotificationFunction)(void))
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <ADC_uint8_StartConversionAsynch+0x6>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <ADC_uint8_StartConversionAsynch+0x8>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <ADC_uint8_StartConversionAsynch+0xa>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	8a 83       	std	Y+2, r24	; 0x02
    1058:	7c 83       	std	Y+4, r23	; 0x04
    105a:	6b 83       	std	Y+3, r22	; 0x03
    105c:	5e 83       	std	Y+6, r21	; 0x06
    105e:	4d 83       	std	Y+5, r20	; 0x05

	uint8 localError=TRUE;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
	if (ADC_uint8_BusyState == ADC_BUSY)
    1064:	80 91 0c 02 	lds	r24, 0x020C
    1068:	88 23       	and	r24, r24
    106a:	11 f4       	brne	.+4      	; 0x1070 <ADC_uint8_StartConversionAsynch+0x28>
	{
		localError = FALSE;
    106c:	19 82       	std	Y+1, r1	; 0x01
    106e:	38 c0       	rjmp	.+112    	; 0x10e0 <ADC_uint8_StartConversionAsynch+0x98>
	}
	else
	{
		if ((copy_puint8_reading == NULL) || (copy_pv_NotificationFunction == NULL))
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	21 f0       	breq	.+8      	; 0x1080 <ADC_uint8_StartConversionAsynch+0x38>
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	11 f4       	brne	.+4      	; 0x1084 <ADC_uint8_StartConversionAsynch+0x3c>
			{
				localError=FALSE;
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	2e c0       	rjmp	.+92     	; 0x10e0 <ADC_uint8_StartConversionAsynch+0x98>
			}
			else
			{
				ADC_uint8_BusyState=ADC_BUSY;
    1084:	10 92 0c 02 	sts	0x020C, r1
				/*make ISR source single channel Asynchronous*/
				ADC_uint8_ADCISRSource = SINGLE_CHANNEL_ASYNCH;
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	80 93 26 02 	sts	0x0226, r24
				/*initialize the reading variable*/
				ADC_puint8_Reading=copy_puint8_reading;
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	90 93 23 02 	sts	0x0223, r25
    1096:	80 93 22 02 	sts	0x0222, r24
				/*initialize the call back function*/
				ADC_pv_CallBackNotification=copy_pv_NotificationFunction;
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	90 93 25 02 	sts	0x0225, r25
    10a2:	80 93 24 02 	sts	0x0224, r24
				/*choosing the ADC channel*/
				ADMUX &= ADMUX_CLEAR;
    10a6:	a7 e2       	ldi	r26, 0x27	; 39
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e2       	ldi	r30, 0x27	; 39
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 7e       	andi	r24, 0xE0	; 224
    10b2:	8c 93       	st	X, r24
				ADMUX |= copy_uint8_channel;
    10b4:	a7 e2       	ldi	r26, 0x27	; 39
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e7 e2       	ldi	r30, 0x27	; 39
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	90 81       	ld	r25, Z
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	89 2b       	or	r24, r25
    10c2:	8c 93       	st	X, r24
				/*ADC interrupt Enable*/
				SET_BIT(ADCSRA,ADIE);
    10c4:	a6 e2       	ldi	r26, 0x26	; 38
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e6 e2       	ldi	r30, 0x26	; 38
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	8c 93       	st	X, r24
				/*start conversion*/
				SET_BIT(ADCSRA,ADSC);
    10d2:	a6 e2       	ldi	r26, 0x26	; 38
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e6 e2       	ldi	r30, 0x26	; 38
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 64       	ori	r24, 0x40	; 64
    10de:	8c 93       	st	X, r24
			}
	}
	return localError;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e2:	26 96       	adiw	r28, 0x06	; 6
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16(void)
{
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
 if(ADC_uint8_ADCISRSource==SINGLE_CHANNEL_ASYNCH)
    111e:	80 91 26 02 	lds	r24, 0x0226
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	b9 f4       	brne	.+46     	; 0x1154 <__vector_16+0x60>
 {
	 	/*Read the ADC result*/
		*ADC_puint8_Reading=ADCH;
    1126:	a0 91 22 02 	lds	r26, 0x0222
    112a:	b0 91 23 02 	lds	r27, 0x0223
    112e:	e5 e2       	ldi	r30, 0x25	; 37
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8c 93       	st	X, r24
		/*call the call back function in the main application*/
		ADC_pv_CallBackNotification();
    1136:	e0 91 24 02 	lds	r30, 0x0224
    113a:	f0 91 25 02 	lds	r31, 0x0225
    113e:	09 95       	icall
		/*disable ADC interrupt*/
		CLR_BIT(ADCSRA,ADIE);
    1140:	a6 e2       	ldi	r26, 0x26	; 38
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e6 e2       	ldi	r30, 0x26	; 38
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	8c 93       	st	X, r24
		/*set the ADC to NOTBUSY to start new conversion if requested*/
		ADC_uint8_BusyState = ADC_NOTBUSY;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 0c 02 	sts	0x020C, r24
 }
 else if(ADC_uint8_ADCISRSource==CHAIN_ASYNCH)
 {

 }
}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <setPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Register.h"

uint8 setPinDirection(uint8  Copy_Port ,  uint8 Copy_Pin ,  uint8 Copy_Direction)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	28 97       	sbiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	8a 83       	std	Y+2, r24	; 0x02
    1190:	6b 83       	std	Y+3, r22	; 0x03
    1192:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    1194:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	08 f0       	brcs	.+2      	; 0x119e <setPinDirection+0x24>
    119c:	f3 c0       	rjmp	.+486    	; 0x1384 <setPinDirection+0x20a>
	{
		if(Copy_Direction == OUTPUT)
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <setPinDirection+0x2c>
    11a4:	72 c0       	rjmp	.+228    	; 0x128a <setPinDirection+0x110>
		{
			switch(Copy_Port)
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	38 87       	std	Y+8, r19	; 0x08
    11ae:	2f 83       	std	Y+7, r18	; 0x07
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	49 f1       	breq	.+82     	; 0x120c <setPinDirection+0x92>
    11ba:	2f 81       	ldd	r18, Y+7	; 0x07
    11bc:	38 85       	ldd	r19, Y+8	; 0x08
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	2c f4       	brge	.+10     	; 0x11ce <setPinDirection+0x54>
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <setPinDirection+0x6a>
    11cc:	5b c0       	rjmp	.+182    	; 0x1284 <setPinDirection+0x10a>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	71 f1       	breq	.+92     	; 0x1234 <setPinDirection+0xba>
    11d8:	8f 81       	ldd	r24, Y+7	; 0x07
    11da:	98 85       	ldd	r25, Y+8	; 0x08
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	91 05       	cpc	r25, r1
    11e0:	e9 f1       	breq	.+122    	; 0x125c <setPinDirection+0xe2>
    11e2:	50 c0       	rjmp	.+160    	; 0x1284 <setPinDirection+0x10a>
			{
				case DIO_PORTA:
					SETBIT(DDRA,Copy_Pin);
    11e4:	aa e3       	ldi	r26, 0x3A	; 58
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ea e3       	ldi	r30, 0x3A	; 58
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <setPinDirection+0x88>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <setPinDirection+0x84>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	bc c0       	rjmp	.+376    	; 0x1384 <setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					SETBIT(DDRB,Copy_Pin);
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <setPinDirection+0xb0>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <setPinDirection+0xac>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	a8 c0       	rjmp	.+336    	; 0x1384 <setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					SETBIT(DDRC,Copy_Pin);
    1234:	a4 e3       	ldi	r26, 0x34	; 52
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e4 e3       	ldi	r30, 0x34	; 52
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <setPinDirection+0xd8>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <setPinDirection+0xd4>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	94 c0       	rjmp	.+296    	; 0x1384 <setPinDirection+0x20a>
						break;
				case DIO_PORTD:
					SETBIT(DDRD,Copy_Pin);
    125c:	a1 e3       	ldi	r26, 0x31	; 49
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e1 e3       	ldi	r30, 0x31	; 49
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <setPinDirection+0x100>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <setPinDirection+0xfc>
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	80 c0       	rjmp	.+256    	; 0x1384 <setPinDirection+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	7d c0       	rjmp	.+250    	; 0x1384 <setPinDirection+0x20a>
					break;
			}
		}
		else if (Copy_Direction == INPUT)
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	88 23       	and	r24, r24
    128e:	09 f0       	breq	.+2      	; 0x1292 <setPinDirection+0x118>
    1290:	77 c0       	rjmp	.+238    	; 0x1380 <setPinDirection+0x206>
		{
			switch(Copy_Port)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3e 83       	std	Y+6, r19	; 0x06
    129a:	2d 83       	std	Y+5, r18	; 0x05
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	59 f1       	breq	.+86     	; 0x12fc <setPinDirection+0x182>
    12a6:	2d 81       	ldd	r18, Y+5	; 0x05
    12a8:	3e 81       	ldd	r19, Y+6	; 0x06
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	2c f4       	brge	.+10     	; 0x12ba <setPinDirection+0x140>
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f0       	breq	.+26     	; 0x12d2 <setPinDirection+0x158>
    12b8:	60 c0       	rjmp	.+192    	; 0x137a <setPinDirection+0x200>
    12ba:	2d 81       	ldd	r18, Y+5	; 0x05
    12bc:	3e 81       	ldd	r19, Y+6	; 0x06
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	89 f1       	breq	.+98     	; 0x1326 <setPinDirection+0x1ac>
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <setPinDirection+0x156>
    12ce:	40 c0       	rjmp	.+128    	; 0x1350 <setPinDirection+0x1d6>
    12d0:	54 c0       	rjmp	.+168    	; 0x137a <setPinDirection+0x200>
			{
				case DIO_PORTA:
					CLEARBIT(DDRA,Copy_Pin);
    12d2:	aa e3       	ldi	r26, 0x3A	; 58
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ea e3       	ldi	r30, 0x3A	; 58
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <setPinDirection+0x176>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <setPinDirection+0x172>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	44 c0       	rjmp	.+136    	; 0x1384 <setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					CLEARBIT(DDRB,Copy_Pin);
    12fc:	a7 e3       	ldi	r26, 0x37	; 55
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e7 e3       	ldi	r30, 0x37	; 55
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <setPinDirection+0x1a0>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <setPinDirection+0x19c>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	2f c0       	rjmp	.+94     	; 0x1384 <setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					CLEARBIT(DDRC,Copy_Pin);
    1326:	a4 e3       	ldi	r26, 0x34	; 52
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e4 e3       	ldi	r30, 0x34	; 52
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <setPinDirection+0x1ca>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <setPinDirection+0x1c6>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	1a c0       	rjmp	.+52     	; 0x1384 <setPinDirection+0x20a>
						break;
				case DIO_PORTD:
					CLEARBIT(DDRD,Copy_Pin);
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <setPinDirection+0x1f4>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <setPinDirection+0x1f0>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <setPinDirection+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <setPinDirection+0x20a>
			}
		}

		else
		{
			local_ErrorStatus=1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return local_ErrorStatus;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	28 96       	adiw	r28, 0x08	; 8
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <setPinVAlue>:

uint8 setPinVAlue(uint8  Copy_Port ,  uint8 Copy_Pin ,  uint8 Copy_Status)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	28 97       	sbiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	6b 83       	std	Y+3, r22	; 0x03
    13b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    13b2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <setPinVAlue+0x24>
    13ba:	f3 c0       	rjmp	.+486    	; 0x15a2 <setPinVAlue+0x20a>
	{
		if(Copy_Status == OUTPUT_HIGH)
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <setPinVAlue+0x2c>
    13c2:	72 c0       	rjmp	.+228    	; 0x14a8 <setPinVAlue+0x110>
		{
			switch(Copy_Port)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	38 87       	std	Y+8, r19	; 0x08
    13cc:	2f 83       	std	Y+7, r18	; 0x07
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	98 85       	ldd	r25, Y+8	; 0x08
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	49 f1       	breq	.+82     	; 0x142a <setPinVAlue+0x92>
    13d8:	2f 81       	ldd	r18, Y+7	; 0x07
    13da:	38 85       	ldd	r19, Y+8	; 0x08
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <setPinVAlue+0x54>
    13e2:	8f 81       	ldd	r24, Y+7	; 0x07
    13e4:	98 85       	ldd	r25, Y+8	; 0x08
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <setPinVAlue+0x6a>
    13ea:	5b c0       	rjmp	.+182    	; 0x14a2 <setPinVAlue+0x10a>
    13ec:	2f 81       	ldd	r18, Y+7	; 0x07
    13ee:	38 85       	ldd	r19, Y+8	; 0x08
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	71 f1       	breq	.+92     	; 0x1452 <setPinVAlue+0xba>
    13f6:	8f 81       	ldd	r24, Y+7	; 0x07
    13f8:	98 85       	ldd	r25, Y+8	; 0x08
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	e9 f1       	breq	.+122    	; 0x147a <setPinVAlue+0xe2>
    1400:	50 c0       	rjmp	.+160    	; 0x14a2 <setPinVAlue+0x10a>
			{
				case DIO_PORTA:
					SETBIT(PORTA,Copy_Pin);
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <setPinVAlue+0x88>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <setPinVAlue+0x84>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	bc c0       	rjmp	.+376    	; 0x15a2 <setPinVAlue+0x20a>
					break;
				case DIO_PORTB:
					SETBIT(PORTB,Copy_Pin);
    142a:	a8 e3       	ldi	r26, 0x38	; 56
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <setPinVAlue+0xb0>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <setPinVAlue+0xac>
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	a8 c0       	rjmp	.+336    	; 0x15a2 <setPinVAlue+0x20a>
					break;
				case DIO_PORTC:
					SETBIT(PORTC,Copy_Pin);
    1452:	a5 e3       	ldi	r26, 0x35	; 53
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e3       	ldi	r30, 0x35	; 53
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <setPinVAlue+0xd8>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <setPinVAlue+0xd4>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	94 c0       	rjmp	.+296    	; 0x15a2 <setPinVAlue+0x20a>
						break;
				case DIO_PORTD:
					SETBIT(PORTD,Copy_Pin);
    147a:	a2 e3       	ldi	r26, 0x32	; 50
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e2 e3       	ldi	r30, 0x32	; 50
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <setPinVAlue+0x100>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <setPinVAlue+0xfc>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	80 c0       	rjmp	.+256    	; 0x15a2 <setPinVAlue+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	7d c0       	rjmp	.+250    	; 0x15a2 <setPinVAlue+0x20a>
					break;
			}
		}
		else if (Copy_Status == OUTPUT_LOW)
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	88 23       	and	r24, r24
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <setPinVAlue+0x118>
    14ae:	77 c0       	rjmp	.+238    	; 0x159e <setPinVAlue+0x206>
		{
			switch(Copy_Port)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3e 83       	std	Y+6, r19	; 0x06
    14b8:	2d 83       	std	Y+5, r18	; 0x05
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	59 f1       	breq	.+86     	; 0x151a <setPinVAlue+0x182>
    14c4:	2d 81       	ldd	r18, Y+5	; 0x05
    14c6:	3e 81       	ldd	r19, Y+6	; 0x06
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <setPinVAlue+0x140>
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f0       	breq	.+26     	; 0x14f0 <setPinVAlue+0x158>
    14d6:	60 c0       	rjmp	.+192    	; 0x1598 <setPinVAlue+0x200>
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	89 f1       	breq	.+98     	; 0x1544 <setPinVAlue+0x1ac>
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <setPinVAlue+0x156>
    14ec:	40 c0       	rjmp	.+128    	; 0x156e <setPinVAlue+0x1d6>
    14ee:	54 c0       	rjmp	.+168    	; 0x1598 <setPinVAlue+0x200>
			{
				case DIO_PORTA:
					CLEARBIT(PORTA,Copy_Pin);
    14f0:	ab e3       	ldi	r26, 0x3B	; 59
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <setPinVAlue+0x176>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <setPinVAlue+0x172>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	44 c0       	rjmp	.+136    	; 0x15a2 <setPinVAlue+0x20a>
					break;
				case DIO_PORTB:
					CLEARBIT(PORTB,Copy_Pin);
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <setPinVAlue+0x1a0>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <setPinVAlue+0x19c>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	2f c0       	rjmp	.+94     	; 0x15a2 <setPinVAlue+0x20a>
					break;
				case DIO_PORTC:
					CLEARBIT(PORTC,Copy_Pin);
    1544:	a5 e3       	ldi	r26, 0x35	; 53
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e3       	ldi	r30, 0x35	; 53
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <setPinVAlue+0x1ca>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <setPinVAlue+0x1c6>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	1a c0       	rjmp	.+52     	; 0x15a2 <setPinVAlue+0x20a>
						break;
				case DIO_PORTD:
					CLEARBIT(PORTD,Copy_Pin);
    156e:	a2 e3       	ldi	r26, 0x32	; 50
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e2 e3       	ldi	r30, 0x32	; 50
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <setPinVAlue+0x1f4>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <setPinVAlue+0x1f0>
    1590:	80 95       	com	r24
    1592:	84 23       	and	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <setPinVAlue+0x20a>
					break;
				default:
					local_ErrorStatus=1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <setPinVAlue+0x20a>
			}
		}

		else
		{
			local_ErrorStatus=1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return local_ErrorStatus;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	28 96       	adiw	r28, 0x08	; 8
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <DIO_SetPortDirection>:

uint8 DIO_SetPortDirection (uint8 Copy_Port, uint8 Copy_Direction )
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <DIO_SetPortDirection+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_SetPortDirection+0x8>
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    15c8:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_Port)
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3d 83       	std	Y+5, r19	; 0x05
    15d2:	2c 83       	std	Y+4, r18	; 0x04
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	d1 f0       	breq	.+52     	; 0x1612 <DIO_SetPortDirection+0x5c>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <DIO_SetPortDirection+0x3c>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	61 f0       	breq	.+24     	; 0x1608 <DIO_SetPortDirection+0x52>
    15f0:	1f c0       	rjmp	.+62     	; 0x1630 <DIO_SetPortDirection+0x7a>
    15f2:	2c 81       	ldd	r18, Y+4	; 0x04
    15f4:	3d 81       	ldd	r19, Y+5	; 0x05
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	81 f0       	breq	.+32     	; 0x161c <DIO_SetPortDirection+0x66>
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	91 05       	cpc	r25, r1
    1604:	81 f0       	breq	.+32     	; 0x1626 <DIO_SetPortDirection+0x70>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <DIO_SetPortDirection+0x7a>
					{
						case DIO_PORTA:
							DDRA= Copy_Direction;
    1608:	ea e3       	ldi	r30, 0x3A	; 58
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <DIO_SetPortDirection+0x7e>
							break;
						case DIO_PORTB:
							DDRB=Copy_Direction;
    1612:	e7 e3       	ldi	r30, 0x37	; 55
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	80 83       	st	Z, r24
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <DIO_SetPortDirection+0x7e>
							break;
						case DIO_PORTC:
							DDRC=Copy_Direction;
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 83       	st	Z, r24
    1624:	07 c0       	rjmp	.+14     	; 0x1634 <DIO_SetPortDirection+0x7e>
								break;
						case DIO_PORTD:
							DDRD=Copy_Direction;
    1626:	e1 e3       	ldi	r30, 0x31	; 49
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	80 83       	st	Z, r24
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_SetPortDirection+0x7e>
							break;
						default:
							local_ErrorStatus=1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
							break;
					}

		return local_ErrorStatus;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <DIO_SetPortValue>:


uint8 DIO_SetPortValue  (uint8 Copy_Port ,   uint8 Copy_Value )

{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <DIO_SetPortValue+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <DIO_SetPortValue+0x8>
    164e:	0f 92       	push	r0
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    1658:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_Port)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3d 83       	std	Y+5, r19	; 0x05
    1662:	2c 83       	std	Y+4, r18	; 0x04
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	9d 81       	ldd	r25, Y+5	; 0x05
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	d1 f0       	breq	.+52     	; 0x16a2 <DIO_SetPortValue+0x5c>
    166e:	2c 81       	ldd	r18, Y+4	; 0x04
    1670:	3d 81       	ldd	r19, Y+5	; 0x05
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	2c f4       	brge	.+10     	; 0x1682 <DIO_SetPortValue+0x3c>
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	61 f0       	breq	.+24     	; 0x1698 <DIO_SetPortValue+0x52>
    1680:	1f c0       	rjmp	.+62     	; 0x16c0 <DIO_SetPortValue+0x7a>
    1682:	2c 81       	ldd	r18, Y+4	; 0x04
    1684:	3d 81       	ldd	r19, Y+5	; 0x05
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <DIO_SetPortValue+0x66>
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	9d 81       	ldd	r25, Y+5	; 0x05
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	91 05       	cpc	r25, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <DIO_SetPortValue+0x70>
    1696:	14 c0       	rjmp	.+40     	; 0x16c0 <DIO_SetPortValue+0x7a>
					{
						case DIO_PORTA:
							PORTA=Copy_Value;
    1698:	eb e3       	ldi	r30, 0x3B	; 59
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	80 83       	st	Z, r24
    16a0:	11 c0       	rjmp	.+34     	; 0x16c4 <DIO_SetPortValue+0x7e>
							break;
						case DIO_PORTB:
							PORTB=Copy_Value;
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	80 83       	st	Z, r24
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <DIO_SetPortValue+0x7e>
							break;
						case DIO_PORTC:
							PORTC=Copy_Value;
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	80 83       	st	Z, r24
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <DIO_SetPortValue+0x7e>
								break;
						case DIO_PORTD:
							PORTD=Copy_Value;
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	80 83       	st	Z, r24
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_SetPortValue+0x7e>
							break;
						default:
							local_ErrorStatus=1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	89 83       	std	Y+1, r24	; 0x01
							break;
					}


	return local_ErrorStatus;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <DIO_GetPinValue>:

uint8 DIO_GetPinValue (uint8 Copy_uint8_Port , uint8 Copy_uint8_Pin , uint8* Copy_uint8_Value)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	27 97       	sbiw	r28, 0x07	; 7
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	6b 83       	std	Y+3, r22	; 0x03
    16ee:	5d 83       	std	Y+5, r21	; 0x05
    16f0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_ErrorStatus=0;
    16f2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_uint8_Value!=NULL &&Copy_uint8_Pin <=7 )
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	09 f4       	brne	.+2      	; 0x16fe <DIO_GetPinValue+0x28>
    16fc:	78 c0       	rjmp	.+240    	; 0x17ee <DIO_GetPinValue+0x118>
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	88 30       	cpi	r24, 0x08	; 8
    1702:	08 f0       	brcs	.+2      	; 0x1706 <DIO_GetPinValue+0x30>
    1704:	74 c0       	rjmp	.+232    	; 0x17ee <DIO_GetPinValue+0x118>
	{

		switch(Copy_uint8_Port)
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3f 83       	std	Y+7, r19	; 0x07
    170e:	2e 83       	std	Y+6, r18	; 0x06
    1710:	4e 81       	ldd	r20, Y+6	; 0x06
    1712:	5f 81       	ldd	r21, Y+7	; 0x07
    1714:	41 30       	cpi	r20, 0x01	; 1
    1716:	51 05       	cpc	r21, r1
    1718:	59 f1       	breq	.+86     	; 0x1770 <DIO_GetPinValue+0x9a>
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	91 05       	cpc	r25, r1
    1722:	34 f4       	brge	.+12     	; 0x1730 <DIO_GetPinValue+0x5a>
    1724:	2e 81       	ldd	r18, Y+6	; 0x06
    1726:	3f 81       	ldd	r19, Y+7	; 0x07
    1728:	21 15       	cp	r18, r1
    172a:	31 05       	cpc	r19, r1
    172c:	69 f0       	breq	.+26     	; 0x1748 <DIO_GetPinValue+0x72>
    172e:	5c c0       	rjmp	.+184    	; 0x17e8 <DIO_GetPinValue+0x112>
    1730:	4e 81       	ldd	r20, Y+6	; 0x06
    1732:	5f 81       	ldd	r21, Y+7	; 0x07
    1734:	42 30       	cpi	r20, 0x02	; 2
    1736:	51 05       	cpc	r21, r1
    1738:	79 f1       	breq	.+94     	; 0x1798 <DIO_GetPinValue+0xc2>
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <DIO_GetPinValue+0x70>
    1744:	3d c0       	rjmp	.+122    	; 0x17c0 <DIO_GetPinValue+0xea>
    1746:	50 c0       	rjmp	.+160    	; 0x17e8 <DIO_GetPinValue+0x112>
		{
			case DIO_PORTA:
				*Copy_uint8_Value = GETBIT(PINA , Copy_uint8_Pin);
    1748:	e9 e3       	ldi	r30, 0x39	; 57
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a9 01       	movw	r20, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_GetPinValue+0x8a>
    175c:	55 95       	asr	r21
    175e:	47 95       	ror	r20
    1760:	8a 95       	dec	r24
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_GetPinValue+0x86>
    1764:	ca 01       	movw	r24, r20
    1766:	81 70       	andi	r24, 0x01	; 1
    1768:	ec 81       	ldd	r30, Y+4	; 0x04
    176a:	fd 81       	ldd	r31, Y+5	; 0x05
    176c:	80 83       	st	Z, r24
    176e:	41 c0       	rjmp	.+130    	; 0x17f2 <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTB:
				*Copy_uint8_Value = GETBIT(PINB , Copy_uint8_Pin);
    1770:	e6 e3       	ldi	r30, 0x36	; 54
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_GetPinValue+0xb2>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_GetPinValue+0xae>
    178c:	ca 01       	movw	r24, r20
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	ec 81       	ldd	r30, Y+4	; 0x04
    1792:	fd 81       	ldd	r31, Y+5	; 0x05
    1794:	80 83       	st	Z, r24
    1796:	2d c0       	rjmp	.+90     	; 0x17f2 <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTC:
				*Copy_uint8_Value = GETBIT(PINC , Copy_uint8_Pin);
    1798:	e3 e3       	ldi	r30, 0x33	; 51
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_GetPinValue+0xda>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_GetPinValue+0xd6>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ba:	fd 81       	ldd	r31, Y+5	; 0x05
    17bc:	80 83       	st	Z, r24
    17be:	19 c0       	rjmp	.+50     	; 0x17f2 <DIO_GetPinValue+0x11c>
				break;
			case DIO_PORTD:
				*Copy_uint8_Value = GETBIT(PIND , Copy_uint8_Pin);
    17c0:	e0 e3       	ldi	r30, 0x30	; 48
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_GetPinValue+0x102>
    17d4:	55 95       	asr	r21
    17d6:	47 95       	ror	r20
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_GetPinValue+0xfe>
    17dc:	ca 01       	movw	r24, r20
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	ec 81       	ldd	r30, Y+4	; 0x04
    17e2:	fd 81       	ldd	r31, Y+5	; 0x05
    17e4:	80 83       	st	Z, r24
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <DIO_GetPinValue+0x11c>
				break;
			default:
				local_ErrorStatus=1;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_GetPinValue+0x11c>
				break;
		}
	}
	else
	{
		local_ErrorStatus=1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_ErrorStatus;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f4:	27 96       	adiw	r28, 0x07	; 7
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <DIO_setInternalPullUp>:

uint8 DIO_setInternalPullUp(uint8  Copy_Port ,  uint8 Copy_Pin)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <DIO_setInternalPullUp+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <DIO_setInternalPullUp+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_ErrorStatus=0;
    1818:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pin <= 7)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	08 f0       	brcs	.+2      	; 0x1822 <DIO_setInternalPullUp+0x1c>
    1820:	c0 c0       	rjmp	.+384    	; 0x19a2 <DIO_setInternalPullUp+0x19c>
	{
			switch(Copy_Port)
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3d 83       	std	Y+5, r19	; 0x05
    182a:	2c 83       	std	Y+4, r18	; 0x04
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <DIO_setInternalPullUp+0x32>
    1836:	3e c0       	rjmp	.+124    	; 0x18b4 <DIO_setInternalPullUp+0xae>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <DIO_setInternalPullUp+0x46>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	71 f0       	breq	.+28     	; 0x1866 <DIO_setInternalPullUp+0x60>
    184a:	a9 c0       	rjmp	.+338    	; 0x199e <DIO_setInternalPullUp+0x198>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <DIO_setInternalPullUp+0x52>
    1856:	55 c0       	rjmp	.+170    	; 0x1902 <DIO_setInternalPullUp+0xfc>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <DIO_setInternalPullUp+0x5e>
    1862:	76 c0       	rjmp	.+236    	; 0x1950 <DIO_setInternalPullUp+0x14a>
    1864:	9c c0       	rjmp	.+312    	; 0x199e <DIO_setInternalPullUp+0x198>
			{
				case DIO_PORTA:
					CLEARBIT(DDRA, Copy_Pin);
    1866:	aa e3       	ldi	r26, 0x3A	; 58
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ea e3       	ldi	r30, 0x3A	; 58
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <DIO_setInternalPullUp+0x7c>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	2a 95       	dec	r18
    1884:	e2 f7       	brpl	.-8      	; 0x187e <DIO_setInternalPullUp+0x78>
    1886:	80 95       	com	r24
    1888:	84 23       	and	r24, r20
    188a:	8c 93       	st	X, r24
					SETBIT(PORTA, Copy_Pin);
    188c:	ab e3       	ldi	r26, 0x3B	; 59
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	eb e3       	ldi	r30, 0x3B	; 59
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_setInternalPullUp+0xa4>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_setInternalPullUp+0xa0>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	77 c0       	rjmp	.+238    	; 0x19a2 <DIO_setInternalPullUp+0x19c>
					break;
				case DIO_PORTB:
					CLEARBIT(DDRB,Copy_Pin);
    18b4:	a7 e3       	ldi	r26, 0x37	; 55
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e7 e3       	ldi	r30, 0x37	; 55
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_setInternalPullUp+0xca>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	2a 95       	dec	r18
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_setInternalPullUp+0xc6>
    18d4:	80 95       	com	r24
    18d6:	84 23       	and	r24, r20
    18d8:	8c 93       	st	X, r24
					SETBIT(PORTB, Copy_Pin);
    18da:	a8 e3       	ldi	r26, 0x38	; 56
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_setInternalPullUp+0xf2>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_setInternalPullUp+0xee>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	50 c0       	rjmp	.+160    	; 0x19a2 <DIO_setInternalPullUp+0x19c>
					break;
				case DIO_PORTC:
					CLEARBIT(DDRC,Copy_Pin);
    1902:	a4 e3       	ldi	r26, 0x34	; 52
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e4 e3       	ldi	r30, 0x34	; 52
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_setInternalPullUp+0x118>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	2a 95       	dec	r18
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_setInternalPullUp+0x114>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
					SETBIT(PORTC, Copy_Pin);
    1928:	a5 e3       	ldi	r26, 0x35	; 53
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e5 e3       	ldi	r30, 0x35	; 53
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_setInternalPullUp+0x140>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_setInternalPullUp+0x13c>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	29 c0       	rjmp	.+82     	; 0x19a2 <DIO_setInternalPullUp+0x19c>
						break;
				case DIO_PORTD:
					CLEARBIT(DDRD,Copy_Pin);
    1950:	a1 e3       	ldi	r26, 0x31	; 49
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e1 e3       	ldi	r30, 0x31	; 49
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_setInternalPullUp+0x166>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	2a 95       	dec	r18
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_setInternalPullUp+0x162>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
					SETBIT(PORTD, Copy_Pin);
    1976:	a2 e3       	ldi	r26, 0x32	; 50
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e2 e3       	ldi	r30, 0x32	; 50
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_setInternalPullUp+0x18e>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_setInternalPullUp+0x18a>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_setInternalPullUp+0x19c>
					break;
				default:
					local_ErrorStatus=1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
	}

	return local_ErrorStatus;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <get_button_pressed>:
#include "LCD_Interface.h"
#include "Keypad_config.h"
#include "Keypad_Interface.h"

uint8 get_button_pressed(void)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	6a 97       	sbiw	r28, 0x1a	; 26
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
	uint8 row=0,column=0;
    19c8:	1b 82       	std	Y+3, r1	; 0x03
    19ca:	1a 82       	std	Y+2, r1	; 0x02
	uint8 buttonStatus=0xff;
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	8c 83       	std	Y+4, r24	; 0x04
	uint8 buttonPressed = 0xff;
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	89 83       	std	Y+1, r24	; 0x01
	uint8 buttonArray[ROW_NUM][COL_NUM]={{'7','8','9','/'},
										 {'4','5','6','*'},
										 {'1','2','3','-'},
										 {'C','0','=','+'}};
    19d4:	ce 01       	movw	r24, r28
    19d6:	05 96       	adiw	r24, 0x05	; 5
    19d8:	9f 8b       	std	Y+23, r25	; 0x17
    19da:	8e 8b       	std	Y+22, r24	; 0x16
    19dc:	e1 e1       	ldi	r30, 0x11	; 17
    19de:	f2 e0       	ldi	r31, 0x02	; 2
    19e0:	f9 8f       	std	Y+25, r31	; 0x19
    19e2:	e8 8f       	std	Y+24, r30	; 0x18
    19e4:	f0 e1       	ldi	r31, 0x10	; 16
    19e6:	fa 8f       	std	Y+26, r31	; 0x1a
    19e8:	e8 8d       	ldd	r30, Y+24	; 0x18
    19ea:	f9 8d       	ldd	r31, Y+25	; 0x19
    19ec:	00 80       	ld	r0, Z
    19ee:	88 8d       	ldd	r24, Y+24	; 0x18
    19f0:	99 8d       	ldd	r25, Y+25	; 0x19
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	99 8f       	std	Y+25, r25	; 0x19
    19f6:	88 8f       	std	Y+24, r24	; 0x18
    19f8:	ee 89       	ldd	r30, Y+22	; 0x16
    19fa:	ff 89       	ldd	r31, Y+23	; 0x17
    19fc:	00 82       	st	Z, r0
    19fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1a00:	9f 89       	ldd	r25, Y+23	; 0x17
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	9f 8b       	std	Y+23, r25	; 0x17
    1a06:	8e 8b       	std	Y+22, r24	; 0x16
    1a08:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a0a:	91 50       	subi	r25, 0x01	; 1
    1a0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a10:	ee 23       	and	r30, r30
    1a12:	51 f7       	brne	.-44     	; 0x19e8 <get_button_pressed+0x34>

	for(column=4;column<8;column++)
    1a14:	84 e0       	ldi	r24, 0x04	; 4
    1a16:	8a 83       	std	Y+2, r24	; 0x02
    1a18:	4b c0       	rjmp	.+150    	; 0x1ab0 <get_button_pressed+0xfc>
	{
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_LOW);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
		for(row=0;row<4;row++)
    1a24:	1b 82       	std	Y+3, r1	; 0x03
    1a26:	39 c0       	rjmp	.+114    	; 0x1a9a <get_button_pressed+0xe6>
		{
			DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
    1a28:	9e 01       	movw	r18, r28
    1a2a:	2c 5f       	subi	r18, 0xFC	; 252
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	6b 81       	ldd	r22, Y+3	; 0x03
    1a32:	a9 01       	movw	r20, r18
    1a34:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_GetPinValue>
			if(buttonStatus==LOW)
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	88 23       	and	r24, r24
    1a3c:	59 f5       	brne	.+86     	; 0x1a94 <get_button_pressed+0xe0>
    1a3e:	08 c0       	rjmp	.+16     	; 0x1a50 <get_button_pressed+0x9c>
			{
				while(buttonStatus==LOW)
				{
					DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
    1a40:	9e 01       	movw	r18, r28
    1a42:	2c 5f       	subi	r18, 0xFC	; 252
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	6b 81       	ldd	r22, Y+3	; 0x03
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_GetPinValue>
		for(row=0;row<4;row++)
		{
			DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
			if(buttonStatus==LOW)
			{
				while(buttonStatus==LOW)
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	88 23       	and	r24, r24
    1a54:	a9 f3       	breq	.-22     	; 0x1a40 <get_button_pressed+0x8c>
				{
					DIO_GetPinValue(KEYPAD_PORT,row,&buttonStatus);
				}
				setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	6a 81       	ldd	r22, Y+2	; 0x02
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
				buttonPressed= buttonArray[row][column-4];
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	44 50       	subi	r20, 0x04	; 4
    1a70:	50 40       	sbci	r21, 0x00	; 0
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	22 0f       	add	r18, r18
    1a78:	33 1f       	adc	r19, r19
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	82 0f       	add	r24, r18
    1a80:	93 1f       	adc	r25, r19
    1a82:	84 0f       	add	r24, r20
    1a84:	95 1f       	adc	r25, r21
    1a86:	fc 01       	movw	r30, r24
    1a88:	34 96       	adiw	r30, 0x04	; 4
    1a8a:	80 81       	ld	r24, Z
    1a8c:	89 83       	std	Y+1, r24	; 0x01
				return buttonPressed;
    1a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a90:	fd 8b       	std	Y+21, r31	; 0x15
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <get_button_pressed+0x108>
										 {'C','0','=','+'}};

	for(column=4;column<8;column++)
	{
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_LOW);
		for(row=0;row<4;row++)
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	8b 83       	std	Y+3, r24	; 0x03
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	84 30       	cpi	r24, 0x04	; 4
    1a9e:	20 f2       	brcs	.-120    	; 0x1a28 <get_button_pressed+0x74>
				setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
				buttonPressed= buttonArray[row][column-4];
				return buttonPressed;
			}
		}
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	6a 81       	ldd	r22, Y+2	; 0x02
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
	uint8 buttonArray[ROW_NUM][COL_NUM]={{'7','8','9','/'},
										 {'4','5','6','*'},
										 {'1','2','3','-'},
										 {'C','0','=','+'}};

	for(column=4;column<8;column++)
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	8f 5f       	subi	r24, 0xFF	; 255
    1aae:	8a 83       	std	Y+2, r24	; 0x02
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	88 30       	cpi	r24, 0x08	; 8
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <get_button_pressed+0x104>
    1ab6:	b1 cf       	rjmp	.-158    	; 0x1a1a <get_button_pressed+0x66>
			}
		}
		setPinVAlue(KEYPAD_PORT,column,OUTPUT_HIGH);
	}

	return buttonPressed;
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	8d 8b       	std	Y+21, r24	; 0x15
    1abc:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1abe:	6a 96       	adiw	r28, 0x1a	; 26
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <LCD_init>:
#define MODE MODE_8BITS // <-- Enter choice : ( MODE_4BITS or MODE_8BITS)

#if(MODE==MODE_8BITS)

void LCD_init(void)
{
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	c6 54       	subi	r28, 0x46	; 70
    1ade:	d0 40       	sbci	r29, 0x00	; 0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	fe 01       	movw	r30, r28
    1aec:	ed 5b       	subi	r30, 0xBD	; 189
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 ea       	ldi	r26, 0xA0	; 160
    1af6:	b1 e4       	ldi	r27, 0x41	; 65
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	8e 01       	movw	r16, r28
    1b02:	01 5c       	subi	r16, 0xC1	; 193
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	fe 01       	movw	r30, r28
    1b08:	ed 5b       	subi	r30, 0xBD	; 189
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	55 e4       	ldi	r21, 0x45	; 69
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 83       	st	Z, r24
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	a2 83       	std	Z+2, r26	; 0x02
    1b2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ff 96       	adiw	r30, 0x3f	; 63
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <LCD_init+0x84>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9e af       	std	Y+62, r25	; 0x3e
    1b50:	8d af       	std	Y+61, r24	; 0x3d
    1b52:	46 c0       	rjmp	.+140    	; 0x1be0 <LCD_init+0x110>
	else if (__tmp > 65535)
    1b54:	fe 01       	movw	r30, r28
    1b56:	ff 96       	adiw	r30, 0x3f	; 63
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	64 f5       	brge	.+88     	; 0x1bc8 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	fe 01       	movw	r30, r28
    1b72:	ed 5b       	subi	r30, 0xBD	; 189
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e af       	std	Y+62, r25	; 0x3e
    1b9c:	8d af       	std	Y+61, r24	; 0x3d
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_init+0xee>
    1ba0:	80 e9       	ldi	r24, 0x90	; 144
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	9c af       	std	Y+60, r25	; 0x3c
    1ba6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1baa:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_init+0xdc>
    1bb0:	9c af       	std	Y+60, r25	; 0x3c
    1bb2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9e af       	std	Y+62, r25	; 0x3e
    1bbc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_init+0xd0>
    1bc6:	16 c0       	rjmp	.+44     	; 0x1bf4 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ff 96       	adiw	r30, 0x3f	; 63
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e af       	std	Y+62, r25	; 0x3e
    1bde:	8d af       	std	Y+61, r24	; 0x3d
    1be0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be4:	9a af       	std	Y+58, r25	; 0x3a
    1be6:	89 af       	std	Y+57, r24	; 0x39
    1be8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bea:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_init+0x11c>
    1bf0:	9a af       	std	Y+58, r25	; 0x3a
    1bf2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_cmd(0x38); //Function set
    1bf4:	88 e3       	ldi	r24, 0x38	; 56
    1bf6:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a0 e8       	ldi	r26, 0x80	; 128
    1c00:	bf e3       	ldi	r27, 0x3F	; 63
    1c02:	8d ab       	std	Y+53, r24	; 0x35
    1c04:	9e ab       	std	Y+54, r25	; 0x36
    1c06:	af ab       	std	Y+55, r26	; 0x37
    1c08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c10:	98 ad       	ldd	r25, Y+56	; 0x38
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a e7       	ldi	r20, 0x7A	; 122
    1c18:	55 e4       	ldi	r21, 0x45	; 69
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	89 ab       	std	Y+49, r24	; 0x31
    1c24:	9a ab       	std	Y+50, r25	; 0x32
    1c26:	ab ab       	std	Y+51, r26	; 0x33
    1c28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c30:	9c a9       	ldd	r25, Y+52	; 0x34
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <LCD_init+0x17c>
		__ticks = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	98 ab       	std	Y+48, r25	; 0x30
    1c48:	8f a7       	std	Y+47, r24	; 0x2f
    1c4a:	3f c0       	rjmp	.+126    	; 0x1cca <LCD_init+0x1fa>
	else if (__tmp > 65535)
    1c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c50:	8b a9       	ldd	r24, Y+51	; 0x33
    1c52:	9c a9       	ldd	r25, Y+52	; 0x34
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	4c f5       	brge	.+82     	; 0x1cb6 <LCD_init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c64:	6d a9       	ldd	r22, Y+53	; 0x35
    1c66:	7e a9       	ldd	r23, Y+54	; 0x36
    1c68:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	98 ab       	std	Y+48, r25	; 0x30
    1c8a:	8f a7       	std	Y+47, r24	; 0x2f
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <LCD_init+0x1dc>
    1c8e:	80 e9       	ldi	r24, 0x90	; 144
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	9e a7       	std	Y+46, r25	; 0x2e
    1c94:	8d a7       	std	Y+45, r24	; 0x2d
    1c96:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c98:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_init+0x1ca>
    1c9e:	9e a7       	std	Y+46, r25	; 0x2e
    1ca0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	98 ab       	std	Y+48, r25	; 0x30
    1caa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cae:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f7       	brne	.-38     	; 0x1c8e <LCD_init+0x1be>
    1cb4:	14 c0       	rjmp	.+40     	; 0x1cde <LCD_init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cba:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	98 ab       	std	Y+48, r25	; 0x30
    1cc8:	8f a7       	std	Y+47, r24	; 0x2f
    1cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cce:	9c a7       	std	Y+44, r25	; 0x2c
    1cd0:	8b a7       	std	Y+43, r24	; 0x2b
    1cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <LCD_init+0x206>
    1cda:	9c a7       	std	Y+44, r25	; 0x2c
    1cdc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_cmd(0x0c);//Display on/off control
    1cde:	8c e0       	ldi	r24, 0x0C	; 12
    1ce0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e8       	ldi	r26, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	8f a3       	std	Y+39, r24	; 0x27
    1cee:	98 a7       	std	Y+40, r25	; 0x28
    1cf0:	a9 a7       	std	Y+41, r26	; 0x29
    1cf2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a e7       	ldi	r20, 0x7A	; 122
    1d02:	55 e4       	ldi	r21, 0x45	; 69
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8b a3       	std	Y+35, r24	; 0x23
    1d0e:	9c a3       	std	Y+36, r25	; 0x24
    1d10:	ad a3       	std	Y+37, r26	; 0x25
    1d12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d14:	6b a1       	ldd	r22, Y+35	; 0x23
    1d16:	7c a1       	ldd	r23, Y+36	; 0x24
    1d18:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_init+0x266>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9a a3       	std	Y+34, r25	; 0x22
    1d32:	89 a3       	std	Y+33, r24	; 0x21
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_init+0x2e4>
	else if (__tmp > 65535)
    1d36:	6b a1       	ldd	r22, Y+35	; 0x23
    1d38:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d50:	78 a5       	ldd	r23, Y+40	; 0x28
    1d52:	89 a5       	ldd	r24, Y+41	; 0x29
    1d54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9a a3       	std	Y+34, r25	; 0x22
    1d74:	89 a3       	std	Y+33, r24	; 0x21
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_init+0x2c6>
    1d78:	80 e9       	ldi	r24, 0x90	; 144
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	98 a3       	std	Y+32, r25	; 0x20
    1d7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d82:	98 a1       	ldd	r25, Y+32	; 0x20
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_init+0x2b4>
    1d88:	98 a3       	std	Y+32, r25	; 0x20
    1d8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9a a3       	std	Y+34, r25	; 0x22
    1d94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	89 a1       	ldd	r24, Y+33	; 0x21
    1d98:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_init+0x2a8>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6b a1       	ldd	r22, Y+35	; 0x23
    1da2:	7c a1       	ldd	r23, Y+36	; 0x24
    1da4:	8d a1       	ldd	r24, Y+37	; 0x25
    1da6:	9e a1       	ldd	r25, Y+38	; 0x26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
    1db4:	89 a1       	ldd	r24, Y+33	; 0x21
    1db6:	9a a1       	ldd	r25, Y+34	; 0x22
    1db8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dba:	8d 8f       	std	Y+29, r24	; 0x1d
    1dbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_init+0x2f0>
    1dc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_cmd(0x01);// Display clear
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>
    1dce:	8a e0       	ldi	r24, 0x0A	; 10
    1dd0:	97 ed       	ldi	r25, 0xD7	; 215
    1dd2:	a3 ec       	ldi	r26, 0xC3	; 195
    1dd4:	bf e3       	ldi	r27, 0x3F	; 63
    1dd6:	89 8f       	std	Y+25, r24	; 0x19
    1dd8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dda:	ab 8f       	std	Y+27, r26	; 0x1b
    1ddc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	69 8d       	ldd	r22, Y+25	; 0x19
    1de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a e7       	ldi	r20, 0x7A	; 122
    1dec:	55 e4       	ldi	r21, 0x45	; 69
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8d 8b       	std	Y+21, r24	; 0x15
    1df8:	9e 8b       	std	Y+22, r25	; 0x16
    1dfa:	af 8b       	std	Y+23, r26	; 0x17
    1dfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <LCD_init+0x350>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <LCD_init+0x3ce>
	else if (__tmp > 65535)
    1e20:	6d 89       	ldd	r22, Y+21	; 0x15
    1e22:	7e 89       	ldd	r23, Y+22	; 0x16
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <LCD_init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9c 8b       	std	Y+20, r25	; 0x14
    1e5e:	8b 8b       	std	Y+19, r24	; 0x13
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_init+0x3b0>
    1e62:	80 e9       	ldi	r24, 0x90	; 144
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	9a 8b       	std	Y+18, r25	; 0x12
    1e68:	89 8b       	std	Y+17, r24	; 0x11
    1e6a:	89 89       	ldd	r24, Y+17	; 0x11
    1e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_init+0x39e>
    1e72:	9a 8b       	std	Y+18, r25	; 0x12
    1e74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9c 8b       	std	Y+20, r25	; 0x14
    1e7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	8b 89       	ldd	r24, Y+19	; 0x13
    1e82:	9c 89       	ldd	r25, Y+20	; 0x14
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <LCD_init+0x392>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <LCD_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e90:	98 8d       	ldd	r25, Y+24	; 0x18
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9c 8b       	std	Y+20, r25	; 0x14
    1e9c:	8b 8b       	std	Y+19, r24	; 0x13
    1e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea2:	98 8b       	std	Y+16, r25	; 0x10
    1ea4:	8f 87       	std	Y+15, r24	; 0x0f
    1ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea8:	98 89       	ldd	r25, Y+16	; 0x10
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_init+0x3da>
    1eae:	98 8b       	std	Y+16, r25	; 0x10
    1eb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1.53);
	LCD_cmd(0x06); //Entry mode set   06
    1eb2:	86 e0       	ldi	r24, 0x06	; 6
    1eb4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	8b 87       	std	Y+11, r24	; 0x0b
    1ec2:	9c 87       	std	Y+12, r25	; 0x0c
    1ec4:	ad 87       	std	Y+13, r26	; 0x0d
    1ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	55 e4       	ldi	r21, 0x45	; 69
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8f 83       	std	Y+7, r24	; 0x07
    1ee2:	98 87       	std	Y+8, r25	; 0x08
    1ee4:	a9 87       	std	Y+9, r26	; 0x09
    1ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_init+0x43a>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <LCD_init+0x4b8>
	else if (__tmp > 65535)
    1f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0c:	78 85       	ldd	r23, Y+8	; 0x08
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <LCD_init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <LCD_init+0x49a>
    1f4c:	80 e9       	ldi	r24, 0x90	; 144
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_init+0x488>
    1f5c:	9c 83       	std	Y+4, r25	; 0x04
    1f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <LCD_init+0x47c>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <LCD_init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	6f 81       	ldd	r22, Y+7	; 0x07
    1f76:	78 85       	ldd	r23, Y+8	; 0x08
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_init+0x4c4>
    1f98:	9a 83       	std	Y+2, r25	; 0x02
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f9c:	ca 5b       	subi	r28, 0xBA	; 186
    1f9e:	df 4f       	sbci	r29, 0xFF	; 255
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <LCD_cmd>:


void LCD_cmd(uint8 cmd)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	2f 97       	sbiw	r28, 0x0f	; 15
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DATA =cmd; //Data lines are set to send command - PORTB=LCD_DATA
    1fca:	e8 e3       	ldi	r30, 0x38	; 56
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	80 83       	st	Z, r24
	setPinVAlue(LCD_CONTROL,RS,OUTPUT_LOW); //RS =0 to send instruction code
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	67 e0       	ldi	r22, 0x07	; 7
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
	setPinVAlue(LCD_CONTROL,RW,OUTPUT_LOW); //RW =0 to write
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	66 e0       	ldi	r22, 0x06	; 6
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
	// to write data, EN needs negative edge
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_HIGH);
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	65 e0       	ldi	r22, 0x05	; 5
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e4       	ldi	r27, 0x40	; 64
    1ff8:	8b 87       	std	Y+11, r24	; 0x0b
    1ffa:	9c 87       	std	Y+12, r25	; 0x0c
    1ffc:	ad 87       	std	Y+13, r26	; 0x0d
    1ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	55 e4       	ldi	r21, 0x45	; 69
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8f 83       	std	Y+7, r24	; 0x07
    201a:	98 87       	std	Y+8, r25	; 0x08
    201c:	a9 87       	std	Y+9, r26	; 0x09
    201e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_cmd+0x8e>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_cmd+0x10c>
	else if (__tmp > 65535)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_cmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_cmd+0xee>
    2084:	80 e9       	ldi	r24, 0x90	; 144
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_cmd+0xdc>
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_cmd+0xd0>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_cmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_cmd+0x118>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	65 e0       	ldi	r22, 0x05	; 5
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
}
    20de:	2f 96       	adiw	r28, 0x0f	; 15
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <LCD_Write_data>:

void LCD_Write_data(uint8 data)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	2f 97       	sbiw	r28, 0x0f	; 15
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DATA =data; //data lines are set to send data - PORTB=LCD_DATA
    2106:	e8 e3       	ldi	r30, 0x38	; 56
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	80 83       	st	Z, r24
	setPinVAlue(LCD_CONTROL,RS,OUTPUT_HIGH); //RS =1 to display data
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	67 e0       	ldi	r22, 0x07	; 7
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
	setPinVAlue(LCD_CONTROL,RW,OUTPUT_LOW); //RW =0 to write
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	66 e0       	ldi	r22, 0x06	; 6
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
	// to write data, EN needs negative edge
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_HIGH);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	65 e0       	ldi	r22, 0x05	; 5
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e4       	ldi	r27, 0x40	; 64
    2134:	8b 87       	std	Y+11, r24	; 0x0b
    2136:	9c 87       	std	Y+12, r25	; 0x0c
    2138:	ad 87       	std	Y+13, r26	; 0x0d
    213a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a e7       	ldi	r20, 0x7A	; 122
    214a:	55 e4       	ldi	r21, 0x45	; 69
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8f 83       	std	Y+7, r24	; 0x07
    2156:	98 87       	std	Y+8, r25	; 0x08
    2158:	a9 87       	std	Y+9, r26	; 0x09
    215a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <LCD_Write_data+0x8e>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <LCD_Write_data+0x10c>
	else if (__tmp > 65535)
    217e:	6f 81       	ldd	r22, Y+7	; 0x07
    2180:	78 85       	ldd	r23, Y+8	; 0x08
    2182:	89 85       	ldd	r24, Y+9	; 0x09
    2184:	9a 85       	ldd	r25, Y+10	; 0x0a
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <LCD_Write_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_Write_data+0xee>
    21c0:	80 e9       	ldi	r24, 0x90	; 144
    21c2:	91 e0       	ldi	r25, 0x01	; 1
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_Write_data+0xdc>
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <LCD_Write_data+0xd0>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <LCD_Write_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_Write_data+0x118>
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	65 e0       	ldi	r22, 0x05	; 5
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
}
    221a:	2f 96       	adiw	r28, 0x0f	; 15
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_GoToXY>:
	setPinVAlue(LCD_CONTROL,EN,OUTPUT_LOW);
}
#endif

void LCD_GoToXY(uint8 copy_xPosition, uint8 copy_yPosition)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <LCD_GoToXY+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_xPosition==FirstLine)
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	88 23       	and	r24, r24
    223e:	29 f4       	brne	.+10     	; 0x224a <LCD_GoToXY+0x1e>
	{
		LCD_cmd(0x80 + copy_yPosition);
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	80 58       	subi	r24, 0x80	; 128
    2244:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>
    2248:	07 c0       	rjmp	.+14     	; 0x2258 <LCD_GoToXY+0x2c>
	}
	else if(copy_xPosition==SecondLine)
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	21 f4       	brne	.+8      	; 0x2258 <LCD_GoToXY+0x2c>
	{
		LCD_cmd(0xc0 + copy_yPosition);
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	80 54       	subi	r24, 0x40	; 64
    2254:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>

	}
	else{}
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_SendString>:
void LCD_SendString(const char *copy_string)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <LCD_SendString+0x6>
    2268:	0f 92       	push	r0
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	9b 83       	std	Y+3, r25	; 0x03
    2270:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_iterator=0;
    2272:	19 82       	std	Y+1, r1	; 0x01
    2274:	27 c0       	rjmp	.+78     	; 0x22c4 <LCD_SendString+0x62>
		while(copy_string[local_iterator]!='\0')
		{
			if(local_iterator<16)
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	80 31       	cpi	r24, 0x10	; 16
    227a:	78 f4       	brcc	.+30     	; 0x229a <LCD_SendString+0x38>
			{
				LCD_Write_data(copy_string[local_iterator]);
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	fc 01       	movw	r30, r24
    2288:	e2 0f       	add	r30, r18
    228a:	f3 1f       	adc	r31, r19
    228c:	80 81       	ld	r24, Z
    228e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
				local_iterator++;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	15 c0       	rjmp	.+42     	; 0x22c4 <LCD_SendString+0x62>
			}
			else{
				LCD_GoToXY(SecondLine,local_iterator-16);
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	98 2f       	mov	r25, r24
    229e:	90 51       	subi	r25, 0x10	; 16
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	69 2f       	mov	r22, r25
    22a4:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
				LCD_Write_data(copy_string[local_iterator]);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	fc 01       	movw	r30, r24
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	80 81       	ld	r24, Z
    22ba:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
				local_iterator++;
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	89 83       	std	Y+1, r24	; 0x01
	else{}
}
void LCD_SendString(const char *copy_string)
{
	uint8 local_iterator=0;
		while(copy_string[local_iterator]!='\0')
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	9b 81       	ldd	r25, Y+3	; 0x03
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	80 81       	ld	r24, Z
    22d6:	88 23       	and	r24, r24
    22d8:	71 f6       	brne	.-100    	; 0x2276 <LCD_SendString+0x14>
				LCD_GoToXY(SecondLine,local_iterator-16);
				LCD_Write_data(copy_string[local_iterator]);
				local_iterator++;
			}
		}
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
	LCD_cmd(0x01);// Display clear
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_cmd>

}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_uint8_WriteNumber>:
void LCD_uint8_WriteNumber(uint8 copy_number)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	ab 97       	sbiw	r28, 0x2b	; 43
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	8b a7       	std	Y+43, r24	; 0x2b
	if(copy_number<10)
    2310:	8b a5       	ldd	r24, Y+43	; 0x2b
    2312:	8a 30       	cpi	r24, 0x0A	; 10
    2314:	08 f0       	brcs	.+2      	; 0x2318 <LCD_uint8_WriteNumber+0x1e>
    2316:	77 c0       	rjmp	.+238    	; 0x2406 <LCD_uint8_WriteNumber+0x10c>
	{
		LCD_Write_data(copy_number+'0');
    2318:	8b a5       	ldd	r24, Y+43	; 0x2b
    231a:	80 5d       	subi	r24, 0xD0	; 208
    231c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	aa e7       	ldi	r26, 0x7A	; 122
    2326:	b4 e4       	ldi	r27, 0x44	; 68
    2328:	8f a3       	std	Y+39, r24	; 0x27
    232a:	98 a7       	std	Y+40, r25	; 0x28
    232c:	a9 a7       	std	Y+41, r26	; 0x29
    232e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2330:	6f a1       	ldd	r22, Y+39	; 0x27
    2332:	78 a5       	ldd	r23, Y+40	; 0x28
    2334:	89 a5       	ldd	r24, Y+41	; 0x29
    2336:	9a a5       	ldd	r25, Y+42	; 0x2a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a e7       	ldi	r20, 0x7A	; 122
    233e:	55 e4       	ldi	r21, 0x45	; 69
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	8b a3       	std	Y+35, r24	; 0x23
    234a:	9c a3       	std	Y+36, r25	; 0x24
    234c:	ad a3       	std	Y+37, r26	; 0x25
    234e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2350:	6b a1       	ldd	r22, Y+35	; 0x23
    2352:	7c a1       	ldd	r23, Y+36	; 0x24
    2354:	8d a1       	ldd	r24, Y+37	; 0x25
    2356:	9e a1       	ldd	r25, Y+38	; 0x26
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	2c f4       	brge	.+10     	; 0x2372 <LCD_uint8_WriteNumber+0x78>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9a a3       	std	Y+34, r25	; 0x22
    236e:	89 a3       	std	Y+33, r24	; 0x21
    2370:	3f c0       	rjmp	.+126    	; 0x23f0 <LCD_uint8_WriteNumber+0xf6>
	else if (__tmp > 65535)
    2372:	6b a1       	ldd	r22, Y+35	; 0x23
    2374:	7c a1       	ldd	r23, Y+36	; 0x24
    2376:	8d a1       	ldd	r24, Y+37	; 0x25
    2378:	9e a1       	ldd	r25, Y+38	; 0x26
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	57 e4       	ldi	r21, 0x47	; 71
    2382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	4c f5       	brge	.+82     	; 0x23dc <LCD_uint8_WriteNumber+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	6f a1       	ldd	r22, Y+39	; 0x27
    238c:	78 a5       	ldd	r23, Y+40	; 0x28
    238e:	89 a5       	ldd	r24, Y+41	; 0x29
    2390:	9a a5       	ldd	r25, Y+42	; 0x2a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9a a3       	std	Y+34, r25	; 0x22
    23b0:	89 a3       	std	Y+33, r24	; 0x21
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <LCD_uint8_WriteNumber+0xd8>
    23b4:	80 e9       	ldi	r24, 0x90	; 144
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	98 a3       	std	Y+32, r25	; 0x20
    23ba:	8f 8f       	std	Y+31, r24	; 0x1f
    23bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23be:	98 a1       	ldd	r25, Y+32	; 0x20
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_uint8_WriteNumber+0xc6>
    23c4:	98 a3       	std	Y+32, r25	; 0x20
    23c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ca:	9a a1       	ldd	r25, Y+34	; 0x22
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	9a a3       	std	Y+34, r25	; 0x22
    23d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	89 a1       	ldd	r24, Y+33	; 0x21
    23d4:	9a a1       	ldd	r25, Y+34	; 0x22
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <LCD_uint8_WriteNumber+0xba>
    23da:	2d c1       	rjmp	.+602    	; 0x2636 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23dc:	6b a1       	ldd	r22, Y+35	; 0x23
    23de:	7c a1       	ldd	r23, Y+36	; 0x24
    23e0:	8d a1       	ldd	r24, Y+37	; 0x25
    23e2:	9e a1       	ldd	r25, Y+38	; 0x26
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9a a3       	std	Y+34, r25	; 0x22
    23ee:	89 a3       	std	Y+33, r24	; 0x21
    23f0:	89 a1       	ldd	r24, Y+33	; 0x21
    23f2:	9a a1       	ldd	r25, Y+34	; 0x22
    23f4:	9e 8f       	std	Y+30, r25	; 0x1e
    23f6:	8d 8f       	std	Y+29, r24	; 0x1d
    23f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_uint8_WriteNumber+0x102>
    2400:	9e 8f       	std	Y+30, r25	; 0x1e
    2402:	8d 8f       	std	Y+29, r24	; 0x1d
    2404:	18 c1       	rjmp	.+560    	; 0x2636 <LCD_uint8_WriteNumber+0x33c>
		_delay_ms(1000);
	}
	else if(copy_number<100)
    2406:	8b a5       	ldd	r24, Y+43	; 0x2b
    2408:	84 36       	cpi	r24, 0x64	; 100
    240a:	08 f0       	brcs	.+2      	; 0x240e <LCD_uint8_WriteNumber+0x114>
    240c:	84 c0       	rjmp	.+264    	; 0x2516 <LCD_uint8_WriteNumber+0x21c>
	{
		LCD_Write_data(copy_number/10+'0');
    240e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2410:	9a e0       	ldi	r25, 0x0A	; 10
    2412:	69 2f       	mov	r22, r25
    2414:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodqi4>
    2418:	80 5d       	subi	r24, 0xD0	; 208
    241a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
		LCD_Write_data(copy_number%10+'0');
    241e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2420:	9a e0       	ldi	r25, 0x0A	; 10
    2422:	69 2f       	mov	r22, r25
    2424:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodqi4>
    2428:	89 2f       	mov	r24, r25
    242a:	80 5d       	subi	r24, 0xD0	; 208
    242c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	aa e7       	ldi	r26, 0x7A	; 122
    2436:	b4 e4       	ldi	r27, 0x44	; 68
    2438:	89 8f       	std	Y+25, r24	; 0x19
    243a:	9a 8f       	std	Y+26, r25	; 0x1a
    243c:	ab 8f       	std	Y+27, r26	; 0x1b
    243e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	69 8d       	ldd	r22, Y+25	; 0x19
    2442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	55 e4       	ldi	r21, 0x45	; 69
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8d 8b       	std	Y+21, r24	; 0x15
    245a:	9e 8b       	std	Y+22, r25	; 0x16
    245c:	af 8b       	std	Y+23, r26	; 0x17
    245e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2460:	6d 89       	ldd	r22, Y+21	; 0x15
    2462:	7e 89       	ldd	r23, Y+22	; 0x16
    2464:	8f 89       	ldd	r24, Y+23	; 0x17
    2466:	98 8d       	ldd	r25, Y+24	; 0x18
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_uint8_WriteNumber+0x188>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_uint8_WriteNumber+0x206>
	else if (__tmp > 65535)
    2482:	6d 89       	ldd	r22, Y+21	; 0x15
    2484:	7e 89       	ldd	r23, Y+22	; 0x16
    2486:	8f 89       	ldd	r24, Y+23	; 0x17
    2488:	98 8d       	ldd	r25, Y+24	; 0x18
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_uint8_WriteNumber+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	69 8d       	ldd	r22, Y+25	; 0x19
    249c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9c 8b       	std	Y+20, r25	; 0x14
    24c0:	8b 8b       	std	Y+19, r24	; 0x13
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_uint8_WriteNumber+0x1e8>
    24c4:	80 e9       	ldi	r24, 0x90	; 144
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	9a 8b       	std	Y+18, r25	; 0x12
    24ca:	89 8b       	std	Y+17, r24	; 0x11
    24cc:	89 89       	ldd	r24, Y+17	; 0x11
    24ce:	9a 89       	ldd	r25, Y+18	; 0x12
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_uint8_WriteNumber+0x1d6>
    24d4:	9a 8b       	std	Y+18, r25	; 0x12
    24d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_uint8_WriteNumber+0x1ca>
    24ea:	a5 c0       	rjmp	.+330    	; 0x2636 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6d 89       	ldd	r22, Y+21	; 0x15
    24ee:	7e 89       	ldd	r23, Y+22	; 0x16
    24f0:	8f 89       	ldd	r24, Y+23	; 0x17
    24f2:	98 8d       	ldd	r25, Y+24	; 0x18
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9c 8b       	std	Y+20, r25	; 0x14
    24fe:	8b 8b       	std	Y+19, r24	; 0x13
    2500:	8b 89       	ldd	r24, Y+19	; 0x13
    2502:	9c 89       	ldd	r25, Y+20	; 0x14
    2504:	98 8b       	std	Y+16, r25	; 0x10
    2506:	8f 87       	std	Y+15, r24	; 0x0f
    2508:	8f 85       	ldd	r24, Y+15	; 0x0f
    250a:	98 89       	ldd	r25, Y+16	; 0x10
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_uint8_WriteNumber+0x212>
    2510:	98 8b       	std	Y+16, r25	; 0x10
    2512:	8f 87       	std	Y+15, r24	; 0x0f
    2514:	90 c0       	rjmp	.+288    	; 0x2636 <LCD_uint8_WriteNumber+0x33c>
		_delay_ms(1000);
	}
	else if (copy_number<1000)
	{
		LCD_Write_data(copy_number/100+'0');
    2516:	8b a5       	ldd	r24, Y+43	; 0x2b
    2518:	94 e6       	ldi	r25, 0x64	; 100
    251a:	69 2f       	mov	r22, r25
    251c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodqi4>
    2520:	80 5d       	subi	r24, 0xD0	; 208
    2522:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
		LCD_Write_data((copy_number%100)/10+'0');
    2526:	8b a5       	ldd	r24, Y+43	; 0x2b
    2528:	94 e6       	ldi	r25, 0x64	; 100
    252a:	69 2f       	mov	r22, r25
    252c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodqi4>
    2530:	89 2f       	mov	r24, r25
    2532:	9a e0       	ldi	r25, 0x0A	; 10
    2534:	69 2f       	mov	r22, r25
    2536:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodqi4>
    253a:	80 5d       	subi	r24, 0xD0	; 208
    253c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
		LCD_Write_data(copy_number%10+'0');
    2540:	8b a5       	ldd	r24, Y+43	; 0x2b
    2542:	9a e0       	ldi	r25, 0x0A	; 10
    2544:	69 2f       	mov	r22, r25
    2546:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodqi4>
    254a:	89 2f       	mov	r24, r25
    254c:	80 5d       	subi	r24, 0xD0	; 208
    254e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	aa e7       	ldi	r26, 0x7A	; 122
    2558:	b4 e4       	ldi	r27, 0x44	; 68
    255a:	8b 87       	std	Y+11, r24	; 0x0b
    255c:	9c 87       	std	Y+12, r25	; 0x0c
    255e:	ad 87       	std	Y+13, r26	; 0x0d
    2560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2562:	6b 85       	ldd	r22, Y+11	; 0x0b
    2564:	7c 85       	ldd	r23, Y+12	; 0x0c
    2566:	8d 85       	ldd	r24, Y+13	; 0x0d
    2568:	9e 85       	ldd	r25, Y+14	; 0x0e
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4a e7       	ldi	r20, 0x7A	; 122
    2570:	55 e4       	ldi	r21, 0x45	; 69
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	8f 83       	std	Y+7, r24	; 0x07
    257c:	98 87       	std	Y+8, r25	; 0x08
    257e:	a9 87       	std	Y+9, r26	; 0x09
    2580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e8       	ldi	r20, 0x80	; 128
    2590:	5f e3       	ldi	r21, 0x3F	; 63
    2592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2596:	88 23       	and	r24, r24
    2598:	2c f4       	brge	.+10     	; 0x25a4 <LCD_uint8_WriteNumber+0x2aa>
		__ticks = 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	3f c0       	rjmp	.+126    	; 0x2622 <LCD_uint8_WriteNumber+0x328>
	else if (__tmp > 65535)
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f e7       	ldi	r20, 0x7F	; 127
    25b2:	57 e4       	ldi	r21, 0x47	; 71
    25b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b8:	18 16       	cp	r1, r24
    25ba:	4c f5       	brge	.+82     	; 0x260e <LCD_uint8_WriteNumber+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25be:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e2       	ldi	r20, 0x20	; 32
    25ca:	51 e4       	ldi	r21, 0x41	; 65
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	0f c0       	rjmp	.+30     	; 0x2604 <LCD_uint8_WriteNumber+0x30a>
    25e6:	80 e9       	ldi	r24, 0x90	; 144
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	9c 83       	std	Y+4, r25	; 0x04
    25ec:	8b 83       	std	Y+3, r24	; 0x03
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_uint8_WriteNumber+0x2f8>
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	69 f7       	brne	.-38     	; 0x25e6 <LCD_uint8_WriteNumber+0x2ec>
    260c:	14 c0       	rjmp	.+40     	; 0x2636 <LCD_uint8_WriteNumber+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_uint8_WriteNumber+0x334>
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
	else{}
}
    2636:	ab 96       	adiw	r28, 0x2b	; 43
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <Timer0_Normal>:
void (*Timer0_CTC_CallBackFun)(void)=NULL;
void (*Timer0_Normal_CallBackFun)(void)=NULL;
static float32 OV_Counts=0;

void Timer0_Normal(void)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2650:	a3 e5       	ldi	r26, 0x53	; 83
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e3 e5       	ldi	r30, 0x53	; 83
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 77       	andi	r24, 0x7F	; 127
    265c:	8c 93       	st	X, r24
	/*Mode of operation : Normal*/
	CLEARBIT(TCCR0,TCCR0_WGM00);
    265e:	a3 e5       	ldi	r26, 0x53	; 83
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e3 e5       	ldi	r30, 0x53	; 83
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8f 7b       	andi	r24, 0xBF	; 191
    266a:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_WGM01);
    266c:	a3 e5       	ldi	r26, 0x53	; 83
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e3 e5       	ldi	r30, 0x53	; 83
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	87 7f       	andi	r24, 0xF7	; 247
    2678:	8c 93       	st	X, r24

	/* Output Mode */
	CLEARBIT(TCCR0,TCCR0_COM00);
    267a:	a3 e5       	ldi	r26, 0x53	; 83
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e3 e5       	ldi	r30, 0x53	; 83
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	8f 7e       	andi	r24, 0xEF	; 239
    2686:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2688:	a3 e5       	ldi	r26, 0x53	; 83
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e3 e5       	ldi	r30, 0x53	; 83
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	8f 7d       	andi	r24, 0xDF	; 223
    2694:	8c 93       	st	X, r24
	TCCR0 |=OC0_MODE;
    2696:	a3 e5       	ldi	r26, 0x53	; 83
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e3 e5       	ldi	r30, 0x53	; 83
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 61       	ori	r24, 0x10	; 16
    26a2:	8c 93       	st	X, r24

	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    26a4:	a3 e5       	ldi	r26, 0x53	; 83
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e3 e5       	ldi	r30, 0x53	; 83
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8e 7f       	andi	r24, 0xFE	; 254
    26b0:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    26b2:	a3 e5       	ldi	r26, 0x53	; 83
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e3 e5       	ldi	r30, 0x53	; 83
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	8d 7f       	andi	r24, 0xFD	; 253
    26be:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    26c0:	a3 e5       	ldi	r26, 0x53	; 83
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e3 e5       	ldi	r30, 0x53	; 83
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8b 7f       	andi	r24, 0xFB	; 251
    26cc:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    26ce:	a3 e5       	ldi	r26, 0x53	; 83
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e3 e5       	ldi	r30, 0x53	; 83
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	85 60       	ori	r24, 0x05	; 5
    26da:	8c 93       	st	X, r24

	/*enable interrupt for Normal mode*/
	SETBIT(TIMSK,TIMSK_TOIE0);
    26dc:	a9 e5       	ldi	r26, 0x59	; 89
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e9 e5       	ldi	r30, 0x59	; 89
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	81 60       	ori	r24, 0x01	; 1
    26e8:	8c 93       	st	X, r24
	/*enable global interrupt*/
	SETBIT(SREG,GIE);
    26ea:	af e5       	ldi	r26, 0x5F	; 95
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	ef e5       	ldi	r30, 0x5F	; 95
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	80 68       	ori	r24, 0x80	; 128
    26f6:	8c 93       	st	X, r24
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <Timer0_Normal_CallBack>:
uint8 Timer0_Normal_CallBack(void (*Copy_Timer0_Normal_CallBackFun)(void),uint32 copy_time_ms)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	27 97       	sbiw	r28, 0x07	; 7
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	9b 83       	std	Y+3, r25	; 0x03
    2714:	8a 83       	std	Y+2, r24	; 0x02
    2716:	4c 83       	std	Y+4, r20	; 0x04
    2718:	5d 83       	std	Y+5, r21	; 0x05
    271a:	6e 83       	std	Y+6, r22	; 0x06
    271c:	7f 83       	std	Y+7, r23	; 0x07
	uint8 localError=1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	89 83       	std	Y+1, r24	; 0x01
static float32 overflow_time=256*256.0/(16000.0); //in ms
#elif CLOCKSELECT ==CLOCK_DIV_BY_1024
static float32 overflow_time =1024.0*256.0/(16000.0); //in ms
#endif

	if(Copy_Timer0_Normal_CallBackFun==NULL)
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	11 f4       	brne	.+4      	; 0x272e <Timer0_Normal_CallBack+0x30>
	{
		localError=0;
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	24 c0       	rjmp	.+72     	; 0x2776 <Timer0_Normal_CallBack+0x78>
	}
	else
	{
		Timer0_Normal_CallBackFun=Copy_Timer0_Normal_CallBackFun;
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	90 93 2a 02 	sts	0x022A, r25
    2736:	80 93 29 02 	sts	0x0229, r24
		OV_Counts=copy_time_ms/overflow_time;
    273a:	6c 81       	ldd	r22, Y+4	; 0x04
    273c:	7d 81       	ldd	r23, Y+5	; 0x05
    273e:	8e 81       	ldd	r24, Y+6	; 0x06
    2740:	9f 81       	ldd	r25, Y+7	; 0x07
    2742:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	20 91 0d 02 	lds	r18, 0x020D
    274e:	30 91 0e 02 	lds	r19, 0x020E
    2752:	40 91 0f 02 	lds	r20, 0x020F
    2756:	50 91 10 02 	lds	r21, 0x0210
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	80 93 2b 02 	sts	0x022B, r24
    276a:	90 93 2c 02 	sts	0x022C, r25
    276e:	a0 93 2d 02 	sts	0x022D, r26
    2772:	b0 93 2e 02 	sts	0x022E, r27
	}
	return localError;
    2776:	89 81       	ldd	r24, Y+1	; 0x01
}
    2778:	27 96       	adiw	r28, 0x07	; 7
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    278a:	1f 92       	push	r1
    278c:	0f 92       	push	r0
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	0f 92       	push	r0
    2792:	11 24       	eor	r1, r1
    2794:	2f 93       	push	r18
    2796:	3f 93       	push	r19
    2798:	4f 93       	push	r20
    279a:	5f 93       	push	r21
    279c:	6f 93       	push	r22
    279e:	7f 93       	push	r23
    27a0:	8f 93       	push	r24
    27a2:	9f 93       	push	r25
    27a4:	af 93       	push	r26
    27a6:	bf 93       	push	r27
    27a8:	ef 93       	push	r30
    27aa:	ff 93       	push	r31
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter=0;
	counter++;
    27b4:	80 91 2f 02 	lds	r24, 0x022F
    27b8:	90 91 30 02 	lds	r25, 0x0230
    27bc:	a0 91 31 02 	lds	r26, 0x0231
    27c0:	b0 91 32 02 	lds	r27, 0x0232
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	a1 1d       	adc	r26, r1
    27c8:	b1 1d       	adc	r27, r1
    27ca:	80 93 2f 02 	sts	0x022F, r24
    27ce:	90 93 30 02 	sts	0x0230, r25
    27d2:	a0 93 31 02 	sts	0x0231, r26
    27d6:	b0 93 32 02 	sts	0x0232, r27
	if(counter>=OV_Counts)
    27da:	80 91 2f 02 	lds	r24, 0x022F
    27de:	90 91 30 02 	lds	r25, 0x0230
    27e2:	a0 91 31 02 	lds	r26, 0x0231
    27e6:	b0 91 32 02 	lds	r27, 0x0232
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	20 91 2b 02 	lds	r18, 0x022B
    27fa:	30 91 2c 02 	lds	r19, 0x022C
    27fe:	40 91 2d 02 	lds	r20, 0x022D
    2802:	50 91 2e 02 	lds	r21, 0x022E
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    280e:	88 23       	and	r24, r24
    2810:	9c f0       	brlt	.+38     	; 0x2838 <__vector_11+0xae>
	{
		if(Timer0_Normal_CallBackFun != NULL)
    2812:	80 91 29 02 	lds	r24, 0x0229
    2816:	90 91 2a 02 	lds	r25, 0x022A
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	29 f0       	breq	.+10     	; 0x2828 <__vector_11+0x9e>
		{
			Timer0_Normal_CallBackFun();
    281e:	e0 91 29 02 	lds	r30, 0x0229
    2822:	f0 91 2a 02 	lds	r31, 0x022A
    2826:	09 95       	icall
		}
		counter=0;
    2828:	10 92 2f 02 	sts	0x022F, r1
    282c:	10 92 30 02 	sts	0x0230, r1
    2830:	10 92 31 02 	sts	0x0231, r1
    2834:	10 92 32 02 	sts	0x0232, r1
	}

}
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	ff 91       	pop	r31
    283e:	ef 91       	pop	r30
    2840:	bf 91       	pop	r27
    2842:	af 91       	pop	r26
    2844:	9f 91       	pop	r25
    2846:	8f 91       	pop	r24
    2848:	7f 91       	pop	r23
    284a:	6f 91       	pop	r22
    284c:	5f 91       	pop	r21
    284e:	4f 91       	pop	r20
    2850:	3f 91       	pop	r19
    2852:	2f 91       	pop	r18
    2854:	0f 90       	pop	r0
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	0f 90       	pop	r0
    285a:	1f 90       	pop	r1
    285c:	18 95       	reti

0000285e <Timer0_CTC>:

void Timer0_CTC(void)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2866:	a3 e5       	ldi	r26, 0x53	; 83
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e3 e5       	ldi	r30, 0x53	; 83
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8f 77       	andi	r24, 0x7F	; 127
    2872:	8c 93       	st	X, r24

	/*Mode of operation : CTC*/
	CLEARBIT(TCCR0,TCCR0_WGM00);
    2874:	a3 e5       	ldi	r26, 0x53	; 83
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e3 e5       	ldi	r30, 0x53	; 83
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 7b       	andi	r24, 0xBF	; 191
    2880:	8c 93       	st	X, r24
	SETBIT(TCCR0,TCCR0_WGM01);
    2882:	a3 e5       	ldi	r26, 0x53	; 83
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e3 e5       	ldi	r30, 0x53	; 83
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	88 60       	ori	r24, 0x08	; 8
    288e:	8c 93       	st	X, r24

	/* Output Mode */
	CLEARBIT(TCCR0,TCCR0_COM00);
    2890:	a3 e5       	ldi	r26, 0x53	; 83
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e3 e5       	ldi	r30, 0x53	; 83
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8f 7e       	andi	r24, 0xEF	; 239
    289c:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    289e:	a3 e5       	ldi	r26, 0x53	; 83
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e3 e5       	ldi	r30, 0x53	; 83
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	8f 7d       	andi	r24, 0xDF	; 223
    28aa:	8c 93       	st	X, r24
	TCCR0 |=OC0_MODE;
    28ac:	a3 e5       	ldi	r26, 0x53	; 83
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e3 e5       	ldi	r30, 0x53	; 83
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	80 61       	ori	r24, 0x10	; 16
    28b8:	8c 93       	st	X, r24

	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    28ba:	a3 e5       	ldi	r26, 0x53	; 83
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e3 e5       	ldi	r30, 0x53	; 83
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	8e 7f       	andi	r24, 0xFE	; 254
    28c6:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    28c8:	a3 e5       	ldi	r26, 0x53	; 83
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e3 e5       	ldi	r30, 0x53	; 83
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	8d 7f       	andi	r24, 0xFD	; 253
    28d4:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    28d6:	a3 e5       	ldi	r26, 0x53	; 83
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e3 e5       	ldi	r30, 0x53	; 83
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	8b 7f       	andi	r24, 0xFB	; 251
    28e2:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    28e4:	a3 e5       	ldi	r26, 0x53	; 83
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e3 e5       	ldi	r30, 0x53	; 83
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	85 60       	ori	r24, 0x05	; 5
    28f0:	8c 93       	st	X, r24
	/*enable interrupt for CTC mode*/
	SETBIT(TIMSK,TIMSK_OCIE0);
    28f2:	a9 e5       	ldi	r26, 0x59	; 89
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e9 e5       	ldi	r30, 0x59	; 89
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	82 60       	ori	r24, 0x02	; 2
    28fe:	8c 93       	st	X, r24
	/*enable global interrupt*/
	SETBIT(SREG,GIE);
    2900:	af e5       	ldi	r26, 0x5F	; 95
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ef e5       	ldi	r30, 0x5F	; 95
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	80 68       	ori	r24, 0x80	; 128
    290c:	8c 93       	st	X, r24
	/*set compare match value*/
	OCR0 = TIMER0_COMPARE_MATCH_VALUE;
    290e:	ec e5       	ldi	r30, 0x5C	; 92
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	84 e6       	ldi	r24, 0x64	; 100
    2914:	80 83       	st	Z, r24

}
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <Timer0_CTC_CallBack>:
uint8 Timer0_CTC_CallBack( void (*Copy_Timer0_CTC_CallBackFun)(void) , uint32 copy_time_ms)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	2b 97       	sbiw	r28, 0x0b	; 11
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	9f 83       	std	Y+7, r25	; 0x07
    2932:	8e 83       	std	Y+6, r24	; 0x06
    2934:	48 87       	std	Y+8, r20	; 0x08
    2936:	59 87       	std	Y+9, r21	; 0x09
    2938:	6a 87       	std	Y+10, r22	; 0x0a
    293a:	7b 87       	std	Y+11, r23	; 0x0b
	uint8 localError=1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	8d 83       	std	Y+5, r24	; 0x05
	CLOCKSELECT ==CLOCK_DIV_BY_64
	float32 Overflow_time=64.0*TIMER0_COMPARE_MATCH_VALUE/(16000.0); //in ms
	#elif CLOCKSELECT ==CLOCK_DIV_BY_256
	float32 Overflow_time=256.0*TIMER0_COMPARE_MATCH_VALUE/(16000.0); //in ms
	#elif CLOCKSELECT ==CLOCK_DIV_BY_1024
	float32 Overflow_time =1024.0*TIMER0_COMPARE_MATCH_VALUE/(16000.0); //in ms
    2940:	8d ec       	ldi	r24, 0xCD	; 205
    2942:	9c ec       	ldi	r25, 0xCC	; 204
    2944:	ac ec       	ldi	r26, 0xCC	; 204
    2946:	b0 e4       	ldi	r27, 0x40	; 64
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	ab 83       	std	Y+3, r26	; 0x03
    294e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	if(Copy_Timer0_CTC_CallBackFun==NULL)
    2950:	8e 81       	ldd	r24, Y+6	; 0x06
    2952:	9f 81       	ldd	r25, Y+7	; 0x07
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	11 f4       	brne	.+4      	; 0x295c <Timer0_CTC_CallBack+0x40>
	{
		localError=0;
    2958:	1d 82       	std	Y+5, r1	; 0x05
    295a:	20 c0       	rjmp	.+64     	; 0x299c <Timer0_CTC_CallBack+0x80>
	}
	else
	{
		Timer0_CTC_CallBackFun=Copy_Timer0_CTC_CallBackFun;
    295c:	8e 81       	ldd	r24, Y+6	; 0x06
    295e:	9f 81       	ldd	r25, Y+7	; 0x07
    2960:	90 93 28 02 	sts	0x0228, r25
    2964:	80 93 27 02 	sts	0x0227, r24
		OV_Counts=copy_time_ms/Overflow_time;
    2968:	68 85       	ldd	r22, Y+8	; 0x08
    296a:	79 85       	ldd	r23, Y+9	; 0x09
    296c:	8a 85       	ldd	r24, Y+10	; 0x0a
    296e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2970:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	29 81       	ldd	r18, Y+1	; 0x01
    297e:	3a 81       	ldd	r19, Y+2	; 0x02
    2980:	4b 81       	ldd	r20, Y+3	; 0x03
    2982:	5c 81       	ldd	r21, Y+4	; 0x04
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	80 93 2b 02 	sts	0x022B, r24
    2990:	90 93 2c 02 	sts	0x022C, r25
    2994:	a0 93 2d 02 	sts	0x022D, r26
    2998:	b0 93 2e 02 	sts	0x022E, r27

	}
	return localError;
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    299e:	2b 96       	adiw	r28, 0x0b	; 11
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    29b0:	1f 92       	push	r1
    29b2:	0f 92       	push	r0
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	0f 92       	push	r0
    29b8:	11 24       	eor	r1, r1
    29ba:	2f 93       	push	r18
    29bc:	3f 93       	push	r19
    29be:	4f 93       	push	r20
    29c0:	5f 93       	push	r21
    29c2:	6f 93       	push	r22
    29c4:	7f 93       	push	r23
    29c6:	8f 93       	push	r24
    29c8:	9f 93       	push	r25
    29ca:	af 93       	push	r26
    29cc:	bf 93       	push	r27
    29ce:	ef 93       	push	r30
    29d0:	ff 93       	push	r31
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	static uint32 Counter=0;
	Counter++;
    29da:	80 91 33 02 	lds	r24, 0x0233
    29de:	90 91 34 02 	lds	r25, 0x0234
    29e2:	a0 91 35 02 	lds	r26, 0x0235
    29e6:	b0 91 36 02 	lds	r27, 0x0236
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	a1 1d       	adc	r26, r1
    29ee:	b1 1d       	adc	r27, r1
    29f0:	80 93 33 02 	sts	0x0233, r24
    29f4:	90 93 34 02 	sts	0x0234, r25
    29f8:	a0 93 35 02 	sts	0x0235, r26
    29fc:	b0 93 36 02 	sts	0x0236, r27
	if(Counter >= OV_Counts)
    2a00:	80 91 33 02 	lds	r24, 0x0233
    2a04:	90 91 34 02 	lds	r25, 0x0234
    2a08:	a0 91 35 02 	lds	r26, 0x0235
    2a0c:	b0 91 36 02 	lds	r27, 0x0236
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	20 91 2b 02 	lds	r18, 0x022B
    2a20:	30 91 2c 02 	lds	r19, 0x022C
    2a24:	40 91 2d 02 	lds	r20, 0x022D
    2a28:	50 91 2e 02 	lds	r21, 0x022E
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2a34:	88 23       	and	r24, r24
    2a36:	9c f0       	brlt	.+38     	; 0x2a5e <__vector_10+0xae>
	{
		if(Timer0_CTC_CallBackFun != NULL)
    2a38:	80 91 27 02 	lds	r24, 0x0227
    2a3c:	90 91 28 02 	lds	r25, 0x0228
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	29 f0       	breq	.+10     	; 0x2a4e <__vector_10+0x9e>
		{
			Timer0_CTC_CallBackFun();
    2a44:	e0 91 27 02 	lds	r30, 0x0227
    2a48:	f0 91 28 02 	lds	r31, 0x0228
    2a4c:	09 95       	icall
		}
		Counter=0;
    2a4e:	10 92 33 02 	sts	0x0233, r1
    2a52:	10 92 34 02 	sts	0x0234, r1
    2a56:	10 92 35 02 	sts	0x0235, r1
    2a5a:	10 92 36 02 	sts	0x0236, r1
	}

}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	ff 91       	pop	r31
    2a64:	ef 91       	pop	r30
    2a66:	bf 91       	pop	r27
    2a68:	af 91       	pop	r26
    2a6a:	9f 91       	pop	r25
    2a6c:	8f 91       	pop	r24
    2a6e:	7f 91       	pop	r23
    2a70:	6f 91       	pop	r22
    2a72:	5f 91       	pop	r21
    2a74:	4f 91       	pop	r20
    2a76:	3f 91       	pop	r19
    2a78:	2f 91       	pop	r18
    2a7a:	0f 90       	pop	r0
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	0f 90       	pop	r0
    2a80:	1f 90       	pop	r1
    2a82:	18 95       	reti

00002a84 <Timer0_PWM_Fast>:

void Timer0_PWM_Fast(void)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2a8c:	a3 e5       	ldi	r26, 0x53	; 83
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e3 e5       	ldi	r30, 0x53	; 83
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	8f 77       	andi	r24, 0x7F	; 127
    2a98:	8c 93       	st	X, r24
	/*Waveform generation MODE : Fast PWM*/
	SETBIT(TCCR0,TCCR0_WGM00);
    2a9a:	a3 e5       	ldi	r26, 0x53	; 83
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e3 e5       	ldi	r30, 0x53	; 83
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	80 64       	ori	r24, 0x40	; 64
    2aa6:	8c 93       	st	X, r24
	SETBIT(TCCR0,TCCR0_WGM01);
    2aa8:	a3 e5       	ldi	r26, 0x53	; 83
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e3 e5       	ldi	r30, 0x53	; 83
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 60       	ori	r24, 0x08	; 8
    2ab4:	8c 93       	st	X, r24

	/* Output Mode */
	CLEARBIT(TCCR0,TCCR0_COM00);
    2ab6:	a3 e5       	ldi	r26, 0x53	; 83
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e3 e5       	ldi	r30, 0x53	; 83
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	8f 7e       	andi	r24, 0xEF	; 239
    2ac2:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2ac4:	a3 e5       	ldi	r26, 0x53	; 83
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e3 e5       	ldi	r30, 0x53	; 83
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	8f 7d       	andi	r24, 0xDF	; 223
    2ad0:	8c 93       	st	X, r24
	TCCR0 |=OC0_PWM_MODE;
    2ad2:	a3 e5       	ldi	r26, 0x53	; 83
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e3 e5       	ldi	r30, 0x53	; 83
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	80 62       	ori	r24, 0x20	; 32
    2ade:	8c 93       	st	X, r24

	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    2ae0:	a3 e5       	ldi	r26, 0x53	; 83
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e3 e5       	ldi	r30, 0x53	; 83
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	8e 7f       	andi	r24, 0xFE	; 254
    2aec:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    2aee:	a3 e5       	ldi	r26, 0x53	; 83
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e3 e5       	ldi	r30, 0x53	; 83
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	8d 7f       	andi	r24, 0xFD	; 253
    2afa:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    2afc:	a3 e5       	ldi	r26, 0x53	; 83
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e3 e5       	ldi	r30, 0x53	; 83
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8b 7f       	andi	r24, 0xFB	; 251
    2b08:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    2b0a:	a3 e5       	ldi	r26, 0x53	; 83
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e3 e5       	ldi	r30, 0x53	; 83
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	85 60       	ori	r24, 0x05	; 5
    2b16:	8c 93       	st	X, r24

	/*set compare match value*/
	OCR0 = TIMER0_COMPARE_MATCH_VALUE;
    2b18:	ec e5       	ldi	r30, 0x5C	; 92
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	84 e6       	ldi	r24, 0x64	; 100
    2b1e:	80 83       	st	Z, r24

}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <Timer0_PWM_Phase_Correct>:

void Timer0_PWM_Phase_Correct(void)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
	/*force output compare =0*/
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2b2e:	a3 e5       	ldi	r26, 0x53	; 83
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e3 e5       	ldi	r30, 0x53	; 83
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	8f 77       	andi	r24, 0x7F	; 127
    2b3a:	8c 93       	st	X, r24
	/*Waveform generation MODE: PWM_Phase_Correct */
	SETBIT(TCCR0,TCCR0_WGM00);
    2b3c:	a3 e5       	ldi	r26, 0x53	; 83
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e3 e5       	ldi	r30, 0x53	; 83
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	80 64       	ori	r24, 0x40	; 64
    2b48:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_WGM01);
    2b4a:	a3 e5       	ldi	r26, 0x53	; 83
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	e3 e5       	ldi	r30, 0x53	; 83
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	87 7f       	andi	r24, 0xF7	; 247
    2b56:	8c 93       	st	X, r24
	/*Output Mode*/
	CLEARBIT(TCCR0,TCCR0_COM00);
    2b58:	a3 e5       	ldi	r26, 0x53	; 83
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e3 e5       	ldi	r30, 0x53	; 83
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 7e       	andi	r24, 0xEF	; 239
    2b64:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2b66:	a3 e5       	ldi	r26, 0x53	; 83
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e3 e5       	ldi	r30, 0x53	; 83
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	8f 7d       	andi	r24, 0xDF	; 223
    2b72:	8c 93       	st	X, r24
	TCCR0 |= OC0_PWM_MODE;
    2b74:	a3 e5       	ldi	r26, 0x53	; 83
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e3 e5       	ldi	r30, 0x53	; 83
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	80 62       	ori	r24, 0x20	; 32
    2b80:	8c 93       	st	X, r24
	/*Clock Select*/
	CLEARBIT(TCCR0,TCCR0_CS00);
    2b82:	a3 e5       	ldi	r26, 0x53	; 83
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e3 e5       	ldi	r30, 0x53	; 83
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8e 7f       	andi	r24, 0xFE	; 254
    2b8e:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS01);
    2b90:	a3 e5       	ldi	r26, 0x53	; 83
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e3 e5       	ldi	r30, 0x53	; 83
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	8d 7f       	andi	r24, 0xFD	; 253
    2b9c:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_CS02);
    2b9e:	a3 e5       	ldi	r26, 0x53	; 83
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e3 e5       	ldi	r30, 0x53	; 83
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8b 7f       	andi	r24, 0xFB	; 251
    2baa:	8c 93       	st	X, r24
	TCCR0 |=CLOCKSELECT;
    2bac:	a3 e5       	ldi	r26, 0x53	; 83
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e3 e5       	ldi	r30, 0x53	; 83
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	85 60       	ori	r24, 0x05	; 5
    2bb8:	8c 93       	st	X, r24
	/*set compare match value*/
	OCR0= TIMER0_COMPARE_MATCH_VALUE;
    2bba:	ec e5       	ldi	r30, 0x5C	; 92
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	84 e6       	ldi	r24, 0x64	; 100
    2bc0:	80 83       	st	Z, r24
}
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <Delay_mS>:
void Delay_mS(uint32 copy_dtime_ms)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	2a 97       	sbiw	r28, 0x0a	; 10
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	6f 83       	std	Y+7, r22	; 0x07
    2bde:	78 87       	std	Y+8, r23	; 0x08
    2be0:	89 87       	std	Y+9, r24	; 0x09
    2be2:	9a 87       	std	Y+10, r25	; 0x0a
	uint32 counter=0;
    2be4:	1b 82       	std	Y+3, r1	; 0x03
    2be6:	1c 82       	std	Y+4, r1	; 0x04
    2be8:	1d 82       	std	Y+5, r1	; 0x05
    2bea:	1e 82       	std	Y+6, r1	; 0x06
	CLEARBIT(TCCR0,TCCR0_FOC0);
    2bec:	a3 e5       	ldi	r26, 0x53	; 83
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e3 e5       	ldi	r30, 0x53	; 83
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8f 77       	andi	r24, 0x7F	; 127
    2bf8:	8c 93       	st	X, r24

	/*Mode of operation : CTC*/
	CLEARBIT(TCCR0,TCCR0_WGM00);
    2bfa:	a3 e5       	ldi	r26, 0x53	; 83
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e3 e5       	ldi	r30, 0x53	; 83
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 7b       	andi	r24, 0xBF	; 191
    2c06:	8c 93       	st	X, r24
	SETBIT(TCCR0,TCCR0_WGM01);
    2c08:	a3 e5       	ldi	r26, 0x53	; 83
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e3 e5       	ldi	r30, 0x53	; 83
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	88 60       	ori	r24, 0x08	; 8
    2c14:	8c 93       	st	X, r24

	/* OC0 is disconnected */
	CLEARBIT(TCCR0,TCCR0_COM00);
    2c16:	a3 e5       	ldi	r26, 0x53	; 83
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e3 e5       	ldi	r30, 0x53	; 83
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8f 7e       	andi	r24, 0xEF	; 239
    2c22:	8c 93       	st	X, r24
	CLEARBIT(TCCR0,TCCR0_COM01);
    2c24:	a3 e5       	ldi	r26, 0x53	; 83
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e3 e5       	ldi	r30, 0x53	; 83
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	8f 7d       	andi	r24, 0xDF	; 223
    2c30:	8c 93       	st	X, r24

	/*Clock Select div by 256*/
	TCCR0 |=0x04;
    2c32:	a3 e5       	ldi	r26, 0x53	; 83
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e3 e5       	ldi	r30, 0x53	; 83
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	84 60       	ori	r24, 0x04	; 4
    2c3e:	8c 93       	st	X, r24
	/*set compare match value*/
	OCR0 = 250;  //this will generate 4 ms every cycle
    2c40:	ec e5       	ldi	r30, 0x5C	; 92
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	8a ef       	ldi	r24, 0xFA	; 250
    2c46:	80 83       	st	Z, r24
	uint16 CTC_Interrupt_counts=0;
    2c48:	1a 82       	std	Y+2, r1	; 0x02
    2c4a:	19 82       	std	Y+1, r1	; 0x01
	CTC_Interrupt_counts=copy_dtime_ms/4;
    2c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c4e:	98 85       	ldd	r25, Y+8	; 0x08
    2c50:	a9 85       	ldd	r26, Y+9	; 0x09
    2c52:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c54:	b6 95       	lsr	r27
    2c56:	a7 95       	ror	r26
    2c58:	97 95       	ror	r25
    2c5a:	87 95       	ror	r24
    2c5c:	b6 95       	lsr	r27
    2c5e:	a7 95       	ror	r26
    2c60:	97 95       	ror	r25
    2c62:	87 95       	ror	r24
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	18 c0       	rjmp	.+48     	; 0x2c9a <Delay_mS+0xd2>
	while(counter<CTC_Interrupt_counts)
	{
		while(!GETBIT(TIFR,TIFR_OCF0));
    2c6a:	e8 e5       	ldi	r30, 0x58	; 88
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	86 95       	lsr	r24
    2c72:	88 23       	and	r24, r24
    2c74:	d1 f3       	breq	.-12     	; 0x2c6a <Delay_mS+0xa2>
		SETBIT(TIFR,TIFR_OCF0);//clearing the flag
    2c76:	a8 e5       	ldi	r26, 0x58	; 88
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e8 e5       	ldi	r30, 0x58	; 88
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	82 60       	ori	r24, 0x02	; 2
    2c82:	8c 93       	st	X, r24
		counter++;
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	ad 81       	ldd	r26, Y+5	; 0x05
    2c8a:	be 81       	ldd	r27, Y+6	; 0x06
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	a1 1d       	adc	r26, r1
    2c90:	b1 1d       	adc	r27, r1
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	ad 83       	std	Y+5, r26	; 0x05
    2c98:	be 83       	std	Y+6, r27	; 0x06
	TCCR0 |=0x04;
	/*set compare match value*/
	OCR0 = 250;  //this will generate 4 ms every cycle
	uint16 CTC_Interrupt_counts=0;
	CTC_Interrupt_counts=copy_dtime_ms/4;
	while(counter<CTC_Interrupt_counts)
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	9c 01       	movw	r18, r24
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	50 e0       	ldi	r21, 0x00	; 0
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	ad 81       	ldd	r26, Y+5	; 0x05
    2caa:	be 81       	ldd	r27, Y+6	; 0x06
    2cac:	82 17       	cp	r24, r18
    2cae:	93 07       	cpc	r25, r19
    2cb0:	a4 07       	cpc	r26, r20
    2cb2:	b5 07       	cpc	r27, r21
    2cb4:	d0 f2       	brcs	.-76     	; 0x2c6a <Delay_mS+0xa2>
	{
		while(!GETBIT(TIFR,TIFR_OCF0));
		SETBIT(TIFR,TIFR_OCF0);//clearing the flag
		counter++;
	}
}
    2cb6:	2a 96       	adiw	r28, 0x0a	; 10
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <Timer1_Servo>:


void Timer1_Servo(uint8 copy_Angle)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	0f 92       	push	r0
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A|=0x80; //non inverting
    2cd4:	af e4       	ldi	r26, 0x4F	; 79
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	ef e4       	ldi	r30, 0x4F	; 79
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 68       	ori	r24, 0x80	; 128
    2ce0:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,2); //force output compare =0
    2ce2:	af e4       	ldi	r26, 0x4F	; 79
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ef e4       	ldi	r30, 0x4F	; 79
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8b 7f       	andi	r24, 0xFB	; 251
    2cee:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,3);
    2cf0:	af e4       	ldi	r26, 0x4F	; 79
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ef e4       	ldi	r30, 0x4F	; 79
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	87 7f       	andi	r24, 0xF7	; 247
    2cfc:	8c 93       	st	X, r24
	SETBIT(TCCR1A,1); //Waveform Generation Mode
    2cfe:	af e4       	ldi	r26, 0x4F	; 79
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	ef e4       	ldi	r30, 0x4F	; 79
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	82 60       	ori	r24, 0x02	; 2
    2d0a:	8c 93       	st	X, r24
	CLEARBIT(TCCR1A,0);
    2d0c:	af e4       	ldi	r26, 0x4F	; 79
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	ef e4       	ldi	r30, 0x4F	; 79
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	8e 7f       	andi	r24, 0xFE	; 254
    2d18:	8c 93       	st	X, r24
	SETBIT(TCCR1B,3);
    2d1a:	ae e4       	ldi	r26, 0x4E	; 78
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	ee e4       	ldi	r30, 0x4E	; 78
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	88 60       	ori	r24, 0x08	; 8
    2d26:	8c 93       	st	X, r24
	SETBIT(TCCR1B,4);
    2d28:	ae e4       	ldi	r26, 0x4E	; 78
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	ee e4       	ldi	r30, 0x4E	; 78
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	80 61       	ori	r24, 0x10	; 16
    2d34:	8c 93       	st	X, r24
	TCCR1B|=0x02; //prescaler 8
    2d36:	ae e4       	ldi	r26, 0x4E	; 78
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	ee e4       	ldi	r30, 0x4E	; 78
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	82 60       	ori	r24, 0x02	; 2
    2d42:	8c 93       	st	X, r24
	ICR1L=40000; //max count value
    2d44:	e6 e4       	ldi	r30, 0x46	; 70
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 e4       	ldi	r24, 0x40	; 64
    2d4a:	9c e9       	ldi	r25, 0x9C	; 156
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
	OCR1AL=2000+(copy_Angle)*(2000/180);//output compare
    2d50:	ea e4       	ldi	r30, 0x4A	; 74
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	48 2f       	mov	r20, r24
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	ca 01       	movw	r24, r20
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	9c 01       	movw	r18, r24
    2d62:	22 0f       	add	r18, r18
    2d64:	33 1f       	adc	r19, r19
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	82 0f       	add	r24, r18
    2d6c:	93 1f       	adc	r25, r19
    2d6e:	84 0f       	add	r24, r20
    2d70:	95 1f       	adc	r25, r21
    2d72:	80 53       	subi	r24, 0x30	; 48
    2d74:	98 4f       	sbci	r25, 0xF8	; 248
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	80 83       	st	Z, r24
}
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <ADC_To_Angle>:
uint8 ADC_To_Angle(uint8 copy_ADC_val)
{
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <ADC_To_Angle+0x6>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Angle =0;
    2d8e:	19 82       	std	Y+1, r1	; 0x01
	Angle=copy_ADC_val*180/255;
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	84 eb       	ldi	r24, 0xB4	; 180
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	ac 01       	movw	r20, r24
    2d9c:	24 9f       	mul	r18, r20
    2d9e:	c0 01       	movw	r24, r0
    2da0:	25 9f       	mul	r18, r21
    2da2:	90 0d       	add	r25, r0
    2da4:	34 9f       	mul	r19, r20
    2da6:	90 0d       	add	r25, r0
    2da8:	11 24       	eor	r1, r1
    2daa:	2f ef       	ldi	r18, 0xFF	; 255
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	b9 01       	movw	r22, r18
    2db0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divmodhi4>
    2db4:	cb 01       	movw	r24, r22
    2db6:	89 83       	std	Y+1, r24	; 0x01
	return Angle;
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <main>:

static uint8 ComparePasswords(uint8 *pass1 , uint8 *pass2 );


int main (void)
{
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	c7 50       	subi	r28, 0x07	; 7
    2dd2:	d1 40       	sbci	r29, 0x01	; 1
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);//LCD data
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	6f ef       	ldi	r22, 0xFF	; 255
    2de2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_SetPortDirection>
	setPinDirection(DIO_PORTA,PIN5,OUTPUT);// LCD EN
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	65 e0       	ldi	r22, 0x05	; 5
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	0e 94 bd 08 	call	0x117a	; 0x117a <setPinDirection>
	setPinDirection(DIO_PORTA,PIN6,OUTPUT); // LCD R/W
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	66 e0       	ldi	r22, 0x06	; 6
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 bd 08 	call	0x117a	; 0x117a <setPinDirection>
	setPinDirection(DIO_PORTA,PIN7,OUTPUT); //LCD RS
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	67 e0       	ldi	r22, 0x07	; 7
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
    2e00:	0e 94 bd 08 	call	0x117a	; 0x117a <setPinDirection>
	DIO_SetPortDirection(DIO_PORTC, KEYPAD_Direction);
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	60 ef       	ldi	r22, 0xF0	; 240
    2e08:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_SetPortDirection>
	DIO_SetPortValue(DIO_PORTC,KEYPAD_Value);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	6f ef       	ldi	r22, 0xFF	; 255
    2e10:	0e 94 23 0b 	call	0x1646	; 0x1646 <DIO_SetPortValue>
	setPinDirection(DIO_PORTD,PIN7,OUTPUT);//Lights
    2e14:	83 e0       	ldi	r24, 0x03	; 3
    2e16:	67 e0       	ldi	r22, 0x07	; 7
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	0e 94 bd 08 	call	0x117a	; 0x117a <setPinDirection>
	setPinDirection(DIO_PORTD,PIN4,OUTPUT);//Fan
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	64 e0       	ldi	r22, 0x04	; 4
    2e22:	41 e0       	ldi	r20, 0x01	; 1
    2e24:	0e 94 bd 08 	call	0x117a	; 0x117a <setPinDirection>
	setPinDirection(DIO_PORTD,PIN5,OUTPUT);//Servo motor
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	65 e0       	ldi	r22, 0x05	; 5
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 bd 08 	call	0x117a	; 0x117a <setPinDirection>
	ADC_init();
    2e32:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	LCD_init();
    2e36:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_init>
	uint8 valueADC=0;
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e3 50       	subi	r30, 0x03	; 3
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	10 82       	st	Z, r1
	uint32 analogue=0;
    2e42:	fe 01       	movw	r30, r28
    2e44:	e7 50       	subi	r30, 0x07	; 7
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	10 82       	st	Z, r1
    2e4a:	11 82       	std	Z+1, r1	; 0x01
    2e4c:	12 82       	std	Z+2, r1	; 0x02
    2e4e:	13 82       	std	Z+3, r1	; 0x03
	uint8 temprature=0;
    2e50:	fe 01       	movw	r30, r28
    2e52:	e8 50       	subi	r30, 0x08	; 8
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	10 82       	st	Z, r1
	uint8 passReal[4]={'4','3','2','1'};
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e2 50       	subi	r30, 0x02	; 2
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	84 e3       	ldi	r24, 0x34	; 52
    2e60:	80 83       	st	Z, r24
    2e62:	fe 01       	movw	r30, r28
    2e64:	e2 50       	subi	r30, 0x02	; 2
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	83 e3       	ldi	r24, 0x33	; 51
    2e6a:	81 83       	std	Z+1, r24	; 0x01
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e2 50       	subi	r30, 0x02	; 2
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	82 e3       	ldi	r24, 0x32	; 50
    2e74:	82 83       	std	Z+2, r24	; 0x02
    2e76:	fe 01       	movw	r30, r28
    2e78:	e2 50       	subi	r30, 0x02	; 2
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	81 e3       	ldi	r24, 0x31	; 49
    2e7e:	83 83       	std	Z+3, r24	; 0x03
	uint8 passArr[4];
	uint8 passStatus=2;
    2e80:	fe 01       	movw	r30, r28
    2e82:	e9 50       	subi	r30, 0x09	; 9
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	80 83       	st	Z, r24
	uint8 iterator=0;
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ea 50       	subi	r30, 0x0A	; 10
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	10 82       	st	Z, r1
	uint8 choosenOption =0;
    2e92:	fe 01       	movw	r30, r28
    2e94:	eb 50       	subi	r30, 0x0B	; 11
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	10 82       	st	Z, r1
	uint8 trials=0;
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ec 50       	subi	r30, 0x0C	; 12
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	10 82       	st	Z, r1
	uint8 angle=0;
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ed 50       	subi	r30, 0x0D	; 13
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	10 82       	st	Z, r1

	LCD_SendString("Welcome To SMART HOME");
    2eaa:	80 e6       	ldi	r24, 0x60	; 96
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e5 51       	subi	r30, 0x15	; 21
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e8       	ldi	r25, 0x80	; 128
    2ebc:	ab eb       	ldi	r26, 0xBB	; 187
    2ebe:	b4 e4       	ldi	r27, 0x44	; 68
    2ec0:	80 83       	st	Z, r24
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	a2 83       	std	Z+2, r26	; 0x02
    2ec6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec8:	8e 01       	movw	r16, r28
    2eca:	09 51       	subi	r16, 0x19	; 25
    2ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e5 51       	subi	r30, 0x15	; 21
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4a e7       	ldi	r20, 0x7A	; 122
    2ee2:	55 e4       	ldi	r21, 0x45	; 69
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	f8 01       	movw	r30, r16
    2eee:	80 83       	st	Z, r24
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	a2 83       	std	Z+2, r26	; 0x02
    2ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e9 51       	subi	r30, 0x19	; 25
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e8       	ldi	r20, 0x80	; 128
    2f0a:	5f e3       	ldi	r21, 0x3F	; 63
    2f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f10:	88 23       	and	r24, r24
    2f12:	44 f4       	brge	.+16     	; 0x2f24 <main+0x160>
		__ticks = 1;
    2f14:	fe 01       	movw	r30, r28
    2f16:	eb 51       	subi	r30, 0x1B	; 27
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    2f22:	64 c0       	rjmp	.+200    	; 0x2fec <main+0x228>
	else if (__tmp > 65535)
    2f24:	fe 01       	movw	r30, r28
    2f26:	e9 51       	subi	r30, 0x19	; 25
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	0c f0       	brlt	.+2      	; 0x2f44 <main+0x180>
    2f42:	43 c0       	rjmp	.+134    	; 0x2fca <main+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	fe 01       	movw	r30, r28
    2f46:	e5 51       	subi	r30, 0x15	; 21
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e2       	ldi	r20, 0x20	; 32
    2f58:	51 e4       	ldi	r21, 0x41	; 65
    2f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	8e 01       	movw	r16, r28
    2f64:	0b 51       	subi	r16, 0x1B	; 27
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	f8 01       	movw	r30, r16
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
    2f7a:	1f c0       	rjmp	.+62     	; 0x2fba <main+0x1f6>
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ed 51       	subi	r30, 0x1D	; 29
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	80 e9       	ldi	r24, 0x90	; 144
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 51       	subi	r30, 0x1D	; 29
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	91 81       	ldd	r25, Z+1	; 0x01
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <main+0x1d0>
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ed 51       	subi	r30, 0x1D	; 29
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	de 01       	movw	r26, r28
    2fa4:	ab 51       	subi	r26, 0x1B	; 27
    2fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa8:	fe 01       	movw	r30, r28
    2faa:	eb 51       	subi	r30, 0x1B	; 27
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	11 96       	adiw	r26, 0x01	; 1
    2fb6:	9c 93       	st	X, r25
    2fb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	fe 01       	movw	r30, r28
    2fbc:	eb 51       	subi	r30, 0x1B	; 27
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	91 81       	ldd	r25, Z+1	; 0x01
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	d1 f6       	brne	.-76     	; 0x2f7c <main+0x1b8>
    2fc8:	27 c0       	rjmp	.+78     	; 0x3018 <main+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	8e 01       	movw	r16, r28
    2fcc:	0b 51       	subi	r16, 0x1B	; 27
    2fce:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e9 51       	subi	r30, 0x19	; 25
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	60 81       	ld	r22, Z
    2fd8:	71 81       	ldd	r23, Z+1	; 0x01
    2fda:	82 81       	ldd	r24, Z+2	; 0x02
    2fdc:	93 81       	ldd	r25, Z+3	; 0x03
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    2fec:	de 01       	movw	r26, r28
    2fee:	af 51       	subi	r26, 0x1F	; 31
    2ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	eb 51       	subi	r30, 0x1B	; 27
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	8d 93       	st	X+, r24
    2ffe:	9c 93       	st	X, r25
    3000:	fe 01       	movw	r30, r28
    3002:	ef 51       	subi	r30, 0x1F	; 31
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <main+0x246>
    300e:	fe 01       	movw	r30, r28
    3010:	ef 51       	subi	r30, 0x1F	; 31
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCD_ClearDisplay();
    3018:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    301c:	fe 01       	movw	r30, r28
    301e:	e3 52       	subi	r30, 0x23	; 35
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	b0 e4       	ldi	r27, 0x40	; 64
    302a:	80 83       	st	Z, r24
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	a2 83       	std	Z+2, r26	; 0x02
    3030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3032:	8e 01       	movw	r16, r28
    3034:	07 52       	subi	r16, 0x27	; 39
    3036:	1f 4f       	sbci	r17, 0xFF	; 255
    3038:	fe 01       	movw	r30, r28
    303a:	e3 52       	subi	r30, 0x23	; 35
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a e7       	ldi	r20, 0x7A	; 122
    304c:	55 e4       	ldi	r21, 0x45	; 69
    304e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	f8 01       	movw	r30, r16
    3058:	80 83       	st	Z, r24
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	a2 83       	std	Z+2, r26	; 0x02
    305e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3060:	fe 01       	movw	r30, r28
    3062:	e7 52       	subi	r30, 0x27	; 39
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	60 81       	ld	r22, Z
    3068:	71 81       	ldd	r23, Z+1	; 0x01
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e8       	ldi	r20, 0x80	; 128
    3074:	5f e3       	ldi	r21, 0x3F	; 63
    3076:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	44 f4       	brge	.+16     	; 0x308e <main+0x2ca>
		__ticks = 1;
    307e:	fe 01       	movw	r30, r28
    3080:	e9 52       	subi	r30, 0x29	; 41
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	80 83       	st	Z, r24
    308c:	64 c0       	rjmp	.+200    	; 0x3156 <main+0x392>
	else if (__tmp > 65535)
    308e:	fe 01       	movw	r30, r28
    3090:	e7 52       	subi	r30, 0x27	; 39
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	0c f0       	brlt	.+2      	; 0x30ae <main+0x2ea>
    30ac:	43 c0       	rjmp	.+134    	; 0x3134 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	fe 01       	movw	r30, r28
    30b0:	e3 52       	subi	r30, 0x23	; 35
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e2       	ldi	r20, 0x20	; 32
    30c2:	51 e4       	ldi	r21, 0x41	; 65
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	8e 01       	movw	r16, r28
    30ce:	09 52       	subi	r16, 0x29	; 41
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	f8 01       	movw	r30, r16
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	1f c0       	rjmp	.+62     	; 0x3124 <main+0x360>
    30e6:	fe 01       	movw	r30, r28
    30e8:	eb 52       	subi	r30, 0x2B	; 43
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 e9       	ldi	r24, 0x90	; 144
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	fe 01       	movw	r30, r28
    30f6:	eb 52       	subi	r30, 0x2B	; 43
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <main+0x33a>
    3102:	fe 01       	movw	r30, r28
    3104:	eb 52       	subi	r30, 0x2B	; 43
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	de 01       	movw	r26, r28
    310e:	a9 52       	subi	r26, 0x29	; 41
    3110:	bf 4f       	sbci	r27, 0xFF	; 255
    3112:	fe 01       	movw	r30, r28
    3114:	e9 52       	subi	r30, 0x29	; 41
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	11 96       	adiw	r26, 0x01	; 1
    3120:	9c 93       	st	X, r25
    3122:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3124:	fe 01       	movw	r30, r28
    3126:	e9 52       	subi	r30, 0x29	; 41
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	d1 f6       	brne	.-76     	; 0x30e6 <main+0x322>
    3132:	27 c0       	rjmp	.+78     	; 0x3182 <main+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	8e 01       	movw	r16, r28
    3136:	09 52       	subi	r16, 0x29	; 41
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
    313a:	fe 01       	movw	r30, r28
    313c:	e7 52       	subi	r30, 0x27	; 39
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	f8 01       	movw	r30, r16
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	80 83       	st	Z, r24
    3156:	de 01       	movw	r26, r28
    3158:	ad 52       	subi	r26, 0x2D	; 45
    315a:	bf 4f       	sbci	r27, 0xFF	; 255
    315c:	fe 01       	movw	r30, r28
    315e:	e9 52       	subi	r30, 0x29	; 41
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	8d 93       	st	X+, r24
    3168:	9c 93       	st	X, r25
    316a:	fe 01       	movw	r30, r28
    316c:	ed 52       	subi	r30, 0x2D	; 45
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <main+0x3b0>
    3178:	fe 01       	movw	r30, r28
    317a:	ed 52       	subi	r30, 0x2D	; 45
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_SendString("Enter Password");
    3182:	86 e7       	ldi	r24, 0x76	; 118
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
	LCD_GoToXY(SecondLine, 0);
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
    3192:	2b c0       	rjmp	.+86     	; 0x31ea <main+0x426>
	while(iterator<4)
	{
		do
		{
			passArr[iterator]=get_button_pressed();
    3194:	fe 01       	movw	r30, r28
    3196:	ea 50       	subi	r30, 0x0A	; 10
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	08 2f       	mov	r16, r24
    319e:	10 e0       	ldi	r17, 0x00	; 0
    31a0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <get_button_pressed>
    31a4:	28 2f       	mov	r18, r24
    31a6:	ce 01       	movw	r24, r28
    31a8:	8e 5f       	subi	r24, 0xFE	; 254
    31aa:	9e 4f       	sbci	r25, 0xFE	; 254
    31ac:	fc 01       	movw	r30, r24
    31ae:	e0 0f       	add	r30, r16
    31b0:	f1 1f       	adc	r31, r17
    31b2:	20 83       	st	Z, r18

		}while(passArr[iterator]==0xff);
    31b4:	fe 01       	movw	r30, r28
    31b6:	ea 50       	subi	r30, 0x0A	; 10
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	ce 01       	movw	r24, r28
    31c2:	8e 5f       	subi	r24, 0xFE	; 254
    31c4:	9e 4f       	sbci	r25, 0xFE	; 254
    31c6:	fc 01       	movw	r30, r24
    31c8:	e2 0f       	add	r30, r18
    31ca:	f3 1f       	adc	r31, r19
    31cc:	80 81       	ld	r24, Z
    31ce:	8f 3f       	cpi	r24, 0xFF	; 255
    31d0:	09 f3       	breq	.-62     	; 0x3194 <main+0x3d0>
		LCD_Write_data('*');
    31d2:	8a e2       	ldi	r24, 0x2A	; 42
    31d4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
		iterator++;
    31d8:	de 01       	movw	r26, r28
    31da:	aa 50       	subi	r26, 0x0A	; 10
    31dc:	bf 4f       	sbci	r27, 0xFF	; 255
    31de:	fe 01       	movw	r30, r28
    31e0:	ea 50       	subi	r30, 0x0A	; 10
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 5f       	subi	r24, 0xFF	; 255
    31e8:	8c 93       	st	X, r24
	_delay_ms(1500);
	LCD_ClearDisplay();
	_delay_ms(2);
	LCD_SendString("Enter Password");
	LCD_GoToXY(SecondLine, 0);
	while(iterator<4)
    31ea:	fe 01       	movw	r30, r28
    31ec:	ea 50       	subi	r30, 0x0A	; 10
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	84 30       	cpi	r24, 0x04	; 4
    31f4:	78 f2       	brcs	.-98     	; 0x3194 <main+0x3d0>
    31f6:	fe 01       	movw	r30, r28
    31f8:	e1 53       	subi	r30, 0x31	; 49
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	aa ef       	ldi	r26, 0xFA	; 250
    3202:	b3 e4       	ldi	r27, 0x43	; 67
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320c:	8e 01       	movw	r16, r28
    320e:	05 53       	subi	r16, 0x35	; 53
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	fe 01       	movw	r30, r28
    3214:	e1 53       	subi	r30, 0x31	; 49
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	55 e4       	ldi	r21, 0x45	; 69
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	f8 01       	movw	r30, r16
    3232:	80 83       	st	Z, r24
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	a2 83       	std	Z+2, r26	; 0x02
    3238:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    323a:	fe 01       	movw	r30, r28
    323c:	e5 53       	subi	r30, 0x35	; 53
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	60 81       	ld	r22, Z
    3242:	71 81       	ldd	r23, Z+1	; 0x01
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e8       	ldi	r20, 0x80	; 128
    324e:	5f e3       	ldi	r21, 0x3F	; 63
    3250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3254:	88 23       	and	r24, r24
    3256:	44 f4       	brge	.+16     	; 0x3268 <main+0x4a4>
		__ticks = 1;
    3258:	fe 01       	movw	r30, r28
    325a:	e7 53       	subi	r30, 0x37	; 55
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	80 83       	st	Z, r24
    3266:	64 c0       	rjmp	.+200    	; 0x3330 <main+0x56c>
	else if (__tmp > 65535)
    3268:	fe 01       	movw	r30, r28
    326a:	e5 53       	subi	r30, 0x35	; 53
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	3f ef       	ldi	r19, 0xFF	; 255
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	57 e4       	ldi	r21, 0x47	; 71
    327e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	0c f0       	brlt	.+2      	; 0x3288 <main+0x4c4>
    3286:	43 c0       	rjmp	.+134    	; 0x330e <main+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3288:	fe 01       	movw	r30, r28
    328a:	e1 53       	subi	r30, 0x31	; 49
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	60 81       	ld	r22, Z
    3290:	71 81       	ldd	r23, Z+1	; 0x01
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	8e 01       	movw	r16, r28
    32a8:	07 53       	subi	r16, 0x37	; 55
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	f8 01       	movw	r30, r16
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	80 83       	st	Z, r24
    32be:	1f c0       	rjmp	.+62     	; 0x32fe <main+0x53a>
    32c0:	fe 01       	movw	r30, r28
    32c2:	e9 53       	subi	r30, 0x39	; 57
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 e9       	ldi	r24, 0x90	; 144
    32c8:	91 e0       	ldi	r25, 0x01	; 1
    32ca:	91 83       	std	Z+1, r25	; 0x01
    32cc:	80 83       	st	Z, r24
    32ce:	fe 01       	movw	r30, r28
    32d0:	e9 53       	subi	r30, 0x39	; 57
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <main+0x514>
    32dc:	fe 01       	movw	r30, r28
    32de:	e9 53       	subi	r30, 0x39	; 57
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e6:	de 01       	movw	r26, r28
    32e8:	a7 53       	subi	r26, 0x37	; 55
    32ea:	bf 4f       	sbci	r27, 0xFF	; 255
    32ec:	fe 01       	movw	r30, r28
    32ee:	e7 53       	subi	r30, 0x37	; 55
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	11 96       	adiw	r26, 0x01	; 1
    32fa:	9c 93       	st	X, r25
    32fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fe:	fe 01       	movw	r30, r28
    3300:	e7 53       	subi	r30, 0x37	; 55
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	00 97       	sbiw	r24, 0x00	; 0
    330a:	d1 f6       	brne	.-76     	; 0x32c0 <main+0x4fc>
    330c:	27 c0       	rjmp	.+78     	; 0x335c <main+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330e:	8e 01       	movw	r16, r28
    3310:	07 53       	subi	r16, 0x37	; 55
    3312:	1f 4f       	sbci	r17, 0xFF	; 255
    3314:	fe 01       	movw	r30, r28
    3316:	e5 53       	subi	r30, 0x35	; 53
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	60 81       	ld	r22, Z
    331c:	71 81       	ldd	r23, Z+1	; 0x01
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	93 81       	ldd	r25, Z+3	; 0x03
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	f8 01       	movw	r30, r16
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
    3330:	de 01       	movw	r26, r28
    3332:	ab 53       	subi	r26, 0x3B	; 59
    3334:	bf 4f       	sbci	r27, 0xFF	; 255
    3336:	fe 01       	movw	r30, r28
    3338:	e7 53       	subi	r30, 0x37	; 55
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 81       	ld	r24, Z
    333e:	91 81       	ldd	r25, Z+1	; 0x01
    3340:	8d 93       	st	X+, r24
    3342:	9c 93       	st	X, r25
    3344:	fe 01       	movw	r30, r28
    3346:	eb 53       	subi	r30, 0x3B	; 59
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <main+0x58a>
    3352:	fe 01       	movw	r30, r28
    3354:	eb 53       	subi	r30, 0x3B	; 59
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	91 83       	std	Z+1, r25	; 0x01
    335a:	80 83       	st	Z, r24
		}while(passArr[iterator]==0xff);
		LCD_Write_data('*');
		iterator++;
	}
	_delay_ms(500);
	LCD_ClearDisplay();
    335c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    3360:	fe 01       	movw	r30, r28
    3362:	ef 53       	subi	r30, 0x3F	; 63
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	a0 e0       	ldi	r26, 0x00	; 0
    336c:	b0 e4       	ldi	r27, 0x40	; 64
    336e:	80 83       	st	Z, r24
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	a2 83       	std	Z+2, r26	; 0x02
    3374:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	8e 01       	movw	r16, r28
    3378:	03 54       	subi	r16, 0x43	; 67
    337a:	1f 4f       	sbci	r17, 0xFF	; 255
    337c:	fe 01       	movw	r30, r28
    337e:	ef 53       	subi	r30, 0x3F	; 63
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a e7       	ldi	r20, 0x7A	; 122
    3390:	55 e4       	ldi	r21, 0x45	; 69
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	80 83       	st	Z, r24
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	a2 83       	std	Z+2, r26	; 0x02
    33a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a4:	fe 01       	movw	r30, r28
    33a6:	e3 54       	subi	r30, 0x43	; 67
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	44 f4       	brge	.+16     	; 0x33d2 <main+0x60e>
		__ticks = 1;
    33c2:	fe 01       	movw	r30, r28
    33c4:	e5 54       	subi	r30, 0x45	; 69
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	80 83       	st	Z, r24
    33d0:	64 c0       	rjmp	.+200    	; 0x349a <main+0x6d6>
	else if (__tmp > 65535)
    33d2:	fe 01       	movw	r30, r28
    33d4:	e3 54       	subi	r30, 0x43	; 67
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	0c f0       	brlt	.+2      	; 0x33f2 <main+0x62e>
    33f0:	43 c0       	rjmp	.+134    	; 0x3478 <main+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f2:	fe 01       	movw	r30, r28
    33f4:	ef 53       	subi	r30, 0x3F	; 63
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e2       	ldi	r20, 0x20	; 32
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	8e 01       	movw	r16, r28
    3412:	05 54       	subi	r16, 0x45	; 69
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	f8 01       	movw	r30, r16
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	80 83       	st	Z, r24
    3428:	1f c0       	rjmp	.+62     	; 0x3468 <main+0x6a4>
    342a:	fe 01       	movw	r30, r28
    342c:	e7 54       	subi	r30, 0x47	; 71
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 e9       	ldi	r24, 0x90	; 144
    3432:	91 e0       	ldi	r25, 0x01	; 1
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	fe 01       	movw	r30, r28
    343a:	e7 54       	subi	r30, 0x47	; 71
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 81       	ld	r24, Z
    3440:	91 81       	ldd	r25, Z+1	; 0x01
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <main+0x67e>
    3446:	fe 01       	movw	r30, r28
    3448:	e7 54       	subi	r30, 0x47	; 71
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3450:	de 01       	movw	r26, r28
    3452:	a5 54       	subi	r26, 0x45	; 69
    3454:	bf 4f       	sbci	r27, 0xFF	; 255
    3456:	fe 01       	movw	r30, r28
    3458:	e5 54       	subi	r30, 0x45	; 69
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	9c 93       	st	X, r25
    3466:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3468:	fe 01       	movw	r30, r28
    346a:	e5 54       	subi	r30, 0x45	; 69
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 81       	ld	r24, Z
    3470:	91 81       	ldd	r25, Z+1	; 0x01
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	d1 f6       	brne	.-76     	; 0x342a <main+0x666>
    3476:	27 c0       	rjmp	.+78     	; 0x34c6 <main+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	8e 01       	movw	r16, r28
    347a:	05 54       	subi	r16, 0x45	; 69
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	fe 01       	movw	r30, r28
    3480:	e3 54       	subi	r30, 0x43	; 67
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	60 81       	ld	r22, Z
    3486:	71 81       	ldd	r23, Z+1	; 0x01
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	93 81       	ldd	r25, Z+3	; 0x03
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	f8 01       	movw	r30, r16
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	80 83       	st	Z, r24
    349a:	de 01       	movw	r26, r28
    349c:	a9 54       	subi	r26, 0x49	; 73
    349e:	bf 4f       	sbci	r27, 0xFF	; 255
    34a0:	fe 01       	movw	r30, r28
    34a2:	e5 54       	subi	r30, 0x45	; 69
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 81       	ld	r24, Z
    34a8:	91 81       	ldd	r25, Z+1	; 0x01
    34aa:	8d 93       	st	X+, r24
    34ac:	9c 93       	st	X, r25
    34ae:	fe 01       	movw	r30, r28
    34b0:	e9 54       	subi	r30, 0x49	; 73
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	91 81       	ldd	r25, Z+1	; 0x01
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <main+0x6f4>
    34bc:	fe 01       	movw	r30, r28
    34be:	e9 54       	subi	r30, 0x49	; 73
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	80 83       	st	Z, r24
	_delay_ms(2);

	/*control servo motor using potentiometer*/
	uint32 iterator_time=40000;
    34c6:	fe 01       	movw	r30, r28
    34c8:	e1 51       	subi	r30, 0x11	; 17
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	80 e4       	ldi	r24, 0x40	; 64
    34ce:	9c e9       	ldi	r25, 0x9C	; 156
    34d0:	a0 e0       	ldi	r26, 0x00	; 0
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	80 83       	st	Z, r24
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	a2 83       	std	Z+2, r26	; 0x02
    34da:	b3 83       	std	Z+3, r27	; 0x03
	LCD_SendString("Adjust Servo");
    34dc:	85 e8       	ldi	r24, 0x85	; 133
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    34e4:	fe 01       	movw	r30, r28
    34e6:	ed 54       	subi	r30, 0x4D	; 77
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	aa e7       	ldi	r26, 0x7A	; 122
    34f0:	b4 e4       	ldi	r27, 0x44	; 68
    34f2:	80 83       	st	Z, r24
    34f4:	91 83       	std	Z+1, r25	; 0x01
    34f6:	a2 83       	std	Z+2, r26	; 0x02
    34f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fa:	8e 01       	movw	r16, r28
    34fc:	01 55       	subi	r16, 0x51	; 81
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	fe 01       	movw	r30, r28
    3502:	ed 54       	subi	r30, 0x4D	; 77
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	4a e7       	ldi	r20, 0x7A	; 122
    3514:	55 e4       	ldi	r21, 0x45	; 69
    3516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	f8 01       	movw	r30, r16
    3520:	80 83       	st	Z, r24
    3522:	91 83       	std	Z+1, r25	; 0x01
    3524:	a2 83       	std	Z+2, r26	; 0x02
    3526:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3528:	fe 01       	movw	r30, r28
    352a:	e1 55       	subi	r30, 0x51	; 81
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	60 81       	ld	r22, Z
    3530:	71 81       	ldd	r23, Z+1	; 0x01
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	93 81       	ldd	r25, Z+3	; 0x03
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	44 f4       	brge	.+16     	; 0x3556 <main+0x792>
		__ticks = 1;
    3546:	fe 01       	movw	r30, r28
    3548:	e3 55       	subi	r30, 0x53	; 83
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	80 83       	st	Z, r24
    3554:	64 c0       	rjmp	.+200    	; 0x361e <main+0x85a>
	else if (__tmp > 65535)
    3556:	fe 01       	movw	r30, r28
    3558:	e1 55       	subi	r30, 0x51	; 81
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	3f ef       	ldi	r19, 0xFF	; 255
    3568:	4f e7       	ldi	r20, 0x7F	; 127
    356a:	57 e4       	ldi	r21, 0x47	; 71
    356c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3570:	18 16       	cp	r1, r24
    3572:	0c f0       	brlt	.+2      	; 0x3576 <main+0x7b2>
    3574:	43 c0       	rjmp	.+134    	; 0x35fc <main+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3576:	fe 01       	movw	r30, r28
    3578:	ed 54       	subi	r30, 0x4D	; 77
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e2       	ldi	r20, 0x20	; 32
    358a:	51 e4       	ldi	r21, 0x41	; 65
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8e 01       	movw	r16, r28
    3596:	03 55       	subi	r16, 0x53	; 83
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	f8 01       	movw	r30, r16
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
    35ac:	1f c0       	rjmp	.+62     	; 0x35ec <main+0x828>
    35ae:	fe 01       	movw	r30, r28
    35b0:	e5 55       	subi	r30, 0x55	; 85
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 e9       	ldi	r24, 0x90	; 144
    35b6:	91 e0       	ldi	r25, 0x01	; 1
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	80 83       	st	Z, r24
    35bc:	fe 01       	movw	r30, r28
    35be:	e5 55       	subi	r30, 0x55	; 85
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 81       	ld	r24, Z
    35c4:	91 81       	ldd	r25, Z+1	; 0x01
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <main+0x802>
    35ca:	fe 01       	movw	r30, r28
    35cc:	e5 55       	subi	r30, 0x55	; 85
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	de 01       	movw	r26, r28
    35d6:	a3 55       	subi	r26, 0x53	; 83
    35d8:	bf 4f       	sbci	r27, 0xFF	; 255
    35da:	fe 01       	movw	r30, r28
    35dc:	e3 55       	subi	r30, 0x53	; 83
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	91 81       	ldd	r25, Z+1	; 0x01
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	11 96       	adiw	r26, 0x01	; 1
    35e8:	9c 93       	st	X, r25
    35ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ec:	fe 01       	movw	r30, r28
    35ee:	e3 55       	subi	r30, 0x53	; 83
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	d1 f6       	brne	.-76     	; 0x35ae <main+0x7ea>
    35fa:	27 c0       	rjmp	.+78     	; 0x364a <main+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fc:	8e 01       	movw	r16, r28
    35fe:	03 55       	subi	r16, 0x53	; 83
    3600:	1f 4f       	sbci	r17, 0xFF	; 255
    3602:	fe 01       	movw	r30, r28
    3604:	e1 55       	subi	r30, 0x51	; 81
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	f8 01       	movw	r30, r16
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	80 83       	st	Z, r24
    361e:	de 01       	movw	r26, r28
    3620:	a7 55       	subi	r26, 0x57	; 87
    3622:	bf 4f       	sbci	r27, 0xFF	; 255
    3624:	fe 01       	movw	r30, r28
    3626:	e3 55       	subi	r30, 0x53	; 83
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 81       	ld	r24, Z
    362c:	91 81       	ldd	r25, Z+1	; 0x01
    362e:	8d 93       	st	X+, r24
    3630:	9c 93       	st	X, r25
    3632:	fe 01       	movw	r30, r28
    3634:	e7 55       	subi	r30, 0x57	; 87
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	f1 f7       	brne	.-4      	; 0x363c <main+0x878>
    3640:	fe 01       	movw	r30, r28
    3642:	e7 55       	subi	r30, 0x57	; 87
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_ClearDisplay();
    364a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    364e:	29 c0       	rjmp	.+82     	; 0x36a2 <main+0x8de>
	while(iterator_time)
	{
		valueADC=ADC_StartConversion(ADC0);
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	0e 94 64 07 	call	0xec8	; 0xec8 <ADC_StartConversion>
    3656:	fe 01       	movw	r30, r28
    3658:	e3 50       	subi	r30, 0x03	; 3
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	80 83       	st	Z, r24
		angle=ADC_To_Angle(valueADC);
    365e:	fe 01       	movw	r30, r28
    3660:	e3 50       	subi	r30, 0x03	; 3
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	80 81       	ld	r24, Z
    3666:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <ADC_To_Angle>
    366a:	fe 01       	movw	r30, r28
    366c:	ed 50       	subi	r30, 0x0D	; 13
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 83       	st	Z, r24
		Timer1_Servo(angle);
    3672:	fe 01       	movw	r30, r28
    3674:	ed 50       	subi	r30, 0x0D	; 13
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 81       	ld	r24, Z
    367a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Timer1_Servo>
		iterator_time--;
    367e:	9e 01       	movw	r18, r28
    3680:	21 51       	subi	r18, 0x11	; 17
    3682:	3f 4f       	sbci	r19, 0xFF	; 255
    3684:	fe 01       	movw	r30, r28
    3686:	e1 51       	subi	r30, 0x11	; 17
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	a2 81       	ldd	r26, Z+2	; 0x02
    3690:	b3 81       	ldd	r27, Z+3	; 0x03
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	a1 09       	sbc	r26, r1
    3696:	b1 09       	sbc	r27, r1
    3698:	f9 01       	movw	r30, r18
    369a:	80 83       	st	Z, r24
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	a2 83       	std	Z+2, r26	; 0x02
    36a0:	b3 83       	std	Z+3, r27	; 0x03
	/*control servo motor using potentiometer*/
	uint32 iterator_time=40000;
	LCD_SendString("Adjust Servo");
	_delay_ms(1000);
	LCD_ClearDisplay();
	while(iterator_time)
    36a2:	fe 01       	movw	r30, r28
    36a4:	e1 51       	subi	r30, 0x11	; 17
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 81       	ld	r24, Z
    36aa:	91 81       	ldd	r25, Z+1	; 0x01
    36ac:	a2 81       	ldd	r26, Z+2	; 0x02
    36ae:	b3 81       	ldd	r27, Z+3	; 0x03
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	a1 05       	cpc	r26, r1
    36b4:	b1 05       	cpc	r27, r1
    36b6:	61 f6       	brne	.-104    	; 0x3650 <main+0x88c>
	}

	while(1)
	{

		passStatus = ComparePasswords(passReal,passArr);
    36b8:	ce 01       	movw	r24, r28
    36ba:	82 50       	subi	r24, 0x02	; 2
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	9e 01       	movw	r18, r28
    36c0:	2e 5f       	subi	r18, 0xFE	; 254
    36c2:	3e 4f       	sbci	r19, 0xFE	; 254
    36c4:	b9 01       	movw	r22, r18
    36c6:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <ComparePasswords>
    36ca:	fe 01       	movw	r30, r28
    36cc:	e9 50       	subi	r30, 0x09	; 9
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 83       	st	Z, r24
		if(passStatus==FALSE)
    36d2:	fe 01       	movw	r30, r28
    36d4:	e9 50       	subi	r30, 0x09	; 9
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	88 23       	and	r24, r24
    36dc:	09 f0       	breq	.+2      	; 0x36e0 <main+0x91c>
    36de:	25 c3       	rjmp	.+1610   	; 0x3d2a <main+0xf66>
		{
			trials++;
    36e0:	de 01       	movw	r26, r28
    36e2:	ac 50       	subi	r26, 0x0C	; 12
    36e4:	bf 4f       	sbci	r27, 0xFF	; 255
    36e6:	fe 01       	movw	r30, r28
    36e8:	ec 50       	subi	r30, 0x0C	; 12
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	8c 93       	st	X, r24
			if(trials==3)
    36f2:	fe 01       	movw	r30, r28
    36f4:	ec 50       	subi	r30, 0x0C	; 12
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 81       	ld	r24, Z
    36fa:	83 30       	cpi	r24, 0x03	; 3
    36fc:	11 f4       	brne	.+4      	; 0x3702 <main+0x93e>
    36fe:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <main+0x1a14>
			{
				break;
			}
			LCD_SendString("Wrong Password");
    3702:	82 e9       	ldi	r24, 0x92	; 146
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    370a:	fe 01       	movw	r30, r28
    370c:	eb 55       	subi	r30, 0x5B	; 91
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	aa e7       	ldi	r26, 0x7A	; 122
    3716:	b4 e4       	ldi	r27, 0x44	; 68
    3718:	80 83       	st	Z, r24
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	a2 83       	std	Z+2, r26	; 0x02
    371e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3720:	8e 01       	movw	r16, r28
    3722:	0f 55       	subi	r16, 0x5F	; 95
    3724:	1f 4f       	sbci	r17, 0xFF	; 255
    3726:	fe 01       	movw	r30, r28
    3728:	eb 55       	subi	r30, 0x5B	; 91
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	55 e4       	ldi	r21, 0x45	; 69
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	f8 01       	movw	r30, r16
    3746:	80 83       	st	Z, r24
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	a2 83       	std	Z+2, r26	; 0x02
    374c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    374e:	fe 01       	movw	r30, r28
    3750:	ef 55       	subi	r30, 0x5F	; 95
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	5f e3       	ldi	r21, 0x3F	; 63
    3764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3768:	88 23       	and	r24, r24
    376a:	44 f4       	brge	.+16     	; 0x377c <main+0x9b8>
		__ticks = 1;
    376c:	fe 01       	movw	r30, r28
    376e:	e1 56       	subi	r30, 0x61	; 97
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
    377a:	64 c0       	rjmp	.+200    	; 0x3844 <main+0xa80>
	else if (__tmp > 65535)
    377c:	fe 01       	movw	r30, r28
    377e:	ef 55       	subi	r30, 0x5F	; 95
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	3f ef       	ldi	r19, 0xFF	; 255
    378e:	4f e7       	ldi	r20, 0x7F	; 127
    3790:	57 e4       	ldi	r21, 0x47	; 71
    3792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3796:	18 16       	cp	r1, r24
    3798:	0c f0       	brlt	.+2      	; 0x379c <main+0x9d8>
    379a:	43 c0       	rjmp	.+134    	; 0x3822 <main+0xa5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379c:	fe 01       	movw	r30, r28
    379e:	eb 55       	subi	r30, 0x5B	; 91
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e2       	ldi	r20, 0x20	; 32
    37b0:	51 e4       	ldi	r21, 0x41	; 65
    37b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	8e 01       	movw	r16, r28
    37bc:	01 56       	subi	r16, 0x61	; 97
    37be:	1f 4f       	sbci	r17, 0xFF	; 255
    37c0:	bc 01       	movw	r22, r24
    37c2:	cd 01       	movw	r24, r26
    37c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	f8 01       	movw	r30, r16
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	80 83       	st	Z, r24
    37d2:	1f c0       	rjmp	.+62     	; 0x3812 <main+0xa4e>
    37d4:	fe 01       	movw	r30, r28
    37d6:	e3 56       	subi	r30, 0x63	; 99
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 e9       	ldi	r24, 0x90	; 144
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	80 83       	st	Z, r24
    37e2:	fe 01       	movw	r30, r28
    37e4:	e3 56       	subi	r30, 0x63	; 99
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <main+0xa28>
    37f0:	fe 01       	movw	r30, r28
    37f2:	e3 56       	subi	r30, 0x63	; 99
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fa:	de 01       	movw	r26, r28
    37fc:	a1 56       	subi	r26, 0x61	; 97
    37fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3800:	fe 01       	movw	r30, r28
    3802:	e1 56       	subi	r30, 0x61	; 97
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	11 96       	adiw	r26, 0x01	; 1
    380e:	9c 93       	st	X, r25
    3810:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3812:	fe 01       	movw	r30, r28
    3814:	e1 56       	subi	r30, 0x61	; 97
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 81       	ld	r24, Z
    381a:	91 81       	ldd	r25, Z+1	; 0x01
    381c:	00 97       	sbiw	r24, 0x00	; 0
    381e:	d1 f6       	brne	.-76     	; 0x37d4 <main+0xa10>
    3820:	27 c0       	rjmp	.+78     	; 0x3870 <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3822:	8e 01       	movw	r16, r28
    3824:	01 56       	subi	r16, 0x61	; 97
    3826:	1f 4f       	sbci	r17, 0xFF	; 255
    3828:	fe 01       	movw	r30, r28
    382a:	ef 55       	subi	r30, 0x5F	; 95
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	f8 01       	movw	r30, r16
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	80 83       	st	Z, r24
    3844:	de 01       	movw	r26, r28
    3846:	a5 56       	subi	r26, 0x65	; 101
    3848:	bf 4f       	sbci	r27, 0xFF	; 255
    384a:	fe 01       	movw	r30, r28
    384c:	e1 56       	subi	r30, 0x61	; 97
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	8d 93       	st	X+, r24
    3856:	9c 93       	st	X, r25
    3858:	fe 01       	movw	r30, r28
    385a:	e5 56       	subi	r30, 0x65	; 101
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <main+0xa9e>
    3866:	fe 01       	movw	r30, r28
    3868:	e5 56       	subi	r30, 0x65	; 101
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_ClearDisplay();
    3870:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    3874:	fe 01       	movw	r30, r28
    3876:	e9 56       	subi	r30, 0x69	; 105
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	a0 e0       	ldi	r26, 0x00	; 0
    3880:	b0 e4       	ldi	r27, 0x40	; 64
    3882:	80 83       	st	Z, r24
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	a2 83       	std	Z+2, r26	; 0x02
    3888:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388a:	8e 01       	movw	r16, r28
    388c:	0d 56       	subi	r16, 0x6D	; 109
    388e:	1f 4f       	sbci	r17, 0xFF	; 255
    3890:	fe 01       	movw	r30, r28
    3892:	e9 56       	subi	r30, 0x69	; 105
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	60 81       	ld	r22, Z
    3898:	71 81       	ldd	r23, Z+1	; 0x01
    389a:	82 81       	ldd	r24, Z+2	; 0x02
    389c:	93 81       	ldd	r25, Z+3	; 0x03
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	4a e7       	ldi	r20, 0x7A	; 122
    38a4:	55 e4       	ldi	r21, 0x45	; 69
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	f8 01       	movw	r30, r16
    38b0:	80 83       	st	Z, r24
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	a2 83       	std	Z+2, r26	; 0x02
    38b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38b8:	fe 01       	movw	r30, r28
    38ba:	ed 56       	subi	r30, 0x6D	; 109
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	60 81       	ld	r22, Z
    38c0:	71 81       	ldd	r23, Z+1	; 0x01
    38c2:	82 81       	ldd	r24, Z+2	; 0x02
    38c4:	93 81       	ldd	r25, Z+3	; 0x03
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e8       	ldi	r20, 0x80	; 128
    38cc:	5f e3       	ldi	r21, 0x3F	; 63
    38ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d2:	88 23       	and	r24, r24
    38d4:	44 f4       	brge	.+16     	; 0x38e6 <main+0xb22>
		__ticks = 1;
    38d6:	fe 01       	movw	r30, r28
    38d8:	ef 56       	subi	r30, 0x6F	; 111
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	64 c0       	rjmp	.+200    	; 0x39ae <main+0xbea>
	else if (__tmp > 65535)
    38e6:	fe 01       	movw	r30, r28
    38e8:	ed 56       	subi	r30, 0x6D	; 109
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	82 81       	ldd	r24, Z+2	; 0x02
    38f2:	93 81       	ldd	r25, Z+3	; 0x03
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	4f e7       	ldi	r20, 0x7F	; 127
    38fa:	57 e4       	ldi	r21, 0x47	; 71
    38fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3900:	18 16       	cp	r1, r24
    3902:	0c f0       	brlt	.+2      	; 0x3906 <main+0xb42>
    3904:	43 c0       	rjmp	.+134    	; 0x398c <main+0xbc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	fe 01       	movw	r30, r28
    3908:	e9 56       	subi	r30, 0x69	; 105
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e2       	ldi	r20, 0x20	; 32
    391a:	51 e4       	ldi	r21, 0x41	; 65
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	8e 01       	movw	r16, r28
    3926:	0f 56       	subi	r16, 0x6F	; 111
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	f8 01       	movw	r30, r16
    3938:	91 83       	std	Z+1, r25	; 0x01
    393a:	80 83       	st	Z, r24
    393c:	1f c0       	rjmp	.+62     	; 0x397c <main+0xbb8>
    393e:	fe 01       	movw	r30, r28
    3940:	e1 57       	subi	r30, 0x71	; 113
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 e9       	ldi	r24, 0x90	; 144
    3946:	91 e0       	ldi	r25, 0x01	; 1
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	80 83       	st	Z, r24
    394c:	fe 01       	movw	r30, r28
    394e:	e1 57       	subi	r30, 0x71	; 113
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	80 81       	ld	r24, Z
    3954:	91 81       	ldd	r25, Z+1	; 0x01
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	f1 f7       	brne	.-4      	; 0x3956 <main+0xb92>
    395a:	fe 01       	movw	r30, r28
    395c:	e1 57       	subi	r30, 0x71	; 113
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	91 83       	std	Z+1, r25	; 0x01
    3962:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3964:	de 01       	movw	r26, r28
    3966:	af 56       	subi	r26, 0x6F	; 111
    3968:	bf 4f       	sbci	r27, 0xFF	; 255
    396a:	fe 01       	movw	r30, r28
    396c:	ef 56       	subi	r30, 0x6F	; 111
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	11 96       	adiw	r26, 0x01	; 1
    3978:	9c 93       	st	X, r25
    397a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	fe 01       	movw	r30, r28
    397e:	ef 56       	subi	r30, 0x6F	; 111
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	d1 f6       	brne	.-76     	; 0x393e <main+0xb7a>
    398a:	27 c0       	rjmp	.+78     	; 0x39da <main+0xc16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	8e 01       	movw	r16, r28
    398e:	0f 56       	subi	r16, 0x6F	; 111
    3990:	1f 4f       	sbci	r17, 0xFF	; 255
    3992:	fe 01       	movw	r30, r28
    3994:	ed 56       	subi	r30, 0x6D	; 109
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	60 81       	ld	r22, Z
    399a:	71 81       	ldd	r23, Z+1	; 0x01
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	f8 01       	movw	r30, r16
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	80 83       	st	Z, r24
    39ae:	de 01       	movw	r26, r28
    39b0:	a3 57       	subi	r26, 0x73	; 115
    39b2:	bf 4f       	sbci	r27, 0xFF	; 255
    39b4:	fe 01       	movw	r30, r28
    39b6:	ef 56       	subi	r30, 0x6F	; 111
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	80 81       	ld	r24, Z
    39bc:	91 81       	ldd	r25, Z+1	; 0x01
    39be:	8d 93       	st	X+, r24
    39c0:	9c 93       	st	X, r25
    39c2:	fe 01       	movw	r30, r28
    39c4:	e3 57       	subi	r30, 0x73	; 115
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	80 81       	ld	r24, Z
    39ca:	91 81       	ldd	r25, Z+1	; 0x01
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <main+0xc08>
    39d0:	fe 01       	movw	r30, r28
    39d2:	e3 57       	subi	r30, 0x73	; 115
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	91 83       	std	Z+1, r25	; 0x01
    39d8:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("Enter Pass Again");
    39da:	81 ea       	ldi	r24, 0xA1	; 161
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
			LCD_GoToXY(SecondLine, 3);
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	63 e0       	ldi	r22, 0x03	; 3
    39e6:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
			iterator=0;
    39ea:	fe 01       	movw	r30, r28
    39ec:	ea 50       	subi	r30, 0x0A	; 10
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	10 82       	st	Z, r1
    39f2:	2b c0       	rjmp	.+86     	; 0x3a4a <main+0xc86>
			while(iterator<4)
			{
				do
				{
					passArr[iterator]=get_button_pressed();
    39f4:	fe 01       	movw	r30, r28
    39f6:	ea 50       	subi	r30, 0x0A	; 10
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 81       	ld	r24, Z
    39fc:	08 2f       	mov	r16, r24
    39fe:	10 e0       	ldi	r17, 0x00	; 0
    3a00:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <get_button_pressed>
    3a04:	28 2f       	mov	r18, r24
    3a06:	ce 01       	movw	r24, r28
    3a08:	8e 5f       	subi	r24, 0xFE	; 254
    3a0a:	9e 4f       	sbci	r25, 0xFE	; 254
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	e0 0f       	add	r30, r16
    3a10:	f1 1f       	adc	r31, r17
    3a12:	20 83       	st	Z, r18
				}while(passArr[iterator]==0xff);
    3a14:	fe 01       	movw	r30, r28
    3a16:	ea 50       	subi	r30, 0x0A	; 10
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	28 2f       	mov	r18, r24
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	ce 01       	movw	r24, r28
    3a22:	8e 5f       	subi	r24, 0xFE	; 254
    3a24:	9e 4f       	sbci	r25, 0xFE	; 254
    3a26:	fc 01       	movw	r30, r24
    3a28:	e2 0f       	add	r30, r18
    3a2a:	f3 1f       	adc	r31, r19
    3a2c:	80 81       	ld	r24, Z
    3a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a30:	09 f3       	breq	.-62     	; 0x39f4 <main+0xc30>
				LCD_Write_data('*');
    3a32:	8a e2       	ldi	r24, 0x2A	; 42
    3a34:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_Write_data>
				iterator++;
    3a38:	de 01       	movw	r26, r28
    3a3a:	aa 50       	subi	r26, 0x0A	; 10
    3a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a3e:	fe 01       	movw	r30, r28
    3a40:	ea 50       	subi	r30, 0x0A	; 10
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	8f 5f       	subi	r24, 0xFF	; 255
    3a48:	8c 93       	st	X, r24
			LCD_ClearDisplay();
			_delay_ms(2);
			LCD_SendString("Enter Pass Again");
			LCD_GoToXY(SecondLine, 3);
			iterator=0;
			while(iterator<4)
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ea 50       	subi	r30, 0x0A	; 10
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	80 81       	ld	r24, Z
    3a52:	84 30       	cpi	r24, 0x04	; 4
    3a54:	78 f2       	brcs	.-98     	; 0x39f4 <main+0xc30>
    3a56:	fe 01       	movw	r30, r28
    3a58:	e7 57       	subi	r30, 0x77	; 119
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	aa e7       	ldi	r26, 0x7A	; 122
    3a62:	b4 e4       	ldi	r27, 0x44	; 68
    3a64:	80 83       	st	Z, r24
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	a2 83       	std	Z+2, r26	; 0x02
    3a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6c:	8e 01       	movw	r16, r28
    3a6e:	0b 57       	subi	r16, 0x7B	; 123
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	fe 01       	movw	r30, r28
    3a74:	e7 57       	subi	r30, 0x77	; 119
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	82 81       	ldd	r24, Z+2	; 0x02
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a e7       	ldi	r20, 0x7A	; 122
    3a86:	55 e4       	ldi	r21, 0x45	; 69
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	f8 01       	movw	r30, r16
    3a92:	80 83       	st	Z, r24
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	a2 83       	std	Z+2, r26	; 0x02
    3a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	eb 57       	subi	r30, 0x7B	; 123
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e8       	ldi	r20, 0x80	; 128
    3aae:	5f e3       	ldi	r21, 0x3F	; 63
    3ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab4:	88 23       	and	r24, r24
    3ab6:	44 f4       	brge	.+16     	; 0x3ac8 <main+0xd04>
		__ticks = 1;
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ed 57       	subi	r30, 0x7D	; 125
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
    3ac6:	64 c0       	rjmp	.+200    	; 0x3b90 <main+0xdcc>
	else if (__tmp > 65535)
    3ac8:	fe 01       	movw	r30, r28
    3aca:	eb 57       	subi	r30, 0x7B	; 123
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	60 81       	ld	r22, Z
    3ad0:	71 81       	ldd	r23, Z+1	; 0x01
    3ad2:	82 81       	ldd	r24, Z+2	; 0x02
    3ad4:	93 81       	ldd	r25, Z+3	; 0x03
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	3f ef       	ldi	r19, 0xFF	; 255
    3ada:	4f e7       	ldi	r20, 0x7F	; 127
    3adc:	57 e4       	ldi	r21, 0x47	; 71
    3ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ae2:	18 16       	cp	r1, r24
    3ae4:	0c f0       	brlt	.+2      	; 0x3ae8 <main+0xd24>
    3ae6:	43 c0       	rjmp	.+134    	; 0x3b6e <main+0xdaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e7 57       	subi	r30, 0x77	; 119
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	60 81       	ld	r22, Z
    3af0:	71 81       	ldd	r23, Z+1	; 0x01
    3af2:	82 81       	ldd	r24, Z+2	; 0x02
    3af4:	93 81       	ldd	r25, Z+3	; 0x03
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e2       	ldi	r20, 0x20	; 32
    3afc:	51 e4       	ldi	r21, 0x41	; 65
    3afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	8e 01       	movw	r16, r28
    3b08:	0d 57       	subi	r16, 0x7D	; 125
    3b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0c:	bc 01       	movw	r22, r24
    3b0e:	cd 01       	movw	r24, r26
    3b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	f8 01       	movw	r30, r16
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	80 83       	st	Z, r24
    3b1e:	1f c0       	rjmp	.+62     	; 0x3b5e <main+0xd9a>
    3b20:	fe 01       	movw	r30, r28
    3b22:	ef 57       	subi	r30, 0x7F	; 127
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 e9       	ldi	r24, 0x90	; 144
    3b28:	91 e0       	ldi	r25, 0x01	; 1
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	80 83       	st	Z, r24
    3b2e:	fe 01       	movw	r30, r28
    3b30:	ef 57       	subi	r30, 0x7F	; 127
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <main+0xd74>
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	ef 57       	subi	r30, 0x7F	; 127
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b46:	de 01       	movw	r26, r28
    3b48:	ad 57       	subi	r26, 0x7D	; 125
    3b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ed 57       	subi	r30, 0x7D	; 125
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	11 96       	adiw	r26, 0x01	; 1
    3b5a:	9c 93       	st	X, r25
    3b5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5e:	fe 01       	movw	r30, r28
    3b60:	ed 57       	subi	r30, 0x7D	; 125
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	d1 f6       	brne	.-76     	; 0x3b20 <main+0xd5c>
    3b6c:	27 c0       	rjmp	.+78     	; 0x3bbc <main+0xdf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6e:	8e 01       	movw	r16, r28
    3b70:	0d 57       	subi	r16, 0x7D	; 125
    3b72:	1f 4f       	sbci	r17, 0xFF	; 255
    3b74:	fe 01       	movw	r30, r28
    3b76:	eb 57       	subi	r30, 0x7B	; 123
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	60 81       	ld	r22, Z
    3b7c:	71 81       	ldd	r23, Z+1	; 0x01
    3b7e:	82 81       	ldd	r24, Z+2	; 0x02
    3b80:	93 81       	ldd	r25, Z+3	; 0x03
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	80 83       	st	Z, r24
    3b90:	de 01       	movw	r26, r28
    3b92:	a1 58       	subi	r26, 0x81	; 129
    3b94:	bf 4f       	sbci	r27, 0xFF	; 255
    3b96:	fe 01       	movw	r30, r28
    3b98:	ed 57       	subi	r30, 0x7D	; 125
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	8d 93       	st	X+, r24
    3ba2:	9c 93       	st	X, r25
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e1 58       	subi	r30, 0x81	; 129
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 81       	ld	r24, Z
    3bac:	91 81       	ldd	r25, Z+1	; 0x01
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <main+0xdea>
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e1 58       	subi	r30, 0x81	; 129
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
				}while(passArr[iterator]==0xff);
				LCD_Write_data('*');
				iterator++;
			}
			_delay_ms(1000);
			LCD_ClearDisplay();
    3bbc:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	e5 58       	subi	r30, 0x85	; 133
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	a0 e0       	ldi	r26, 0x00	; 0
    3bcc:	b0 e4       	ldi	r27, 0x40	; 64
    3bce:	80 83       	st	Z, r24
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	a2 83       	std	Z+2, r26	; 0x02
    3bd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd6:	8e 01       	movw	r16, r28
    3bd8:	09 58       	subi	r16, 0x89	; 137
    3bda:	1f 4f       	sbci	r17, 0xFF	; 255
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e5 58       	subi	r30, 0x85	; 133
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	4a e7       	ldi	r20, 0x7A	; 122
    3bf0:	55 e4       	ldi	r21, 0x45	; 69
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	f8 01       	movw	r30, r16
    3bfc:	80 83       	st	Z, r24
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	a2 83       	std	Z+2, r26	; 0x02
    3c02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c04:	fe 01       	movw	r30, r28
    3c06:	e9 58       	subi	r30, 0x89	; 137
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	40 e8       	ldi	r20, 0x80	; 128
    3c18:	5f e3       	ldi	r21, 0x3F	; 63
    3c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1e:	88 23       	and	r24, r24
    3c20:	44 f4       	brge	.+16     	; 0x3c32 <main+0xe6e>
		__ticks = 1;
    3c22:	fe 01       	movw	r30, r28
    3c24:	eb 58       	subi	r30, 0x8B	; 139
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	91 83       	std	Z+1, r25	; 0x01
    3c2e:	80 83       	st	Z, r24
    3c30:	64 c0       	rjmp	.+200    	; 0x3cfa <main+0xf36>
	else if (__tmp > 65535)
    3c32:	fe 01       	movw	r30, r28
    3c34:	e9 58       	subi	r30, 0x89	; 137
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	60 81       	ld	r22, Z
    3c3a:	71 81       	ldd	r23, Z+1	; 0x01
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	93 81       	ldd	r25, Z+3	; 0x03
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	0c f0       	brlt	.+2      	; 0x3c52 <main+0xe8e>
    3c50:	43 c0       	rjmp	.+134    	; 0x3cd8 <main+0xf14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c52:	fe 01       	movw	r30, r28
    3c54:	e5 58       	subi	r30, 0x85	; 133
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e2       	ldi	r20, 0x20	; 32
    3c66:	51 e4       	ldi	r21, 0x41	; 65
    3c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	8e 01       	movw	r16, r28
    3c72:	0b 58       	subi	r16, 0x8B	; 139
    3c74:	1f 4f       	sbci	r17, 0xFF	; 255
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	f8 01       	movw	r30, r16
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
    3c88:	1f c0       	rjmp	.+62     	; 0x3cc8 <main+0xf04>
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	ed 58       	subi	r30, 0x8D	; 141
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 e9       	ldi	r24, 0x90	; 144
    3c92:	91 e0       	ldi	r25, 0x01	; 1
    3c94:	91 83       	std	Z+1, r25	; 0x01
    3c96:	80 83       	st	Z, r24
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ed 58       	subi	r30, 0x8D	; 141
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	80 81       	ld	r24, Z
    3ca0:	91 81       	ldd	r25, Z+1	; 0x01
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <main+0xede>
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	ed 58       	subi	r30, 0x8D	; 141
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb0:	de 01       	movw	r26, r28
    3cb2:	ab 58       	subi	r26, 0x8B	; 139
    3cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	eb 58       	subi	r30, 0x8B	; 139
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	11 96       	adiw	r26, 0x01	; 1
    3cc4:	9c 93       	st	X, r25
    3cc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc8:	fe 01       	movw	r30, r28
    3cca:	eb 58       	subi	r30, 0x8B	; 139
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	80 81       	ld	r24, Z
    3cd0:	91 81       	ldd	r25, Z+1	; 0x01
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	d1 f6       	brne	.-76     	; 0x3c8a <main+0xec6>
    3cd6:	f0 cc       	rjmp	.-1568   	; 0x36b8 <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd8:	8e 01       	movw	r16, r28
    3cda:	0b 58       	subi	r16, 0x8B	; 139
    3cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cde:	fe 01       	movw	r30, r28
    3ce0:	e9 58       	subi	r30, 0x89	; 137
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	60 81       	ld	r22, Z
    3ce6:	71 81       	ldd	r23, Z+1	; 0x01
    3ce8:	82 81       	ldd	r24, Z+2	; 0x02
    3cea:	93 81       	ldd	r25, Z+3	; 0x03
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24
    3cfa:	de 01       	movw	r26, r28
    3cfc:	af 58       	subi	r26, 0x8F	; 143
    3cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    3d00:	fe 01       	movw	r30, r28
    3d02:	eb 58       	subi	r30, 0x8B	; 139
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	80 81       	ld	r24, Z
    3d08:	91 81       	ldd	r25, Z+1	; 0x01
    3d0a:	11 96       	adiw	r26, 0x01	; 1
    3d0c:	9c 93       	st	X, r25
    3d0e:	8e 93       	st	-X, r24
    3d10:	fe 01       	movw	r30, r28
    3d12:	ef 58       	subi	r30, 0x8F	; 143
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 81       	ld	r24, Z
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <main+0xf56>
    3d1e:	fe 01       	movw	r30, r28
    3d20:	ef 58       	subi	r30, 0x8F	; 143
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	80 83       	st	Z, r24
    3d28:	c7 cc       	rjmp	.-1650   	; 0x36b8 <main+0x8f4>
			_delay_ms(2);

		}
		else if(passStatus==TRUE)
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e9 50       	subi	r30, 0x09	; 9
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	81 30       	cpi	r24, 0x01	; 1
    3d34:	09 f0       	breq	.+2      	; 0x3d38 <main+0xf74>
    3d36:	c0 cc       	rjmp	.-1664   	; 0x36b8 <main+0x8f4>
		{
			LCD_SendString("Options:");
    3d38:	82 eb       	ldi	r24, 0xB2	; 178
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
			LCD_SendString("1-Display Temp");
    3d48:	8b eb       	ldi	r24, 0xBB	; 187
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    3d50:	fe 01       	movw	r30, r28
    3d52:	e3 59       	subi	r30, 0x93	; 147
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e8       	ldi	r25, 0x80	; 128
    3d5a:	ab eb       	ldi	r26, 0xBB	; 187
    3d5c:	b4 e4       	ldi	r27, 0x44	; 68
    3d5e:	80 83       	st	Z, r24
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	a2 83       	std	Z+2, r26	; 0x02
    3d64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d66:	8e 01       	movw	r16, r28
    3d68:	07 59       	subi	r16, 0x97	; 151
    3d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e3 59       	subi	r30, 0x93	; 147
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	60 81       	ld	r22, Z
    3d74:	71 81       	ldd	r23, Z+1	; 0x01
    3d76:	82 81       	ldd	r24, Z+2	; 0x02
    3d78:	93 81       	ldd	r25, Z+3	; 0x03
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	4a e7       	ldi	r20, 0x7A	; 122
    3d80:	55 e4       	ldi	r21, 0x45	; 69
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	f8 01       	movw	r30, r16
    3d8c:	80 83       	st	Z, r24
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	a2 83       	std	Z+2, r26	; 0x02
    3d92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d94:	fe 01       	movw	r30, r28
    3d96:	e7 59       	subi	r30, 0x97	; 151
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	60 81       	ld	r22, Z
    3d9c:	71 81       	ldd	r23, Z+1	; 0x01
    3d9e:	82 81       	ldd	r24, Z+2	; 0x02
    3da0:	93 81       	ldd	r25, Z+3	; 0x03
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e8       	ldi	r20, 0x80	; 128
    3da8:	5f e3       	ldi	r21, 0x3F	; 63
    3daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dae:	88 23       	and	r24, r24
    3db0:	44 f4       	brge	.+16     	; 0x3dc2 <main+0xffe>
		__ticks = 1;
    3db2:	fe 01       	movw	r30, r28
    3db4:	e9 59       	subi	r30, 0x99	; 153
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	91 83       	std	Z+1, r25	; 0x01
    3dbe:	80 83       	st	Z, r24
    3dc0:	64 c0       	rjmp	.+200    	; 0x3e8a <main+0x10c6>
	else if (__tmp > 65535)
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e7 59       	subi	r30, 0x97	; 151
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	60 81       	ld	r22, Z
    3dca:	71 81       	ldd	r23, Z+1	; 0x01
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    3dce:	93 81       	ldd	r25, Z+3	; 0x03
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	3f ef       	ldi	r19, 0xFF	; 255
    3dd4:	4f e7       	ldi	r20, 0x7F	; 127
    3dd6:	57 e4       	ldi	r21, 0x47	; 71
    3dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ddc:	18 16       	cp	r1, r24
    3dde:	0c f0       	brlt	.+2      	; 0x3de2 <main+0x101e>
    3de0:	43 c0       	rjmp	.+134    	; 0x3e68 <main+0x10a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de2:	fe 01       	movw	r30, r28
    3de4:	e3 59       	subi	r30, 0x93	; 147
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	60 81       	ld	r22, Z
    3dea:	71 81       	ldd	r23, Z+1	; 0x01
    3dec:	82 81       	ldd	r24, Z+2	; 0x02
    3dee:	93 81       	ldd	r25, Z+3	; 0x03
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	40 e2       	ldi	r20, 0x20	; 32
    3df6:	51 e4       	ldi	r21, 0x41	; 65
    3df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	cb 01       	movw	r24, r22
    3e00:	8e 01       	movw	r16, r28
    3e02:	09 59       	subi	r16, 0x99	; 153
    3e04:	1f 4f       	sbci	r17, 0xFF	; 255
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	f8 01       	movw	r30, r16
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	80 83       	st	Z, r24
    3e18:	1f c0       	rjmp	.+62     	; 0x3e58 <main+0x1094>
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	eb 59       	subi	r30, 0x9B	; 155
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	80 e9       	ldi	r24, 0x90	; 144
    3e22:	91 e0       	ldi	r25, 0x01	; 1
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	80 83       	st	Z, r24
    3e28:	fe 01       	movw	r30, r28
    3e2a:	eb 59       	subi	r30, 0x9B	; 155
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	80 81       	ld	r24, Z
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <main+0x106e>
    3e36:	fe 01       	movw	r30, r28
    3e38:	eb 59       	subi	r30, 0x9B	; 155
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	91 83       	std	Z+1, r25	; 0x01
    3e3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e40:	de 01       	movw	r26, r28
    3e42:	a9 59       	subi	r26, 0x99	; 153
    3e44:	bf 4f       	sbci	r27, 0xFF	; 255
    3e46:	fe 01       	movw	r30, r28
    3e48:	e9 59       	subi	r30, 0x99	; 153
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	80 81       	ld	r24, Z
    3e4e:	91 81       	ldd	r25, Z+1	; 0x01
    3e50:	01 97       	sbiw	r24, 0x01	; 1
    3e52:	11 96       	adiw	r26, 0x01	; 1
    3e54:	9c 93       	st	X, r25
    3e56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e58:	fe 01       	movw	r30, r28
    3e5a:	e9 59       	subi	r30, 0x99	; 153
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	00 97       	sbiw	r24, 0x00	; 0
    3e64:	d1 f6       	brne	.-76     	; 0x3e1a <main+0x1056>
    3e66:	27 c0       	rjmp	.+78     	; 0x3eb6 <main+0x10f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e68:	8e 01       	movw	r16, r28
    3e6a:	09 59       	subi	r16, 0x99	; 153
    3e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e7 59       	subi	r30, 0x97	; 151
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	f8 01       	movw	r30, r16
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	80 83       	st	Z, r24
    3e8a:	de 01       	movw	r26, r28
    3e8c:	ad 59       	subi	r26, 0x9D	; 157
    3e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e90:	fe 01       	movw	r30, r28
    3e92:	e9 59       	subi	r30, 0x99	; 153
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	80 81       	ld	r24, Z
    3e98:	91 81       	ldd	r25, Z+1	; 0x01
    3e9a:	8d 93       	st	X+, r24
    3e9c:	9c 93       	st	X, r25
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	ed 59       	subi	r30, 0x9D	; 157
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	91 81       	ldd	r25, Z+1	; 0x01
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <main+0x10e4>
    3eac:	fe 01       	movw	r30, r28
    3eae:	ed 59       	subi	r30, 0x9D	; 157
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    3eb6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    3eba:	fe 01       	movw	r30, r28
    3ebc:	e1 5a       	subi	r30, 0xA1	; 161
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a0 e0       	ldi	r26, 0x00	; 0
    3ec6:	b0 e4       	ldi	r27, 0x40	; 64
    3ec8:	80 83       	st	Z, r24
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	a2 83       	std	Z+2, r26	; 0x02
    3ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed0:	8e 01       	movw	r16, r28
    3ed2:	05 5a       	subi	r16, 0xA5	; 165
    3ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e1 5a       	subi	r30, 0xA1	; 161
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	60 81       	ld	r22, Z
    3ede:	71 81       	ldd	r23, Z+1	; 0x01
    3ee0:	82 81       	ldd	r24, Z+2	; 0x02
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	4a e7       	ldi	r20, 0x7A	; 122
    3eea:	55 e4       	ldi	r21, 0x45	; 69
    3eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	f8 01       	movw	r30, r16
    3ef6:	80 83       	st	Z, r24
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	a2 83       	std	Z+2, r26	; 0x02
    3efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3efe:	fe 01       	movw	r30, r28
    3f00:	e5 5a       	subi	r30, 0xA5	; 165
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	44 f4       	brge	.+16     	; 0x3f2c <main+0x1168>
		__ticks = 1;
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	e7 5a       	subi	r30, 0xA7	; 167
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	80 83       	st	Z, r24
    3f2a:	64 c0       	rjmp	.+200    	; 0x3ff4 <main+0x1230>
	else if (__tmp > 65535)
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	e5 5a       	subi	r30, 0xA5	; 165
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	60 81       	ld	r22, Z
    3f34:	71 81       	ldd	r23, Z+1	; 0x01
    3f36:	82 81       	ldd	r24, Z+2	; 0x02
    3f38:	93 81       	ldd	r25, Z+3	; 0x03
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	3f ef       	ldi	r19, 0xFF	; 255
    3f3e:	4f e7       	ldi	r20, 0x7F	; 127
    3f40:	57 e4       	ldi	r21, 0x47	; 71
    3f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f46:	18 16       	cp	r1, r24
    3f48:	0c f0       	brlt	.+2      	; 0x3f4c <main+0x1188>
    3f4a:	43 c0       	rjmp	.+134    	; 0x3fd2 <main+0x120e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e1 5a       	subi	r30, 0xA1	; 161
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	60 81       	ld	r22, Z
    3f54:	71 81       	ldd	r23, Z+1	; 0x01
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	40 e2       	ldi	r20, 0x20	; 32
    3f60:	51 e4       	ldi	r21, 0x41	; 65
    3f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	8e 01       	movw	r16, r28
    3f6c:	07 5a       	subi	r16, 0xA7	; 167
    3f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	f8 01       	movw	r30, r16
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
    3f82:	1f c0       	rjmp	.+62     	; 0x3fc2 <main+0x11fe>
    3f84:	fe 01       	movw	r30, r28
    3f86:	e9 5a       	subi	r30, 0xA9	; 169
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	80 e9       	ldi	r24, 0x90	; 144
    3f8c:	91 e0       	ldi	r25, 0x01	; 1
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
    3f92:	fe 01       	movw	r30, r28
    3f94:	e9 5a       	subi	r30, 0xA9	; 169
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	80 81       	ld	r24, Z
    3f9a:	91 81       	ldd	r25, Z+1	; 0x01
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <main+0x11d8>
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e9 5a       	subi	r30, 0xA9	; 169
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	de 01       	movw	r26, r28
    3fac:	a7 5a       	subi	r26, 0xA7	; 167
    3fae:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e7 5a       	subi	r30, 0xA7	; 167
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	11 96       	adiw	r26, 0x01	; 1
    3fbe:	9c 93       	st	X, r25
    3fc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e7 5a       	subi	r30, 0xA7	; 167
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	d1 f6       	brne	.-76     	; 0x3f84 <main+0x11c0>
    3fd0:	27 c0       	rjmp	.+78     	; 0x4020 <main+0x125c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd2:	8e 01       	movw	r16, r28
    3fd4:	07 5a       	subi	r16, 0xA7	; 167
    3fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e5 5a       	subi	r30, 0xA5	; 165
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	60 81       	ld	r22, Z
    3fe0:	71 81       	ldd	r23, Z+1	; 0x01
    3fe2:	82 81       	ldd	r24, Z+2	; 0x02
    3fe4:	93 81       	ldd	r25, Z+3	; 0x03
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	f8 01       	movw	r30, r16
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
    3ff4:	de 01       	movw	r26, r28
    3ff6:	ab 5a       	subi	r26, 0xAB	; 171
    3ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e7 5a       	subi	r30, 0xA7	; 167
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	8d 93       	st	X+, r24
    4006:	9c 93       	st	X, r25
    4008:	fe 01       	movw	r30, r28
    400a:	eb 5a       	subi	r30, 0xAB	; 171
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	f1 f7       	brne	.-4      	; 0x4012 <main+0x124e>
    4016:	fe 01       	movw	r30, r28
    4018:	eb 5a       	subi	r30, 0xAB	; 171
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	91 83       	std	Z+1, r25	; 0x01
    401e:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_SendString("2- Fan ON");
    4020:	8a ec       	ldi	r24, 0xCA	; 202
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	60 e0       	ldi	r22, 0x00	; 0
    402c:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
			LCD_SendString("3- Fan OFF");
    4030:	84 ed       	ldi	r24, 0xD4	; 212
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    4038:	fe 01       	movw	r30, r28
    403a:	ef 5a       	subi	r30, 0xAF	; 175
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	90 e8       	ldi	r25, 0x80	; 128
    4042:	ab eb       	ldi	r26, 0xBB	; 187
    4044:	b4 e4       	ldi	r27, 0x44	; 68
    4046:	80 83       	st	Z, r24
    4048:	91 83       	std	Z+1, r25	; 0x01
    404a:	a2 83       	std	Z+2, r26	; 0x02
    404c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    404e:	8e 01       	movw	r16, r28
    4050:	03 5b       	subi	r16, 0xB3	; 179
    4052:	1f 4f       	sbci	r17, 0xFF	; 255
    4054:	fe 01       	movw	r30, r28
    4056:	ef 5a       	subi	r30, 0xAF	; 175
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	60 81       	ld	r22, Z
    405c:	71 81       	ldd	r23, Z+1	; 0x01
    405e:	82 81       	ldd	r24, Z+2	; 0x02
    4060:	93 81       	ldd	r25, Z+3	; 0x03
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	4a e7       	ldi	r20, 0x7A	; 122
    4068:	55 e4       	ldi	r21, 0x45	; 69
    406a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	f8 01       	movw	r30, r16
    4074:	80 83       	st	Z, r24
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	a2 83       	std	Z+2, r26	; 0x02
    407a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    407c:	fe 01       	movw	r30, r28
    407e:	e3 5b       	subi	r30, 0xB3	; 179
    4080:	ff 4f       	sbci	r31, 0xFF	; 255
    4082:	60 81       	ld	r22, Z
    4084:	71 81       	ldd	r23, Z+1	; 0x01
    4086:	82 81       	ldd	r24, Z+2	; 0x02
    4088:	93 81       	ldd	r25, Z+3	; 0x03
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e8       	ldi	r20, 0x80	; 128
    4090:	5f e3       	ldi	r21, 0x3F	; 63
    4092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4096:	88 23       	and	r24, r24
    4098:	44 f4       	brge	.+16     	; 0x40aa <main+0x12e6>
		__ticks = 1;
    409a:	fe 01       	movw	r30, r28
    409c:	e5 5b       	subi	r30, 0xB5	; 181
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	80 83       	st	Z, r24
    40a8:	64 c0       	rjmp	.+200    	; 0x4172 <main+0x13ae>
	else if (__tmp > 65535)
    40aa:	fe 01       	movw	r30, r28
    40ac:	e3 5b       	subi	r30, 0xB3	; 179
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	60 81       	ld	r22, Z
    40b2:	71 81       	ldd	r23, Z+1	; 0x01
    40b4:	82 81       	ldd	r24, Z+2	; 0x02
    40b6:	93 81       	ldd	r25, Z+3	; 0x03
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	3f ef       	ldi	r19, 0xFF	; 255
    40bc:	4f e7       	ldi	r20, 0x7F	; 127
    40be:	57 e4       	ldi	r21, 0x47	; 71
    40c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40c4:	18 16       	cp	r1, r24
    40c6:	0c f0       	brlt	.+2      	; 0x40ca <main+0x1306>
    40c8:	43 c0       	rjmp	.+134    	; 0x4150 <main+0x138c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ca:	fe 01       	movw	r30, r28
    40cc:	ef 5a       	subi	r30, 0xAF	; 175
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	60 81       	ld	r22, Z
    40d2:	71 81       	ldd	r23, Z+1	; 0x01
    40d4:	82 81       	ldd	r24, Z+2	; 0x02
    40d6:	93 81       	ldd	r25, Z+3	; 0x03
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	40 e2       	ldi	r20, 0x20	; 32
    40de:	51 e4       	ldi	r21, 0x41	; 65
    40e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	8e 01       	movw	r16, r28
    40ea:	05 5b       	subi	r16, 0xB5	; 181
    40ec:	1f 4f       	sbci	r17, 0xFF	; 255
    40ee:	bc 01       	movw	r22, r24
    40f0:	cd 01       	movw	r24, r26
    40f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	f8 01       	movw	r30, r16
    40fc:	91 83       	std	Z+1, r25	; 0x01
    40fe:	80 83       	st	Z, r24
    4100:	1f c0       	rjmp	.+62     	; 0x4140 <main+0x137c>
    4102:	fe 01       	movw	r30, r28
    4104:	e7 5b       	subi	r30, 0xB7	; 183
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	80 e9       	ldi	r24, 0x90	; 144
    410a:	91 e0       	ldi	r25, 0x01	; 1
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	80 83       	st	Z, r24
    4110:	fe 01       	movw	r30, r28
    4112:	e7 5b       	subi	r30, 0xB7	; 183
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	f1 f7       	brne	.-4      	; 0x411a <main+0x1356>
    411e:	fe 01       	movw	r30, r28
    4120:	e7 5b       	subi	r30, 0xB7	; 183
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4128:	de 01       	movw	r26, r28
    412a:	a5 5b       	subi	r26, 0xB5	; 181
    412c:	bf 4f       	sbci	r27, 0xFF	; 255
    412e:	fe 01       	movw	r30, r28
    4130:	e5 5b       	subi	r30, 0xB5	; 181
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	11 96       	adiw	r26, 0x01	; 1
    413c:	9c 93       	st	X, r25
    413e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4140:	fe 01       	movw	r30, r28
    4142:	e5 5b       	subi	r30, 0xB5	; 181
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	80 81       	ld	r24, Z
    4148:	91 81       	ldd	r25, Z+1	; 0x01
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	d1 f6       	brne	.-76     	; 0x4102 <main+0x133e>
    414e:	27 c0       	rjmp	.+78     	; 0x419e <main+0x13da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4150:	8e 01       	movw	r16, r28
    4152:	05 5b       	subi	r16, 0xB5	; 181
    4154:	1f 4f       	sbci	r17, 0xFF	; 255
    4156:	fe 01       	movw	r30, r28
    4158:	e3 5b       	subi	r30, 0xB3	; 179
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	60 81       	ld	r22, Z
    415e:	71 81       	ldd	r23, Z+1	; 0x01
    4160:	82 81       	ldd	r24, Z+2	; 0x02
    4162:	93 81       	ldd	r25, Z+3	; 0x03
    4164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	f8 01       	movw	r30, r16
    416e:	91 83       	std	Z+1, r25	; 0x01
    4170:	80 83       	st	Z, r24
    4172:	de 01       	movw	r26, r28
    4174:	a9 5b       	subi	r26, 0xB9	; 185
    4176:	bf 4f       	sbci	r27, 0xFF	; 255
    4178:	fe 01       	movw	r30, r28
    417a:	e5 5b       	subi	r30, 0xB5	; 181
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	80 81       	ld	r24, Z
    4180:	91 81       	ldd	r25, Z+1	; 0x01
    4182:	8d 93       	st	X+, r24
    4184:	9c 93       	st	X, r25
    4186:	fe 01       	movw	r30, r28
    4188:	e9 5b       	subi	r30, 0xB9	; 185
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	80 81       	ld	r24, Z
    418e:	91 81       	ldd	r25, Z+1	; 0x01
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	f1 f7       	brne	.-4      	; 0x4190 <main+0x13cc>
    4194:	fe 01       	movw	r30, r28
    4196:	e9 5b       	subi	r30, 0xB9	; 185
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	91 83       	std	Z+1, r25	; 0x01
    419c:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_ClearDisplay();
    419e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    41a2:	fe 01       	movw	r30, r28
    41a4:	ed 5b       	subi	r30, 0xBD	; 189
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	a0 e0       	ldi	r26, 0x00	; 0
    41ae:	b0 e4       	ldi	r27, 0x40	; 64
    41b0:	80 83       	st	Z, r24
    41b2:	91 83       	std	Z+1, r25	; 0x01
    41b4:	a2 83       	std	Z+2, r26	; 0x02
    41b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b8:	8e 01       	movw	r16, r28
    41ba:	01 5c       	subi	r16, 0xC1	; 193
    41bc:	1f 4f       	sbci	r17, 0xFF	; 255
    41be:	fe 01       	movw	r30, r28
    41c0:	ed 5b       	subi	r30, 0xBD	; 189
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	60 81       	ld	r22, Z
    41c6:	71 81       	ldd	r23, Z+1	; 0x01
    41c8:	82 81       	ldd	r24, Z+2	; 0x02
    41ca:	93 81       	ldd	r25, Z+3	; 0x03
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	4a e7       	ldi	r20, 0x7A	; 122
    41d2:	55 e4       	ldi	r21, 0x45	; 69
    41d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	f8 01       	movw	r30, r16
    41de:	80 83       	st	Z, r24
    41e0:	91 83       	std	Z+1, r25	; 0x01
    41e2:	a2 83       	std	Z+2, r26	; 0x02
    41e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41e6:	fe 01       	movw	r30, r28
    41e8:	ff 96       	adiw	r30, 0x3f	; 63
    41ea:	60 81       	ld	r22, Z
    41ec:	71 81       	ldd	r23, Z+1	; 0x01
    41ee:	82 81       	ldd	r24, Z+2	; 0x02
    41f0:	93 81       	ldd	r25, Z+3	; 0x03
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	40 e8       	ldi	r20, 0x80	; 128
    41f8:	5f e3       	ldi	r21, 0x3F	; 63
    41fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41fe:	88 23       	and	r24, r24
    4200:	2c f4       	brge	.+10     	; 0x420c <main+0x1448>
		__ticks = 1;
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	9e af       	std	Y+62, r25	; 0x3e
    4208:	8d af       	std	Y+61, r24	; 0x3d
    420a:	46 c0       	rjmp	.+140    	; 0x4298 <main+0x14d4>
	else if (__tmp > 65535)
    420c:	fe 01       	movw	r30, r28
    420e:	ff 96       	adiw	r30, 0x3f	; 63
    4210:	60 81       	ld	r22, Z
    4212:	71 81       	ldd	r23, Z+1	; 0x01
    4214:	82 81       	ldd	r24, Z+2	; 0x02
    4216:	93 81       	ldd	r25, Z+3	; 0x03
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	64 f5       	brge	.+88     	; 0x4280 <main+0x14bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4228:	fe 01       	movw	r30, r28
    422a:	ed 5b       	subi	r30, 0xBD	; 189
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	60 81       	ld	r22, Z
    4230:	71 81       	ldd	r23, Z+1	; 0x01
    4232:	82 81       	ldd	r24, Z+2	; 0x02
    4234:	93 81       	ldd	r25, Z+3	; 0x03
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e2       	ldi	r20, 0x20	; 32
    423c:	51 e4       	ldi	r21, 0x41	; 65
    423e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	9e af       	std	Y+62, r25	; 0x3e
    4254:	8d af       	std	Y+61, r24	; 0x3d
    4256:	0f c0       	rjmp	.+30     	; 0x4276 <main+0x14b2>
    4258:	80 e9       	ldi	r24, 0x90	; 144
    425a:	91 e0       	ldi	r25, 0x01	; 1
    425c:	9c af       	std	Y+60, r25	; 0x3c
    425e:	8b af       	std	Y+59, r24	; 0x3b
    4260:	8b ad       	ldd	r24, Y+59	; 0x3b
    4262:	9c ad       	ldd	r25, Y+60	; 0x3c
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	f1 f7       	brne	.-4      	; 0x4264 <main+0x14a0>
    4268:	9c af       	std	Y+60, r25	; 0x3c
    426a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426c:	8d ad       	ldd	r24, Y+61	; 0x3d
    426e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	9e af       	std	Y+62, r25	; 0x3e
    4274:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4276:	8d ad       	ldd	r24, Y+61	; 0x3d
    4278:	9e ad       	ldd	r25, Y+62	; 0x3e
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	69 f7       	brne	.-38     	; 0x4258 <main+0x1494>
    427e:	16 c0       	rjmp	.+44     	; 0x42ac <main+0x14e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4280:	fe 01       	movw	r30, r28
    4282:	ff 96       	adiw	r30, 0x3f	; 63
    4284:	60 81       	ld	r22, Z
    4286:	71 81       	ldd	r23, Z+1	; 0x01
    4288:	82 81       	ldd	r24, Z+2	; 0x02
    428a:	93 81       	ldd	r25, Z+3	; 0x03
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	9e af       	std	Y+62, r25	; 0x3e
    4296:	8d af       	std	Y+61, r24	; 0x3d
    4298:	8d ad       	ldd	r24, Y+61	; 0x3d
    429a:	9e ad       	ldd	r25, Y+62	; 0x3e
    429c:	9a af       	std	Y+58, r25	; 0x3a
    429e:	89 af       	std	Y+57, r24	; 0x39
    42a0:	89 ad       	ldd	r24, Y+57	; 0x39
    42a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <main+0x14e0>
    42a8:	9a af       	std	Y+58, r25	; 0x3a
    42aa:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			LCD_SendString("4- Lights ON");
    42ac:	8f ed       	ldi	r24, 0xDF	; 223
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
			LCD_GoToXY(SecondLine, 0);
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	60 e0       	ldi	r22, 0x00	; 0
    42b8:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
			LCD_SendString("5- Lights OFF");
    42bc:	8c ee       	ldi	r24, 0xEC	; 236
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	90 e8       	ldi	r25, 0x80	; 128
    42c8:	ab eb       	ldi	r26, 0xBB	; 187
    42ca:	b4 e4       	ldi	r27, 0x44	; 68
    42cc:	8d ab       	std	Y+53, r24	; 0x35
    42ce:	9e ab       	std	Y+54, r25	; 0x36
    42d0:	af ab       	std	Y+55, r26	; 0x37
    42d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d4:	6d a9       	ldd	r22, Y+53	; 0x35
    42d6:	7e a9       	ldd	r23, Y+54	; 0x36
    42d8:	8f a9       	ldd	r24, Y+55	; 0x37
    42da:	98 ad       	ldd	r25, Y+56	; 0x38
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a e7       	ldi	r20, 0x7A	; 122
    42e2:	55 e4       	ldi	r21, 0x45	; 69
    42e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	89 ab       	std	Y+49, r24	; 0x31
    42ee:	9a ab       	std	Y+50, r25	; 0x32
    42f0:	ab ab       	std	Y+51, r26	; 0x33
    42f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42f4:	69 a9       	ldd	r22, Y+49	; 0x31
    42f6:	7a a9       	ldd	r23, Y+50	; 0x32
    42f8:	8b a9       	ldd	r24, Y+51	; 0x33
    42fa:	9c a9       	ldd	r25, Y+52	; 0x34
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4308:	88 23       	and	r24, r24
    430a:	2c f4       	brge	.+10     	; 0x4316 <main+0x1552>
		__ticks = 1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	98 ab       	std	Y+48, r25	; 0x30
    4312:	8f a7       	std	Y+47, r24	; 0x2f
    4314:	3f c0       	rjmp	.+126    	; 0x4394 <main+0x15d0>
	else if (__tmp > 65535)
    4316:	69 a9       	ldd	r22, Y+49	; 0x31
    4318:	7a a9       	ldd	r23, Y+50	; 0x32
    431a:	8b a9       	ldd	r24, Y+51	; 0x33
    431c:	9c a9       	ldd	r25, Y+52	; 0x34
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	4c f5       	brge	.+82     	; 0x4380 <main+0x15bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432e:	6d a9       	ldd	r22, Y+53	; 0x35
    4330:	7e a9       	ldd	r23, Y+54	; 0x36
    4332:	8f a9       	ldd	r24, Y+55	; 0x37
    4334:	98 ad       	ldd	r25, Y+56	; 0x38
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e2       	ldi	r20, 0x20	; 32
    433c:	51 e4       	ldi	r21, 0x41	; 65
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	98 ab       	std	Y+48, r25	; 0x30
    4354:	8f a7       	std	Y+47, r24	; 0x2f
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <main+0x15b2>
    4358:	80 e9       	ldi	r24, 0x90	; 144
    435a:	91 e0       	ldi	r25, 0x01	; 1
    435c:	9e a7       	std	Y+46, r25	; 0x2e
    435e:	8d a7       	std	Y+45, r24	; 0x2d
    4360:	8d a5       	ldd	r24, Y+45	; 0x2d
    4362:	9e a5       	ldd	r25, Y+46	; 0x2e
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <main+0x15a0>
    4368:	9e a7       	std	Y+46, r25	; 0x2e
    436a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	8f a5       	ldd	r24, Y+47	; 0x2f
    436e:	98 a9       	ldd	r25, Y+48	; 0x30
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	98 ab       	std	Y+48, r25	; 0x30
    4374:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	8f a5       	ldd	r24, Y+47	; 0x2f
    4378:	98 a9       	ldd	r25, Y+48	; 0x30
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f7       	brne	.-38     	; 0x4358 <main+0x1594>
    437e:	14 c0       	rjmp	.+40     	; 0x43a8 <main+0x15e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	69 a9       	ldd	r22, Y+49	; 0x31
    4382:	7a a9       	ldd	r23, Y+50	; 0x32
    4384:	8b a9       	ldd	r24, Y+51	; 0x33
    4386:	9c a9       	ldd	r25, Y+52	; 0x34
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	98 ab       	std	Y+48, r25	; 0x30
    4392:	8f a7       	std	Y+47, r24	; 0x2f
    4394:	8f a5       	ldd	r24, Y+47	; 0x2f
    4396:	98 a9       	ldd	r25, Y+48	; 0x30
    4398:	9c a7       	std	Y+44, r25	; 0x2c
    439a:	8b a7       	std	Y+43, r24	; 0x2b
    439c:	8b a5       	ldd	r24, Y+43	; 0x2b
    439e:	9c a5       	ldd	r25, Y+44	; 0x2c
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <main+0x15dc>
    43a4:	9c a7       	std	Y+44, r25	; 0x2c
    43a6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1500);
			LCD_ClearDisplay();
    43a8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	a0 e0       	ldi	r26, 0x00	; 0
    43b2:	b0 e4       	ldi	r27, 0x40	; 64
    43b4:	8f a3       	std	Y+39, r24	; 0x27
    43b6:	98 a7       	std	Y+40, r25	; 0x28
    43b8:	a9 a7       	std	Y+41, r26	; 0x29
    43ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43bc:	6f a1       	ldd	r22, Y+39	; 0x27
    43be:	78 a5       	ldd	r23, Y+40	; 0x28
    43c0:	89 a5       	ldd	r24, Y+41	; 0x29
    43c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	4a e7       	ldi	r20, 0x7A	; 122
    43ca:	55 e4       	ldi	r21, 0x45	; 69
    43cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	8b a3       	std	Y+35, r24	; 0x23
    43d6:	9c a3       	std	Y+36, r25	; 0x24
    43d8:	ad a3       	std	Y+37, r26	; 0x25
    43da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43dc:	6b a1       	ldd	r22, Y+35	; 0x23
    43de:	7c a1       	ldd	r23, Y+36	; 0x24
    43e0:	8d a1       	ldd	r24, Y+37	; 0x25
    43e2:	9e a1       	ldd	r25, Y+38	; 0x26
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e8       	ldi	r20, 0x80	; 128
    43ea:	5f e3       	ldi	r21, 0x3F	; 63
    43ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43f0:	88 23       	and	r24, r24
    43f2:	2c f4       	brge	.+10     	; 0x43fe <main+0x163a>
		__ticks = 1;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	9a a3       	std	Y+34, r25	; 0x22
    43fa:	89 a3       	std	Y+33, r24	; 0x21
    43fc:	3f c0       	rjmp	.+126    	; 0x447c <main+0x16b8>
	else if (__tmp > 65535)
    43fe:	6b a1       	ldd	r22, Y+35	; 0x23
    4400:	7c a1       	ldd	r23, Y+36	; 0x24
    4402:	8d a1       	ldd	r24, Y+37	; 0x25
    4404:	9e a1       	ldd	r25, Y+38	; 0x26
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	4f e7       	ldi	r20, 0x7F	; 127
    440c:	57 e4       	ldi	r21, 0x47	; 71
    440e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4412:	18 16       	cp	r1, r24
    4414:	4c f5       	brge	.+82     	; 0x4468 <main+0x16a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	6f a1       	ldd	r22, Y+39	; 0x27
    4418:	78 a5       	ldd	r23, Y+40	; 0x28
    441a:	89 a5       	ldd	r24, Y+41	; 0x29
    441c:	9a a5       	ldd	r25, Y+42	; 0x2a
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	40 e2       	ldi	r20, 0x20	; 32
    4424:	51 e4       	ldi	r21, 0x41	; 65
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	bc 01       	movw	r22, r24
    4430:	cd 01       	movw	r24, r26
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	9a a3       	std	Y+34, r25	; 0x22
    443c:	89 a3       	std	Y+33, r24	; 0x21
    443e:	0f c0       	rjmp	.+30     	; 0x445e <main+0x169a>
    4440:	80 e9       	ldi	r24, 0x90	; 144
    4442:	91 e0       	ldi	r25, 0x01	; 1
    4444:	98 a3       	std	Y+32, r25	; 0x20
    4446:	8f 8f       	std	Y+31, r24	; 0x1f
    4448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    444a:	98 a1       	ldd	r25, Y+32	; 0x20
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	f1 f7       	brne	.-4      	; 0x444c <main+0x1688>
    4450:	98 a3       	std	Y+32, r25	; 0x20
    4452:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4454:	89 a1       	ldd	r24, Y+33	; 0x21
    4456:	9a a1       	ldd	r25, Y+34	; 0x22
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	9a a3       	std	Y+34, r25	; 0x22
    445c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445e:	89 a1       	ldd	r24, Y+33	; 0x21
    4460:	9a a1       	ldd	r25, Y+34	; 0x22
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	69 f7       	brne	.-38     	; 0x4440 <main+0x167c>
    4466:	14 c0       	rjmp	.+40     	; 0x4490 <main+0x16cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4468:	6b a1       	ldd	r22, Y+35	; 0x23
    446a:	7c a1       	ldd	r23, Y+36	; 0x24
    446c:	8d a1       	ldd	r24, Y+37	; 0x25
    446e:	9e a1       	ldd	r25, Y+38	; 0x26
    4470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	9a a3       	std	Y+34, r25	; 0x22
    447a:	89 a3       	std	Y+33, r24	; 0x21
    447c:	89 a1       	ldd	r24, Y+33	; 0x21
    447e:	9a a1       	ldd	r25, Y+34	; 0x22
    4480:	9e 8f       	std	Y+30, r25	; 0x1e
    4482:	8d 8f       	std	Y+29, r24	; 0x1d
    4484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <main+0x16c4>
    448c:	9e 8f       	std	Y+30, r25	; 0x1e
    448e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			do
			{
				choosenOption=get_button_pressed();
    4490:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <get_button_pressed>
    4494:	fe 01       	movw	r30, r28
    4496:	eb 50       	subi	r30, 0x0B	; 11
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	80 83       	st	Z, r24

			}while(choosenOption==0xff);
    449c:	fe 01       	movw	r30, r28
    449e:	eb 50       	subi	r30, 0x0B	; 11
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 81       	ld	r24, Z
    44a4:	8f 3f       	cpi	r24, 0xFF	; 255
    44a6:	a1 f3       	breq	.-24     	; 0x4490 <main+0x16cc>

			switch(choosenOption)
    44a8:	fe 01       	movw	r30, r28
    44aa:	eb 50       	subi	r30, 0x0B	; 11
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 81       	ld	r24, Z
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	ca 5f       	subi	r28, 0xFA	; 250
    44b6:	de 4f       	sbci	r29, 0xFE	; 254
    44b8:	39 83       	std	Y+1, r19	; 0x01
    44ba:	28 83       	st	Y, r18
    44bc:	c6 50       	subi	r28, 0x06	; 6
    44be:	d1 40       	sbci	r29, 0x01	; 1
    44c0:	ca 5f       	subi	r28, 0xFA	; 250
    44c2:	de 4f       	sbci	r29, 0xFE	; 254
    44c4:	88 81       	ld	r24, Y
    44c6:	99 81       	ldd	r25, Y+1	; 0x01
    44c8:	c6 50       	subi	r28, 0x06	; 6
    44ca:	d1 40       	sbci	r29, 0x01	; 1
    44cc:	83 33       	cpi	r24, 0x33	; 51
    44ce:	91 05       	cpc	r25, r1
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <main+0x1710>
    44d2:	6d c1       	rjmp	.+730    	; 0x47ae <main+0x19ea>
    44d4:	ca 5f       	subi	r28, 0xFA	; 250
    44d6:	de 4f       	sbci	r29, 0xFE	; 254
    44d8:	e8 81       	ld	r30, Y
    44da:	f9 81       	ldd	r31, Y+1	; 0x01
    44dc:	c6 50       	subi	r28, 0x06	; 6
    44de:	d1 40       	sbci	r29, 0x01	; 1
    44e0:	e4 33       	cpi	r30, 0x34	; 52
    44e2:	f1 05       	cpc	r31, r1
    44e4:	a4 f4       	brge	.+40     	; 0x450e <main+0x174a>
    44e6:	ca 5f       	subi	r28, 0xFA	; 250
    44e8:	de 4f       	sbci	r29, 0xFE	; 254
    44ea:	28 81       	ld	r18, Y
    44ec:	39 81       	ldd	r19, Y+1	; 0x01
    44ee:	c6 50       	subi	r28, 0x06	; 6
    44f0:	d1 40       	sbci	r29, 0x01	; 1
    44f2:	21 33       	cpi	r18, 0x31	; 49
    44f4:	31 05       	cpc	r19, r1
    44f6:	01 f1       	breq	.+64     	; 0x4538 <main+0x1774>
    44f8:	ca 5f       	subi	r28, 0xFA	; 250
    44fa:	de 4f       	sbci	r29, 0xFE	; 254
    44fc:	88 81       	ld	r24, Y
    44fe:	99 81       	ldd	r25, Y+1	; 0x01
    4500:	c6 50       	subi	r28, 0x06	; 6
    4502:	d1 40       	sbci	r29, 0x01	; 1
    4504:	82 33       	cpi	r24, 0x32	; 50
    4506:	91 05       	cpc	r25, r1
    4508:	09 f4       	brne	.+2      	; 0x450c <main+0x1748>
    450a:	4a c1       	rjmp	.+660    	; 0x47a0 <main+0x19dc>
    450c:	d5 c8       	rjmp	.-3670   	; 0x36b8 <main+0x8f4>
    450e:	ca 5f       	subi	r28, 0xFA	; 250
    4510:	de 4f       	sbci	r29, 0xFE	; 254
    4512:	e8 81       	ld	r30, Y
    4514:	f9 81       	ldd	r31, Y+1	; 0x01
    4516:	c6 50       	subi	r28, 0x06	; 6
    4518:	d1 40       	sbci	r29, 0x01	; 1
    451a:	e4 33       	cpi	r30, 0x34	; 52
    451c:	f1 05       	cpc	r31, r1
    451e:	09 f4       	brne	.+2      	; 0x4522 <main+0x175e>
    4520:	4d c1       	rjmp	.+666    	; 0x47bc <main+0x19f8>
    4522:	ca 5f       	subi	r28, 0xFA	; 250
    4524:	de 4f       	sbci	r29, 0xFE	; 254
    4526:	28 81       	ld	r18, Y
    4528:	39 81       	ldd	r19, Y+1	; 0x01
    452a:	c6 50       	subi	r28, 0x06	; 6
    452c:	d1 40       	sbci	r29, 0x01	; 1
    452e:	25 33       	cpi	r18, 0x35	; 53
    4530:	31 05       	cpc	r19, r1
    4532:	09 f4       	brne	.+2      	; 0x4536 <main+0x1772>
    4534:	4a c1       	rjmp	.+660    	; 0x47ca <main+0x1a06>
    4536:	c0 c8       	rjmp	.-3712   	; 0x36b8 <main+0x8f4>
			{
				case '1':
					valueADC= ADC_StartConversion(ADC1);
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	0e 94 64 07 	call	0xec8	; 0xec8 <ADC_StartConversion>
    453e:	fe 01       	movw	r30, r28
    4540:	e3 50       	subi	r30, 0x03	; 3
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	80 83       	st	Z, r24
					analogue=(uint32)valueADC*5000UL/256UL; //in mV
    4546:	fe 01       	movw	r30, r28
    4548:	e3 50       	subi	r30, 0x03	; 3
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 81       	ld	r24, Z
    454e:	88 2f       	mov	r24, r24
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	a0 e0       	ldi	r26, 0x00	; 0
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	28 e8       	ldi	r18, 0x88	; 136
    4558:	33 e1       	ldi	r19, 0x13	; 19
    455a:	40 e0       	ldi	r20, 0x00	; 0
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	bc 01       	movw	r22, r24
    4560:	cd 01       	movw	r24, r26
    4562:	0e 94 3e 24 	call	0x487c	; 0x487c <__mulsi3>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	fe 01       	movw	r30, r28
    456c:	e7 50       	subi	r30, 0x07	; 7
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	89 2f       	mov	r24, r25
    4572:	9a 2f       	mov	r25, r26
    4574:	ab 2f       	mov	r26, r27
    4576:	bb 27       	eor	r27, r27
    4578:	80 83       	st	Z, r24
    457a:	91 83       	std	Z+1, r25	; 0x01
    457c:	a2 83       	std	Z+2, r26	; 0x02
    457e:	b3 83       	std	Z+3, r27	; 0x03
					temprature=analogue/10;
    4580:	fe 01       	movw	r30, r28
    4582:	e7 50       	subi	r30, 0x07	; 7
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	80 81       	ld	r24, Z
    4588:	91 81       	ldd	r25, Z+1	; 0x01
    458a:	a2 81       	ldd	r26, Z+2	; 0x02
    458c:	b3 81       	ldd	r27, Z+3	; 0x03
    458e:	2a e0       	ldi	r18, 0x0A	; 10
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e0       	ldi	r20, 0x00	; 0
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__udivmodsi4>
    459e:	da 01       	movw	r26, r20
    45a0:	c9 01       	movw	r24, r18
    45a2:	fe 01       	movw	r30, r28
    45a4:	e8 50       	subi	r30, 0x08	; 8
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	80 83       	st	Z, r24
					LCD_SendString("Temp=");
    45aa:	8a ef       	ldi	r24, 0xFA	; 250
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
					LCD_GoToXY(FirstLine, 6);
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	66 e0       	ldi	r22, 0x06	; 6
    45b6:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_GoToXY>
					LCD_uint8_WriteNumber(temprature);
    45ba:	fe 01       	movw	r30, r28
    45bc:	e8 50       	subi	r30, 0x08	; 8
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	80 81       	ld	r24, Z
    45c2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_uint8_WriteNumber>
					LCD_SendString(" 'C");
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	91 e0       	ldi	r25, 0x01	; 1
    45ca:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_SendString>
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e8       	ldi	r25, 0x80	; 128
    45d2:	ab e3       	ldi	r26, 0x3B	; 59
    45d4:	b5 e4       	ldi	r27, 0x45	; 69
    45d6:	89 8f       	std	Y+25, r24	; 0x19
    45d8:	9a 8f       	std	Y+26, r25	; 0x1a
    45da:	ab 8f       	std	Y+27, r26	; 0x1b
    45dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45de:	69 8d       	ldd	r22, Y+25	; 0x19
    45e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	4a e7       	ldi	r20, 0x7A	; 122
    45ec:	55 e4       	ldi	r21, 0x45	; 69
    45ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	8d 8b       	std	Y+21, r24	; 0x15
    45f8:	9e 8b       	std	Y+22, r25	; 0x16
    45fa:	af 8b       	std	Y+23, r26	; 0x17
    45fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45fe:	6d 89       	ldd	r22, Y+21	; 0x15
    4600:	7e 89       	ldd	r23, Y+22	; 0x16
    4602:	8f 89       	ldd	r24, Y+23	; 0x17
    4604:	98 8d       	ldd	r25, Y+24	; 0x18
    4606:	20 e0       	ldi	r18, 0x00	; 0
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	40 e8       	ldi	r20, 0x80	; 128
    460c:	5f e3       	ldi	r21, 0x3F	; 63
    460e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4612:	88 23       	and	r24, r24
    4614:	2c f4       	brge	.+10     	; 0x4620 <main+0x185c>
		__ticks = 1;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	9c 8b       	std	Y+20, r25	; 0x14
    461c:	8b 8b       	std	Y+19, r24	; 0x13
    461e:	3f c0       	rjmp	.+126    	; 0x469e <main+0x18da>
	else if (__tmp > 65535)
    4620:	6d 89       	ldd	r22, Y+21	; 0x15
    4622:	7e 89       	ldd	r23, Y+22	; 0x16
    4624:	8f 89       	ldd	r24, Y+23	; 0x17
    4626:	98 8d       	ldd	r25, Y+24	; 0x18
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	3f ef       	ldi	r19, 0xFF	; 255
    462c:	4f e7       	ldi	r20, 0x7F	; 127
    462e:	57 e4       	ldi	r21, 0x47	; 71
    4630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4634:	18 16       	cp	r1, r24
    4636:	4c f5       	brge	.+82     	; 0x468a <main+0x18c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4638:	69 8d       	ldd	r22, Y+25	; 0x19
    463a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    463c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    463e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e2       	ldi	r20, 0x20	; 32
    4646:	51 e4       	ldi	r21, 0x41	; 65
    4648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464c:	dc 01       	movw	r26, r24
    464e:	cb 01       	movw	r24, r22
    4650:	bc 01       	movw	r22, r24
    4652:	cd 01       	movw	r24, r26
    4654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4658:	dc 01       	movw	r26, r24
    465a:	cb 01       	movw	r24, r22
    465c:	9c 8b       	std	Y+20, r25	; 0x14
    465e:	8b 8b       	std	Y+19, r24	; 0x13
    4660:	0f c0       	rjmp	.+30     	; 0x4680 <main+0x18bc>
    4662:	80 e9       	ldi	r24, 0x90	; 144
    4664:	91 e0       	ldi	r25, 0x01	; 1
    4666:	9a 8b       	std	Y+18, r25	; 0x12
    4668:	89 8b       	std	Y+17, r24	; 0x11
    466a:	89 89       	ldd	r24, Y+17	; 0x11
    466c:	9a 89       	ldd	r25, Y+18	; 0x12
    466e:	01 97       	sbiw	r24, 0x01	; 1
    4670:	f1 f7       	brne	.-4      	; 0x466e <main+0x18aa>
    4672:	9a 8b       	std	Y+18, r25	; 0x12
    4674:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4676:	8b 89       	ldd	r24, Y+19	; 0x13
    4678:	9c 89       	ldd	r25, Y+20	; 0x14
    467a:	01 97       	sbiw	r24, 0x01	; 1
    467c:	9c 8b       	std	Y+20, r25	; 0x14
    467e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4680:	8b 89       	ldd	r24, Y+19	; 0x13
    4682:	9c 89       	ldd	r25, Y+20	; 0x14
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	69 f7       	brne	.-38     	; 0x4662 <main+0x189e>
    4688:	14 c0       	rjmp	.+40     	; 0x46b2 <main+0x18ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    468a:	6d 89       	ldd	r22, Y+21	; 0x15
    468c:	7e 89       	ldd	r23, Y+22	; 0x16
    468e:	8f 89       	ldd	r24, Y+23	; 0x17
    4690:	98 8d       	ldd	r25, Y+24	; 0x18
    4692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	9c 8b       	std	Y+20, r25	; 0x14
    469c:	8b 8b       	std	Y+19, r24	; 0x13
    469e:	8b 89       	ldd	r24, Y+19	; 0x13
    46a0:	9c 89       	ldd	r25, Y+20	; 0x14
    46a2:	98 8b       	std	Y+16, r25	; 0x10
    46a4:	8f 87       	std	Y+15, r24	; 0x0f
    46a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a8:	98 89       	ldd	r25, Y+16	; 0x10
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	f1 f7       	brne	.-4      	; 0x46aa <main+0x18e6>
    46ae:	98 8b       	std	Y+16, r25	; 0x10
    46b0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(3000);
					LCD_ClearDisplay();
    46b2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearDisplay>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	a0 e0       	ldi	r26, 0x00	; 0
    46bc:	b0 e4       	ldi	r27, 0x40	; 64
    46be:	8b 87       	std	Y+11, r24	; 0x0b
    46c0:	9c 87       	std	Y+12, r25	; 0x0c
    46c2:	ad 87       	std	Y+13, r26	; 0x0d
    46c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    46cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	4a e7       	ldi	r20, 0x7A	; 122
    46d4:	55 e4       	ldi	r21, 0x45	; 69
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	8f 83       	std	Y+7, r24	; 0x07
    46e0:	98 87       	std	Y+8, r25	; 0x08
    46e2:	a9 87       	std	Y+9, r26	; 0x09
    46e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46e6:	6f 81       	ldd	r22, Y+7	; 0x07
    46e8:	78 85       	ldd	r23, Y+8	; 0x08
    46ea:	89 85       	ldd	r24, Y+9	; 0x09
    46ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e8       	ldi	r20, 0x80	; 128
    46f4:	5f e3       	ldi	r21, 0x3F	; 63
    46f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46fa:	88 23       	and	r24, r24
    46fc:	2c f4       	brge	.+10     	; 0x4708 <main+0x1944>
		__ticks = 1;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	9e 83       	std	Y+6, r25	; 0x06
    4704:	8d 83       	std	Y+5, r24	; 0x05
    4706:	40 c0       	rjmp	.+128    	; 0x4788 <main+0x19c4>
	else if (__tmp > 65535)
    4708:	6f 81       	ldd	r22, Y+7	; 0x07
    470a:	78 85       	ldd	r23, Y+8	; 0x08
    470c:	89 85       	ldd	r24, Y+9	; 0x09
    470e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	3f ef       	ldi	r19, 0xFF	; 255
    4714:	4f e7       	ldi	r20, 0x7F	; 127
    4716:	57 e4       	ldi	r21, 0x47	; 71
    4718:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    471c:	18 16       	cp	r1, r24
    471e:	54 f5       	brge	.+84     	; 0x4774 <main+0x19b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4720:	6b 85       	ldd	r22, Y+11	; 0x0b
    4722:	7c 85       	ldd	r23, Y+12	; 0x0c
    4724:	8d 85       	ldd	r24, Y+13	; 0x0d
    4726:	9e 85       	ldd	r25, Y+14	; 0x0e
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	40 e2       	ldi	r20, 0x20	; 32
    472e:	51 e4       	ldi	r21, 0x41	; 65
    4730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	bc 01       	movw	r22, r24
    473a:	cd 01       	movw	r24, r26
    473c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	9e 83       	std	Y+6, r25	; 0x06
    4746:	8d 83       	std	Y+5, r24	; 0x05
    4748:	0f c0       	rjmp	.+30     	; 0x4768 <main+0x19a4>
    474a:	80 e9       	ldi	r24, 0x90	; 144
    474c:	91 e0       	ldi	r25, 0x01	; 1
    474e:	9c 83       	std	Y+4, r25	; 0x04
    4750:	8b 83       	std	Y+3, r24	; 0x03
    4752:	8b 81       	ldd	r24, Y+3	; 0x03
    4754:	9c 81       	ldd	r25, Y+4	; 0x04
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	f1 f7       	brne	.-4      	; 0x4756 <main+0x1992>
    475a:	9c 83       	std	Y+4, r25	; 0x04
    475c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475e:	8d 81       	ldd	r24, Y+5	; 0x05
    4760:	9e 81       	ldd	r25, Y+6	; 0x06
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	9e 83       	std	Y+6, r25	; 0x06
    4766:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4768:	8d 81       	ldd	r24, Y+5	; 0x05
    476a:	9e 81       	ldd	r25, Y+6	; 0x06
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	69 f7       	brne	.-38     	; 0x474a <main+0x1986>
    4770:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4774:	6f 81       	ldd	r22, Y+7	; 0x07
    4776:	78 85       	ldd	r23, Y+8	; 0x08
    4778:	89 85       	ldd	r24, Y+9	; 0x09
    477a:	9a 85       	ldd	r25, Y+10	; 0x0a
    477c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4780:	dc 01       	movw	r26, r24
    4782:	cb 01       	movw	r24, r22
    4784:	9e 83       	std	Y+6, r25	; 0x06
    4786:	8d 83       	std	Y+5, r24	; 0x05
    4788:	8d 81       	ldd	r24, Y+5	; 0x05
    478a:	9e 81       	ldd	r25, Y+6	; 0x06
    478c:	9a 83       	std	Y+2, r25	; 0x02
    478e:	89 83       	std	Y+1, r24	; 0x01
    4790:	89 81       	ldd	r24, Y+1	; 0x01
    4792:	9a 81       	ldd	r25, Y+2	; 0x02
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	f1 f7       	brne	.-4      	; 0x4794 <main+0x19d0>
    4798:	9a 83       	std	Y+2, r25	; 0x02
    479a:	89 83       	std	Y+1, r24	; 0x01
    479c:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <main+0x8f4>
					_delay_ms(2);
					break;
				case '2':
					setPinVAlue(DIO_PORTD,PIN4,OUTPUT_HIGH);
    47a0:	83 e0       	ldi	r24, 0x03	; 3
    47a2:	64 e0       	ldi	r22, 0x04	; 4
    47a4:	41 e0       	ldi	r20, 0x01	; 1
    47a6:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
    47aa:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <main+0x8f4>
					break;
				case '3':
					setPinVAlue(DIO_PORTD,PIN4,OUTPUT_LOW);
    47ae:	83 e0       	ldi	r24, 0x03	; 3
    47b0:	64 e0       	ldi	r22, 0x04	; 4
    47b2:	40 e0       	ldi	r20, 0x00	; 0
    47b4:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
    47b8:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <main+0x8f4>
					break;
				case '4':
					setPinVAlue(DIO_PORTD,PIN7,OUTPUT_HIGH);
    47bc:	83 e0       	ldi	r24, 0x03	; 3
    47be:	67 e0       	ldi	r22, 0x07	; 7
    47c0:	41 e0       	ldi	r20, 0x01	; 1
    47c2:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
    47c6:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <main+0x8f4>
					break;
				case '5':
					setPinVAlue(DIO_PORTD,PIN7,OUTPUT_LOW);
    47ca:	83 e0       	ldi	r24, 0x03	; 3
    47cc:	67 e0       	ldi	r22, 0x07	; 7
    47ce:	40 e0       	ldi	r20, 0x00	; 0
    47d0:	0e 94 cc 09 	call	0x1398	; 0x1398 <setPinVAlue>
    47d4:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <main+0x8f4>
				default:
					break;
			}
		}
	}
	return 0;
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	90 e0       	ldi	r25, 0x00	; 0
}
    47dc:	c9 5f       	subi	r28, 0xF9	; 249
    47de:	de 4f       	sbci	r29, 0xFE	; 254
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	cd bf       	out	0x3d, r28	; 61
    47ea:	cf 91       	pop	r28
    47ec:	df 91       	pop	r29
    47ee:	1f 91       	pop	r17
    47f0:	0f 91       	pop	r16
    47f2:	08 95       	ret

000047f4 <ComparePasswords>:

static uint8 ComparePasswords(uint8 *pass1 , uint8 *pass2 )
{
    47f4:	df 93       	push	r29
    47f6:	cf 93       	push	r28
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <ComparePasswords+0x6>
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <ComparePasswords+0x8>
    47fc:	0f 92       	push	r0
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	9a 83       	std	Y+2, r25	; 0x02
    4804:	89 83       	std	Y+1, r24	; 0x01
    4806:	7c 83       	std	Y+4, r23	; 0x04
    4808:	6b 83       	std	Y+3, r22	; 0x03
	if(pass1[0]==pass2[3]&&pass1[1]==pass2[2]&&pass1[2]==pass2[1]&&pass1[3]==pass2[0])
    480a:	e9 81       	ldd	r30, Y+1	; 0x01
    480c:	fa 81       	ldd	r31, Y+2	; 0x02
    480e:	20 81       	ld	r18, Z
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	9c 81       	ldd	r25, Y+4	; 0x04
    4814:	fc 01       	movw	r30, r24
    4816:	33 96       	adiw	r30, 0x03	; 3
    4818:	80 81       	ld	r24, Z
    481a:	28 17       	cp	r18, r24
    481c:	29 f5       	brne	.+74     	; 0x4868 <ComparePasswords+0x74>
    481e:	89 81       	ldd	r24, Y+1	; 0x01
    4820:	9a 81       	ldd	r25, Y+2	; 0x02
    4822:	fc 01       	movw	r30, r24
    4824:	31 96       	adiw	r30, 0x01	; 1
    4826:	20 81       	ld	r18, Z
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	9c 81       	ldd	r25, Y+4	; 0x04
    482c:	fc 01       	movw	r30, r24
    482e:	32 96       	adiw	r30, 0x02	; 2
    4830:	80 81       	ld	r24, Z
    4832:	28 17       	cp	r18, r24
    4834:	c9 f4       	brne	.+50     	; 0x4868 <ComparePasswords+0x74>
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	fc 01       	movw	r30, r24
    483c:	32 96       	adiw	r30, 0x02	; 2
    483e:	20 81       	ld	r18, Z
    4840:	8b 81       	ldd	r24, Y+3	; 0x03
    4842:	9c 81       	ldd	r25, Y+4	; 0x04
    4844:	fc 01       	movw	r30, r24
    4846:	31 96       	adiw	r30, 0x01	; 1
    4848:	80 81       	ld	r24, Z
    484a:	28 17       	cp	r18, r24
    484c:	69 f4       	brne	.+26     	; 0x4868 <ComparePasswords+0x74>
    484e:	89 81       	ldd	r24, Y+1	; 0x01
    4850:	9a 81       	ldd	r25, Y+2	; 0x02
    4852:	fc 01       	movw	r30, r24
    4854:	33 96       	adiw	r30, 0x03	; 3
    4856:	90 81       	ld	r25, Z
    4858:	eb 81       	ldd	r30, Y+3	; 0x03
    485a:	fc 81       	ldd	r31, Y+4	; 0x04
    485c:	80 81       	ld	r24, Z
    485e:	98 17       	cp	r25, r24
    4860:	19 f4       	brne	.+6      	; 0x4868 <ComparePasswords+0x74>
	{
		return TRUE;
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	8d 83       	std	Y+5, r24	; 0x05
    4866:	01 c0       	rjmp	.+2      	; 0x486a <ComparePasswords+0x76>
	}
	else
	{
		return FALSE;
    4868:	1d 82       	std	Y+5, r1	; 0x05
    486a:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	0f 90       	pop	r0
    4874:	0f 90       	pop	r0
    4876:	cf 91       	pop	r28
    4878:	df 91       	pop	r29
    487a:	08 95       	ret

0000487c <__mulsi3>:
    487c:	62 9f       	mul	r22, r18
    487e:	d0 01       	movw	r26, r0
    4880:	73 9f       	mul	r23, r19
    4882:	f0 01       	movw	r30, r0
    4884:	82 9f       	mul	r24, r18
    4886:	e0 0d       	add	r30, r0
    4888:	f1 1d       	adc	r31, r1
    488a:	64 9f       	mul	r22, r20
    488c:	e0 0d       	add	r30, r0
    488e:	f1 1d       	adc	r31, r1
    4890:	92 9f       	mul	r25, r18
    4892:	f0 0d       	add	r31, r0
    4894:	83 9f       	mul	r24, r19
    4896:	f0 0d       	add	r31, r0
    4898:	74 9f       	mul	r23, r20
    489a:	f0 0d       	add	r31, r0
    489c:	65 9f       	mul	r22, r21
    489e:	f0 0d       	add	r31, r0
    48a0:	99 27       	eor	r25, r25
    48a2:	72 9f       	mul	r23, r18
    48a4:	b0 0d       	add	r27, r0
    48a6:	e1 1d       	adc	r30, r1
    48a8:	f9 1f       	adc	r31, r25
    48aa:	63 9f       	mul	r22, r19
    48ac:	b0 0d       	add	r27, r0
    48ae:	e1 1d       	adc	r30, r1
    48b0:	f9 1f       	adc	r31, r25
    48b2:	bd 01       	movw	r22, r26
    48b4:	cf 01       	movw	r24, r30
    48b6:	11 24       	eor	r1, r1
    48b8:	08 95       	ret

000048ba <__udivmodqi4>:
    48ba:	99 1b       	sub	r25, r25
    48bc:	79 e0       	ldi	r23, 0x09	; 9
    48be:	04 c0       	rjmp	.+8      	; 0x48c8 <__udivmodqi4_ep>

000048c0 <__udivmodqi4_loop>:
    48c0:	99 1f       	adc	r25, r25
    48c2:	96 17       	cp	r25, r22
    48c4:	08 f0       	brcs	.+2      	; 0x48c8 <__udivmodqi4_ep>
    48c6:	96 1b       	sub	r25, r22

000048c8 <__udivmodqi4_ep>:
    48c8:	88 1f       	adc	r24, r24
    48ca:	7a 95       	dec	r23
    48cc:	c9 f7       	brne	.-14     	; 0x48c0 <__udivmodqi4_loop>
    48ce:	80 95       	com	r24
    48d0:	08 95       	ret

000048d2 <__divmodhi4>:
    48d2:	97 fb       	bst	r25, 7
    48d4:	09 2e       	mov	r0, r25
    48d6:	07 26       	eor	r0, r23
    48d8:	0a d0       	rcall	.+20     	; 0x48ee <__divmodhi4_neg1>
    48da:	77 fd       	sbrc	r23, 7
    48dc:	04 d0       	rcall	.+8      	; 0x48e6 <__divmodhi4_neg2>
    48de:	2e d0       	rcall	.+92     	; 0x493c <__udivmodhi4>
    48e0:	06 d0       	rcall	.+12     	; 0x48ee <__divmodhi4_neg1>
    48e2:	00 20       	and	r0, r0
    48e4:	1a f4       	brpl	.+6      	; 0x48ec <__divmodhi4_exit>

000048e6 <__divmodhi4_neg2>:
    48e6:	70 95       	com	r23
    48e8:	61 95       	neg	r22
    48ea:	7f 4f       	sbci	r23, 0xFF	; 255

000048ec <__divmodhi4_exit>:
    48ec:	08 95       	ret

000048ee <__divmodhi4_neg1>:
    48ee:	f6 f7       	brtc	.-4      	; 0x48ec <__divmodhi4_exit>
    48f0:	90 95       	com	r25
    48f2:	81 95       	neg	r24
    48f4:	9f 4f       	sbci	r25, 0xFF	; 255
    48f6:	08 95       	ret

000048f8 <__udivmodsi4>:
    48f8:	a1 e2       	ldi	r26, 0x21	; 33
    48fa:	1a 2e       	mov	r1, r26
    48fc:	aa 1b       	sub	r26, r26
    48fe:	bb 1b       	sub	r27, r27
    4900:	fd 01       	movw	r30, r26
    4902:	0d c0       	rjmp	.+26     	; 0x491e <__udivmodsi4_ep>

00004904 <__udivmodsi4_loop>:
    4904:	aa 1f       	adc	r26, r26
    4906:	bb 1f       	adc	r27, r27
    4908:	ee 1f       	adc	r30, r30
    490a:	ff 1f       	adc	r31, r31
    490c:	a2 17       	cp	r26, r18
    490e:	b3 07       	cpc	r27, r19
    4910:	e4 07       	cpc	r30, r20
    4912:	f5 07       	cpc	r31, r21
    4914:	20 f0       	brcs	.+8      	; 0x491e <__udivmodsi4_ep>
    4916:	a2 1b       	sub	r26, r18
    4918:	b3 0b       	sbc	r27, r19
    491a:	e4 0b       	sbc	r30, r20
    491c:	f5 0b       	sbc	r31, r21

0000491e <__udivmodsi4_ep>:
    491e:	66 1f       	adc	r22, r22
    4920:	77 1f       	adc	r23, r23
    4922:	88 1f       	adc	r24, r24
    4924:	99 1f       	adc	r25, r25
    4926:	1a 94       	dec	r1
    4928:	69 f7       	brne	.-38     	; 0x4904 <__udivmodsi4_loop>
    492a:	60 95       	com	r22
    492c:	70 95       	com	r23
    492e:	80 95       	com	r24
    4930:	90 95       	com	r25
    4932:	9b 01       	movw	r18, r22
    4934:	ac 01       	movw	r20, r24
    4936:	bd 01       	movw	r22, r26
    4938:	cf 01       	movw	r24, r30
    493a:	08 95       	ret

0000493c <__udivmodhi4>:
    493c:	aa 1b       	sub	r26, r26
    493e:	bb 1b       	sub	r27, r27
    4940:	51 e1       	ldi	r21, 0x11	; 17
    4942:	07 c0       	rjmp	.+14     	; 0x4952 <__udivmodhi4_ep>

00004944 <__udivmodhi4_loop>:
    4944:	aa 1f       	adc	r26, r26
    4946:	bb 1f       	adc	r27, r27
    4948:	a6 17       	cp	r26, r22
    494a:	b7 07       	cpc	r27, r23
    494c:	10 f0       	brcs	.+4      	; 0x4952 <__udivmodhi4_ep>
    494e:	a6 1b       	sub	r26, r22
    4950:	b7 0b       	sbc	r27, r23

00004952 <__udivmodhi4_ep>:
    4952:	88 1f       	adc	r24, r24
    4954:	99 1f       	adc	r25, r25
    4956:	5a 95       	dec	r21
    4958:	a9 f7       	brne	.-22     	; 0x4944 <__udivmodhi4_loop>
    495a:	80 95       	com	r24
    495c:	90 95       	com	r25
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	08 95       	ret

00004964 <__prologue_saves__>:
    4964:	2f 92       	push	r2
    4966:	3f 92       	push	r3
    4968:	4f 92       	push	r4
    496a:	5f 92       	push	r5
    496c:	6f 92       	push	r6
    496e:	7f 92       	push	r7
    4970:	8f 92       	push	r8
    4972:	9f 92       	push	r9
    4974:	af 92       	push	r10
    4976:	bf 92       	push	r11
    4978:	cf 92       	push	r12
    497a:	df 92       	push	r13
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	ca 1b       	sub	r28, r26
    498e:	db 0b       	sbc	r29, r27
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
    499a:	09 94       	ijmp

0000499c <__epilogue_restores__>:
    499c:	2a 88       	ldd	r2, Y+18	; 0x12
    499e:	39 88       	ldd	r3, Y+17	; 0x11
    49a0:	48 88       	ldd	r4, Y+16	; 0x10
    49a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    49a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    49a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    49a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    49aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    49ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    49ae:	b9 84       	ldd	r11, Y+9	; 0x09
    49b0:	c8 84       	ldd	r12, Y+8	; 0x08
    49b2:	df 80       	ldd	r13, Y+7	; 0x07
    49b4:	ee 80       	ldd	r14, Y+6	; 0x06
    49b6:	fd 80       	ldd	r15, Y+5	; 0x05
    49b8:	0c 81       	ldd	r16, Y+4	; 0x04
    49ba:	1b 81       	ldd	r17, Y+3	; 0x03
    49bc:	aa 81       	ldd	r26, Y+2	; 0x02
    49be:	b9 81       	ldd	r27, Y+1	; 0x01
    49c0:	ce 0f       	add	r28, r30
    49c2:	d1 1d       	adc	r29, r1
    49c4:	0f b6       	in	r0, 0x3f	; 63
    49c6:	f8 94       	cli
    49c8:	de bf       	out	0x3e, r29	; 62
    49ca:	0f be       	out	0x3f, r0	; 63
    49cc:	cd bf       	out	0x3d, r28	; 61
    49ce:	ed 01       	movw	r28, r26
    49d0:	08 95       	ret

000049d2 <_exit>:
    49d2:	f8 94       	cli

000049d4 <__stop_program>:
    49d4:	ff cf       	rjmp	.-2      	; 0x49d4 <__stop_program>
